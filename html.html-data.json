{
    "version": 1.1,
    "tags": [
        {
            "name": "cms:add",
            "description": "```html \n <cms:add my_count '1' /> \n ``` \n===\n\n\nThe **add** tag accepts two parameters and returns as its output the value obtained after adding together the two parameters.  \n\nThe parameters may be literal strings, variables or output of other tags.\n\n\n\n ```html \n<cms:add my_count '1' />\n\n ``` \nThe snippet above adds 1 to what ever value is contained within *my_count* variable and outputs the resulting value.\n\n\nParameters\n----------\n\n\nThe tag expects two parameters as the values to be added.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [sub](sub.html)\n\n* [mul](mul.html)\n\n* [div](div.html)\n\n* [mod](mod.html)\n\n* [incr](incr.html)\n\n* [decr](decr.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "add-value1",
                    "description": "The parameters may be literal strings, variables or output of other tags.",
                    "values": [
                        {
                            "name": "var"
                        },
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "add-value2",
                    "description": "The parameters may be literal strings, variables or output of other tags.",
                    "values": [
                        {
                            "name": "var"
                        },
                        {
                            "name": "int"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:add_querystring",
            "description": "```html \n <cms:add_querystring k_page_link 'param1=someval&param2=otherval' /> \n ```\n================\n\n\nThe **add_querystring** tag can be used to add parameters to the query string portion of URLs (i.e. the portion that contains data to be passed to other pages).\n\n\nThis tag takes care to prefix the provided querystring by a '?' if there are no existing parameters in the URL, else it prefixes an '&'. It is difficult to do so manually if the URL we are adding the parameters to is contained within a variable, which is where this tag comes in handy.\n\n\n\n ```html \n<a href=\"<cms:add_querystring k_page_link 'param1=some_value' />\" >Some link</a>\n\n ``` \n\n ```html \n<a href=\"<cms:add_querystring k_page_link 'param1=some_value&param2=other_value' />\" >Some link</a>\n\n ``` \nParameters\n----------\n\n\n\n\n* link\n\n* querystring\n\n\n\n### link\n\n\nThe URL to append the querystring to.\n\n\n### querystring\n\n\nThe querystring to be appended to the link. It there are multiple parameters in the querystring, separate them by '&'.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "link",
                    "description": "The URL to append the querystring to.\n\n",
                    "values": [
                        {
                            "name": "k_page_link"
                        }
                    ]
                },
                {
                    "name": "querystring",
                    "description": "The querystring to be appended to the link. It there are multiple parameters in the querystring, separate them by '&'.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n"
                }
            ]
        },
        {
            "name": "cms:archives",
            "description": "```html \n <cms:archives masterpage=k_template_name order='1' start_on='startdate' stop_before='stopdate' show_future_entries='1' type='yearly|monthly|daily' startcount='0'>variables</cms:archives> \n ```\n========\n\n\nPlease see [**Core Concepts - Archives**](../concepts/using-archives.html) for an in-depth discussion of this tag.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* order\n\n* limit\n\n* start_on\n\n* stop_before\n\n* show_future_entries\n\n* type\n\n* startcount\n\n\n\n### masterpage\n\n\nThe template to create the archives for. If skipped, the current executing page's template will be assumed.\n\n\n### order\n\n\nCan be set to either *asc* or *desc* for setting the sort order to ascending or descending.\n\n\n### limit\n\n\nSet this parameter to limit the number of archives listed.\n\n\n### start_on\n\n\nCan be set to list archives starting from this date.\n\n\n### stop_before\n\n\nCan be set not to list archives later than this date.\n\n\n### show_future_entries\n\n\nBy default, the **archives** tag will ignore pages that have their publish date set to the future. This parameter can be set to '1' to change this behaviour.\n\n\n### type\n\n\nThe type of the archives created - valid values are *yearly*, *monthly* or *daily*. If skipped, *daily* is assumed by default.\n\n\n### startcount\n\n\nAs this tag enumerates the archives, it sets a variable named *k_count* to the number of the current iteration. *k_count* begins from '0' by default. It can be set to start from any other number by setting this parameter.\n\n\nVariables\n---------\n\n\n\n\n* k_archive_date\n\n* k_next_archive_date\n\n* k_archive_link\n\n* k_archive_count\n\n* k_count\n\n\n\nPlease see [**Core Concepts - Archives**](../concepts/using-archives.html) for details of these variables.\n\n\nRelated Tags\n------------\n\n\n\n\n* [pages](pages.html)\n\n* [folders](folders.html)\n\n* [templates](templates.html)\n\n* [comments](comments.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "The template to create the archives for. If skipped, the current executing page's template will be assumed.\n\n",
                    "values": [
                        {
                            "name": "k_template_name"
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Can be set to either *asc* or *desc* for setting the sort order to ascending or descending.\n\n",
                    "values": [
                        {
                            "name": "asc"
                        },
                        {
                            "name": "desc"
                        }
                    ]
                },
                {
                    "name": "limit",
                    "description": "Set this parameter to limit the number of archives listed.\n\n",
                    "values": [
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "start_on",
                    "description": "Can be set to list archives starting from this date.\n\n",
                    "values": [
                        {
                            "name": "Y-m-d H:i:s"
                        }
                    ]
                },
                {
                    "name": "stop_before",
                    "description": "Can be set not to list archives later than this date.\n\n",
                    "values": [
                        {
                            "name": "Y-m-d H:i:s"
                        }
                    ]
                },
                {
                    "name": "show_future_entries",
                    "description": "By default, the **archives** tag will ignore pages that have their publish date set to the future. This parameter can be set to '1' to change this behaviour.\n\n",
                    "values": [
                        {
                            "name": "1"
                        },
                        {
                            "name": "0"
                        }
                    ]
                },
                {
                    "name": "type",
                    "description": "The type of the archives created - valid values are *yearly*, *monthly* or *daily*. If skipped, *daily* is assumed by default.\n\n",
                    "values": [
                        {
                            "name": "yearly"
                        },
                        {
                            "name": "monthly"
                        },
                        {
                            "name": "daily"
                        }
                    ]
                },
                {
                    "name": "startcount",
                    "description": "As this tag enumerates the archives, it sets a variable named *k_count* to the number of the current iteration. *k_count* begins from '0' by default. It can be set to start from any other number by setting this parameter.\n\nVariables\n---------\n\n\n * k_archive_date\n * k_next_archive_date\n * k_archive_link\n * k_archive_count\n * k_count\n \nPlease see [**Core Concepts - Archives**](../concepts/using-archives.html) for details of these variables.\n\nRelated Tags\n------------\n\n\n * [pages](pages.html)\n * [folders](folders.html)\n * [templates](templates.html)\n * [comments](comments.html)\n \n",
                    "values": [
                        {
                            "name": "0"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:breadcrumbs",
            "description": "```html \n <cms:breadcrumbs seperator='&nbsp;-&nbsp;' include_template='1' /> \n```\n===========\n\n\nThe **breadcrumbs** tag outputs the hierarchy of folders leading upto the folder being shown (if folder_view) or the folder within which the current page resides (if page_view). This can be used too create a trail (breadcrumbs) leading upto the current page.\n\n\n\n ```html \n<cms:breadcrumbs />\n\n ``` \nPlease see [**Core Concepts - Folders**](../concepts/using-folders.html) for a discussion on this tag's usage.\n\n\nParameters\n----------\n\n\n\n\n* separator\n\n* include_template\n\n\n\n### separator\n\n\nSet the separator to show between each item in the breadcrumbs. The default separator is '*&nbsp;>&nbsp;*'.\n\n\n### include_template\n\n\nBy default, this tag only outputs the hierarchy of folders. To make it also list the template of the folders as the first item in the breadcrumbs, set this parameter to '1'.  \n\nIf this parameter is set, remember to check that the current view is either *folder-view* or *page-view* before invoking this tag, because for any other views the folder hierarchy is irrelevant and **breadcrumbs** tag rightly does not output any folder names, however the *include_template* parameter will cause the template's name to appear which might not be desirable.\n\n\n\n ```html \n<cms:if k_is_page || k_is_folder >\n <cms:breadcrumbs separator='&nbsp;>>&nbsp;' include_template='1' />\n</cms:if>\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [folder](folder.html)\n\n* [folders](folders.html)\n\n* [listfolders](listfolders.html)\n\n* [dropdownfolders](dropdownfolders.html)\n\n* [parentfolders](parentfolders.html)\n\n* [is_ancestor](is_ancestor.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "separator",
                    "description": "Set the separator to show between each item in the breadcrumbs. The default separator is '*&nbsp;>&nbsp;*'.\n\n",
                    "values": [
                        {
                            "name": "&nbsp;>&nbsp;"
                        }
                    ]
                },
                {
                    "name": "include_template",
                    "description": "By default, this tag only outputs the hierarchy of folders. To make it also list the template of the folders as the first item in the breadcrumbs, set this parameter to '1'.  \n If this parameter is set, remember to check that the current view is either *folder-view* or *page-view* before invoking this tag, because for any other views the folder hierarchy is irrelevant and **breadcrumbs** tag rightly does not output any folder names, however the *include_template* parameter will cause the template's name to appear which might not be desirable.\n\n\n ```html \n<cms:if k_is_page || k_is_folder > <cms:breadcrumbs separator='&nbsp;>>&nbsp;' include_template='1' /> </cms:if> \n ``` \nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [folder](folder.html)\n * [folders](folders.html)\n * [listfolders](listfolders.html)\n * [dropdownfolders](dropdownfolders.html)\n * [parentfolders](parentfolders.html)\n * [is_ancestor](is_ancestor.html)\n \n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:calendar",
            "description": "```html \n <cms:calendar date='2010-09-01' masterpage='events.php'>\r\n    <table class=\"calendar_small\">\r\n        <tr>\r\n            <th colspan=\"7\"><cms:date k_calendar_date format='F Y' /></th>\r\n        </tr>\r\n        <tr>\r\n            <cms:repeat count='7'>\r\n            <td class=\"months_heading\"><cms:zebra 'Su' 'M' 'T' 'W' 'Th' 'F' 'S'/></td>\r\n            </cms:repeat>\r\n        </tr>\r\n\r\n        <cms:weeks>\r\n            <tr>\r\n            <cms:days >\r\n                <cms:if k_timeline_position='present'>\r\n                    <cms:set tdclass='today' />\r\n                <cms:else />\r\n                    <cms:set tdclass='' />\r\n                </cms:if>\r\n\r\n                <cms:if k_position='current_month' >\r\n                    <cms:if k_count_entries >\r\n                        <td class='entries <cms:show tdclass />' >\r\n                            <a href=\"<cms:link masterpage='events.php' year=k_year month=k_month day=k_day />\"><cms:show k_day /></a>\r\n                        </td>\r\n                    <cms:else />\r\n                        <td class='<cms:show tdclass />' ><cms:show k_day /></td>\r\n                    </cms:if>\r\n                <cms:else />\r\n                    <td class='other_month'><cms:show k_day /></td>\r\n                </cms:if>\r\n            </cms:days>\r\n            </tr>\r\n        </cms:weeks>\r\n    </table>\r\n</cms:calendar>\n```\n========\n\n\nThe **calendar** tag can be used to create a monthly calendar. It can be associated with a template to make it display cloned pages of the template as entries of the calendar.\n\n\nThe calendar tag works together with the **weeks**, **days** and **entries** tags to fulfill its functionality.  \n\nPlease see [**Core Concepts - Events Calendar**](../concepts/events-calendar.html) for a working example of this tag.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* date\n\n* week_starts\n\n\n\nApart from these parameters, this tag also accepts all the arguments of the [**pages**](pages.html) tag. This can be used to further refine the types of pages that are shown as entries of the calendar.\n\n\n### masterpage\n\n\nSetting this parameter to the name of a clonable template will cause the **entries** tag to fetch pages belonging to this template as entries of the day they are published on.\n\n\n### date\n\n\nThis parameter sets the month that is displayed by the calendar. If skipped, the current date is shown.\n\n\n### week_starts\n\n\nThis parameter sets the first day of the weeks as shown by the calendar.  \n\nIt is a numeric value ranging from 0 (Sunday) to 6 (Saturday). If skipped, the default is 0 (Sunday).\n\n\nVariables\n---------\n\n\n\n\n* k_count_weeks\n\n* k_calendar_date\n\n* k_calendar_year\n\n* k_calendar_month\n\n* k_next_calendar_date\n\n* k_next_calendar_year\n\n* k_next_calendar_month\n\n* k_prev_calendar_date\n\n* k_prev_calendar_year\n\n* k_prev_calendar_month\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [weeks](weeks.html)\n\n* [days](days.html)\n\n* [entries](entries.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "Setting this parameter to the name of a clonable template will cause the **entries** tag to fetch pages belonging to this template as entries of the day they are published on.\n\n",
                    "values": [
                        {
                            "name": "k_template_name"
                        }
                    ]
                },
                {
                    "name": "date",
                    "description": "This parameter sets the month that is displayed by the calendar. If skipped, the current date is shown.\n\n",
                    "values": [
                        {
                            "name": "Y-m-d H:i:s"
                        }
                    ]
                },
                {
                    "name": "week_starts",
                    "description": "This parameter sets the first day of the weeks as shown by the calendar.  \n It is a numeric value ranging from 0 (Sunday) to 6 (Saturday). If skipped, the default is 0 (Sunday).\n\nVariables\n---------\n\n\n * k_count_weeks\n * k_calendar_date\n * k_calendar_year\n * k_calendar_month\n * k_next_calendar_date\n * k_next_calendar_year\n * k_next_calendar_month\n * k_prev_calendar_date\n * k_prev_calendar_year\n * k_prev_calendar_month\n \nRelated Tags\n------------\n\n\n * [weeks](weeks.html)\n * [days](days.html)\n * [entries](entries.html)\n \n",
                    "values": [
                        {
                            "name": "0",
                            "description": "Sunday"
                        },
                        {
                            "name": "1",
                            "description": "Monday"
                        },
                        {
                            "name": "2",
                            "description": "Tuesday"
                        },
                        {
                            "name": "3",
                            "description": "Wednesday"
                        },
                        {
                            "name": "4",
                            "description": "Thursday"
                        },
                        {
                            "name": "5",
                            "description": "Friday"
                        },
                        {
                            "name": "6",
                            "description": "Saturday"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:capture",
            "description": "```html \n <cms:capture into='my_variable' scope='global'>\r\n        ...everything executed here will get stored in variable 'my_variable' at the requested scope...\r\n      </cms:capture> \n```\n=======\n\n\nThe **capture** tag can be used to store the output of its enclosed contents within any variable.  \n\nThe enclosed contents can be regular HTML code as well as the Couch tags.\n\n\n\n ```html \n<cms:capture into='my_variable' scope='global'>\n ...everything executed here will get stored in variable 'my_variable' at the requested scope...\n</cms:capture>\n\n ``` \nThis tag is very helpful when you want to execute a portion of the code but wish to display the resulting output based on some other condition that is unknown at the point of execution of this code e.g. present in the page somewhere after the block of code in question.\n\n\nThis situation can be tackled by storing the output of the block of code in a variable for the time being. When we reach the required condition and if it evaluates to be true, we can display the output by showing the variable. However, if the condition fails, we can simply ignore the variable.\n\n\nYou'll find an interesting example of this tag's use in [**Sample Portfolio Site - Contact Form**](../tutorials/portfolio-site/contact-form.html)\n\n\nParameters\n----------\n\n\n\n\n* into\n\n* scope\n\n\n\n### into\n\n\nName of the variable to store the output in.\n\n\n### scope\n\n\nScope of the aforesaid variable. Can be either *global* or *parent*.  \n\nIf set to *global*, the variable will be available anywhere throughout the page. If set to *parent*, the variable will only be available only within the scope of the parent tag (if any) that is nesting the **capture** tag.\n\n\nVariables\n---------\n\n\nSets only the variable specified by the *into* parameter within the specified scope. Sets no variables of its own that can be used within its opening and closing tags.\n\n\n'",
            "attributes": [
                {
                    "name": "into",
                    "description": "Name of the variable to store the output in.\n\n",
                    "values": [
                        {
                            "name": "var"
                        }
                    ]
                },
                {
                    "name": "scope",
                    "description": "Scope of the aforesaid variable. Can be either *global* or *parent*.  \n If set to *global*, the variable will be available anywhere throughout the page. If set to *parent*, the variable will only be available only within the scope of the parent tag (if any) that is nesting the **capture** tag.\n\nVariables\n---------\n\nSets only the variable specified by the *into* parameter within the specified scope. Sets no variables of its own that can be used within its opening and closing tags.\n\n",
                    "values": [
                        {
                            "name": "global"
                        },
                        {
                            "name": "parent"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:cloak_email",
            "description": "```html \n <cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' /> \n```\n============\n\n\nThe **cloak_email** tag can be used to hide email addresses from spambots (email harvesters).  \n\nThis tag creates a JavaScript encrypted mailto link that remains inaccessible to spambots.\n\n\n\n ```html \n<cms:cloak_email 'johndoe@gmail.com' />\n\n ``` \nThe code above will produce the following HTML but only if accessed using JavaScript -\n\n\n\n ```html \n<a href=\"mailto:johndoe@gmail.com\">johndoe@gmail.com</a>\n\n ``` \nWhen accessed with JavaScript disabled, a message prompting the visitor to enable JavaScript is shown instead.\n\n\nParameters\n----------\n\n\n\n\n* email\n\n* title\n\n* msg\n\n\n\n### email\n\n\nThe email address to cloak.\n\n\n\n ```html \n<cms:cloak_email email='johndoe@gmail.com' />\n\n ``` \n### title\n\n\nThe visible text of the mailto link. If skipped, the *email* parameter is used for the title too.\n\n\n\n ```html \n<cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' />\n\n ``` \n### msg\n\n\nMessage to display if this email is accessed with JavaScript disabled. If skipped, the default text shown is -  \n\n'*(Please enable JavaScript to view this email address)*'\n\n\n\n ```html \n<cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' msg='No JavaScript ?!!' />\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [cloak_url](cloak_url.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "email",
                    "description": "The email address to cloak.\n\n\n ```html \n<cms:cloak_email email='johndoe@gmail.com' /> \n ``` \n",
                    "values": [
                        {
                            "name": "emailAddress"
                        }
                    ]
                },
                {
                    "name": "title",
                    "description": "The visible text of the mailto link. If skipped, the *email* parameter is used for the title too.\n\n\n ```html \n<cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' /> \n ``` \n",
                    "values": [
                        {
                            "name": "Contact Me!"
                        }
                    ]
                },
                {
                    "name": "msg",
                    "description": "Message to display if this email is accessed with JavaScript disabled. If skipped, the default text shown is -  \n '*(Please enable JavaScript to view this email address)*'\n\n\n ```html \n<cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' msg='No JavaScript ?!!' /> \n ``` \nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [cloak_url](cloak_url.html)\n \n",
                    "values": [
                        {
                            "name": "(Please enable JavaScript to view this email address)"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:cloak_url",
            "description": "```html \n <a href=\"<cms:cloak_url\r\n        link=\"http://yoursite.com/couch/uploads/file/secure/test.jpg\" force_download='1' access_level='4' prompt_login='1' />\">Test Link</a> \n ```\n==========\n\n\nThe **cloak_url** tag, as the name suggests, can be used to cloak links so that it does not become apparent from just looking at the links as to where they actually lead to.\n\n\nPlease see [**Core Concepts - Cloaked Links**](../concepts/cloaked-links.html) for a detailed discussion of this tag.\n\n\nParameters\n----------\n\n\n\n\n* link\n\n* expiry\n\n* access_level\n\n* prompt_login\n\n* redirect\n\n* force_download\n\n\n\n### link\n\n\nThe link (URL) to cloak.\n\n\n### expiry\n\n\nThis parameter can be used to set a time (in seconds) after which the link produced wll no longer be valid.\n\n\n### access_level\n\n\nIf an access level is set by this parameter, only authenticated users with the right level of privileges will be able to access the link.\n\n\n### prompt_login\n\n\nThis parameter works in tandem with the *access_level* parameter above. With this parameter set to '1', if a link that has an access level set on it is accessed by someone who is not privileged enough, a login box is shown to hime thus promting him to login for accessing the link.  \n\nBy default, this parameter is '0' and unauthorized users are simply served a blank page.\n\n\n### redirect\n\n\nIf this parameter is set to '1', the user is redirected to the *link* provided (by issuing a HTTP 302 redirect).\n\n\n### force_download\n\n\nBy default, this tag evaluates the type of the file being linked to and sends back proper Content-Type to the browser. This causes the browser to display certain files (e.g. image files like gif, png etc.) directly while displaying a messagebox prompting the user to download certain types of files (e.g. executables, zip files etc.).  \n\nIf this parameter is set to '1', Couch will cause the browser to always display the download box regardless of the type of file being served.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [cloak_email](cloak_email.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "link",
                    "description": "The link (URL) to cloak.\n\n"
                },
                {
                    "name": "expiry",
                    "description": "This parameter can be used to set a time (in seconds) after which the link produced wll no longer be valid.\n\n",
                    "values": [
                        {
                            "name": "seconds"
                        }
                    ]
                },
                {
                    "name": "access_level",
                    "description": "If an access level is set by this parameter, only authenticated users with the right level of privileges will be able to access the link.\n\n",
                    "values": [
                        {
                            "name": "0",
                            "description": "Everybody"
                        },
                        {
                            "name": "2",
                            "description": "Authenticated Users"
                        },
                        {
                            "name": "4",
                            "description": "Authenticated User (Special)"
                        },
                        {
                            "name": "7",
                            "description": "Administrators"
                        },
                        {
                            "name": "10",
                            "description": "Super Admin"
                        }
                    ]
                },
                {
                    "name": "prompt_login",
                    "description": "This parameter works in tandem with the *access_level* parameter above. With this parameter set to '1', if a link that has an access level set on it is accessed by someone who is not privileged enough, a login box is shown to hime thus promting him to login for accessing the link.  \n By default, this parameter is '0' and unauthorized users are simply served a blank page.\n\n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                },
                {
                    "name": "redirect",
                    "description": "If this parameter is set to '1', the user is redirected to the *link* provided (by issuing a HTTP 302 redirect).\n\n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                },
                {
                    "name": "force_download",
                    "description": "By default, this tag evaluates the type of the file being linked to and sends back proper Content-Type to the browser. This causes the browser to display certain files (e.g. image files like gif, png etc.) directly while displaying a messagebox prompting the user to download certain types of files (e.g. executables, zip files etc.).  \n If this parameter is set to '1', Couch will cause the browser to always display the download box regardless of the type of file being served.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [cloak_email](cloak_email.html)\n \n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:comments",
            "description": "```html \n <cms:comments masterpage='blog.php'></cms:comments> \n ```\n========\n\n\nPlease see [**Core Concepts - Comments**](../concepts/using-comments.html) for a full discussion of the Comments tag.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* page_id\n\n* page_name\n\n* limit\n\n* paginate\n\n* offset\n\n* order\n\n\n\nNormally *comments* tag will fetch all the available approved comments.  \n\nIt can be constrained into fetching comments from only certain pages by setting the *masterpage*, *page_id* and *page_name* parameters.\n\n\n### masterpage\n\n\n\n ```html \n<cms:comments masterpage='blog.php'></cms:comments>\n\n ``` \nFetch comments of only the pages that have been cloned out of blog.php.\n\n\n\n ```html \n<cms:comments masterpage='blog.php, testimonial.php'></cms:comments>\n\n ``` \nFetch comments of only the pages that have been cloned out of blog.php or testimonial.php.\n\n\n\n ```html \n<cms:comments masterpage='NOT blog.php, testimonial.php'></cms:comments>\n\n ``` \nFetch comments of all the pages except those that have been cloned out of blog.php or testimonial.php.\n\n\n### page_id\n\n\n\n ```html \n<cms:comments page_id='13'></cms:comments>\n\n ``` \nFetch comments of only the page with the id of '13'.\n\n\n\n ```html \n<cms:comments page_id='13, 17'></cms:comments>\n\n ``` \nFetch comments of only the pages that have an id of '13' or '17'.\n\n\n\n ```html \n<cms:comments page_id='NOT 13, 17'></cms:comments>\n\n ``` \nFetch comments of all the pages except the pages that have an id of '13' or '17'.\n\n\n### page_name\n\n\n\n ```html \n<cms:comments page_name='my_first_entry'></cms:comments>\n\n ``` \nFetch comments of only the page named 'my_first_entry'.\n\n\n\n ```html \n<cms:comments page_name='my_first_entry, my_another_entry'></cms:comments>\n\n ``` \nFetch comments of only the pages named 'my_first_entry' or 'my_another_entry'.\n\n\n\n ```html \n<cms:comments page_name='NOT my_first_entry, my_another_entry'></cms:comments>\n\n ``` \nFetch comments of all the pages except the pages named 'my_first_entry' or 'my_another_entry'.\n\n\n### limit\n\n\n\n ```html \n<cms:comments limit='5'></cms:comments>\n\n ``` \nFetch five approved comments. (Since 'order' is not specified, the default value of 'desc' will be used and the latest 5 comments will be fetched.\n\n\n### paginate\n\n\n\n ```html \n<cms:comments limit='5' paginate='1'></cms:comments>\n\n ``` \nFetch ALL approved comments but show only 5 at one time. To move to the next 5 or the previous 5 comments, pagination code has to be used (see [**paginator**](paginator.html)).\n\n\n### offset\n\n\n\n ```html \n<cms:comments limit='5' offset='2'></cms:comments>\n\n ``` \nFetch five approved comments after skipping the first two.\n\n\n### order\n\n\nComments are always ordered by their dates. The order in which they are displayed can be made either ascending or descending by setting this parameter to 'asc' or 'desc' respectively. If omitted, 'desc' (latest first) is assumed.\n\n\n\n ```html \n<cms:comments order='asc'></cms:comments>\n\n ``` \nFetch all approved comments and order them in ascending order (oldest first) of their dates.\n\n\nVariables\n---------\n\n\n\n\n* k_comment_id\n\n* k_comment\n\n* k_comment_author_id\n\n* k_comment_author\n\n* k_comment_author_email\n\n* k_comment_author_website\n\n* k_comment_date\n\n* k_comment_link\n\n* k_comment_page_id\n\n* k_comment_page_title\n\n* k_comment_page_name\n\n* k_comment_template_name\n\n\n\nIn addition to these variables, the pagination related variables that describe the current status of the loop are also set. Please see [**paginator**](paginator.html) for details.\n\n\nRelated Tags\n------------\n\n\n\n\n* [process_comment](process_comment.html)\n\n* [pages](pages.html)\n\n* [folders](folders.html)\n\n* [archives](archives.html)\n\n* [templates](templates.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "\n ```html \n<cms:comments masterpage='blog.php'></cms:comments> \n ``` \nFetch comments of only the pages that have been cloned out of blog.php.\n\n\n ```html \n<cms:comments masterpage='blog.php, testimonial.php'></cms:comments> \n ``` \nFetch comments of only the pages that have been cloned out of blog.php or testimonial.php.\n\n\n ```html \n<cms:comments masterpage='NOT blog.php, testimonial.php'></cms:comments> \n ``` \nFetch comments of all the pages except those that have been cloned out of blog.php or testimonial.php.\n\n",
                    "values": [
                        {
                            "name": "k_template_name"
                        }
                    ]
                },
                {
                    "name": "page_id",
                    "description": "\n ```html \n<cms:comments page_id='13'></cms:comments> \n ``` \nFetch comments of only the page with the id of '13'.\n\n\n ```html \n<cms:comments page_id='13, 17'></cms:comments> \n ``` \nFetch comments of only the pages that have an id of '13' or '17'.\n\n\n ```html \n<cms:comments page_id='NOT 13, 17'></cms:comments> \n ``` \nFetch comments of all the pages except the pages that have an id of '13' or '17'.\n\n",
                    "values": [
                        {
                            "name": "k_page_id"
                        }
                    ]
                },
                {
                    "name": "page_name",
                    "description": "\n ```html \n<cms:comments page_name='my_first_entry'></cms:comments> \n ``` \nFetch comments of only the page named 'my_first_entry'.\n\n\n ```html \n<cms:comments page_name='my_first_entry, my_another_entry'></cms:comments> \n ``` \nFetch comments of only the pages named 'my_first_entry' or 'my_another_entry'.\n\n\n ```html \n<cms:comments page_name='NOT my_first_entry, my_another_entry'></cms:comments> \n ``` \nFetch comments of all the pages except the pages named 'my_first_entry' or 'my_another_entry'.\n\n",
                    "values": [
                        {
                            "name": "string"
                        }
                    ]
                },
                {
                    "name": "limit",
                    "description": "\n ```html \n<cms:comments limit='5'></cms:comments> \n ``` \nFetch five approved comments. (Since 'order' is not specified, the default value of 'desc' will be used and the latest 5 comments will be fetched.\n\n",
                    "values": [
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "paginate",
                    "description": "\n ```html \n<cms:comments limit='5' paginate='1'></cms:comments> \n ``` \nFetch ALL approved comments but show only 5 at one time. To move to the next 5 or the previous 5 comments, pagination code has to be used (see [**paginator**](paginator.html)).\n\n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                },
                {
                    "name": "offset",
                    "description": "\n ```html \n<cms:comments limit='5' offset='2'></cms:comments> \n ``` \nFetch five approved comments after skipping the first two.\n\n",
                    "values": [
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Comments are always ordered by their dates. The order in which they are displayed can be made either ascending or descending by setting this parameter to 'asc' or 'desc' respectively. If omitted, 'desc' (latest first) is assumed.\n\n\n ```html \n<cms:comments order='asc'></cms:comments> \n ``` \nFetch all approved comments and order them in ascending order (oldest first) of their dates.\n\nVariables\n---------\n\n\n * k_comment_id\n * k_comment\n * k_comment_author_id\n * k_comment_author\n * k_comment_author_email\n * k_comment_author_website\n * k_comment_date\n * k_comment_link\n * k_comment_page_id\n * k_comment_page_title\n * k_comment_page_name\n * k_comment_template_name\n \nIn addition to these variables, the pagination related variables that describe the current status of the loop are also set. Please see [**paginator**](paginator.html) for details.\n\nRelated Tags\n------------\n\n\n * [process_comment](process_comment.html)\n * [pages](pages.html)\n * [folders](folders.html)\n * [archives](archives.html)\n * [templates](templates.html)\n \n",
                    "values": [
                        {
                            "name": "asc"
                        },
                        {
                            "name": "desc"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:concat",
            "description": "```html \n <cms:concat 'Hello ' first_name ' ' last_name '! We welcome you!' /> \n ```\n======\n\n\nThe **Concat** tag is a utility tag that can be used to concatenate several values together into a single variable.\n\n\nFor example, suppose we have two variables 'first_name' and 'last_name'.\n\n\n\n ```html \n<cms:set first_name = 'John' />\n<cms:set last_name = 'Doe' />\n\n ``` \nTo set a variable, 'welcome_message' to 'Hello John Doe! We welcome you!', using both the variables, we can do either this -\n\n\n\n ```html \n<cms:set welcome_message=\"hello <cms:show first_name/> <cms:show last_name/>! We welcome you!\" />\n\n ``` \nor use **concat** as follows -\n\n\n\n ```html \n<cms:set welcome_message=\"<cms:concat 'Hello ' first_name ' ' last_name '! We welcome you!' />\" />\n\n ``` \nHere we supply **concat** with all parts of the string as unnamed parameters separated by spaces (i.e. 'Hello ', first_name, ' ', last_name, and '! We welcome you!' with space between each as separator) and **concat** simply returns back the concatenated string.\n\n\n\n If many values are supplied to **concat**, the code sometimes becomes a little difficult to comprehend (as might be the case in the snippet above) because the only demarcation between the parameters is the space.  \n\n  \n\n In such cases, we can try naming the parameters (any arbitrary names can be used). Thus the above snippet could be written as -  \n\n  \n\n\n ```html \n<cms:set welcome_message=\"<cms:concat p1='Hello ' p2=first_name p3=' ' p4=last_name p5='! We welcome you!' />\" />\n ``` \n\n Hopefully that should make the snippet more legible.\n\n\n\n\n One benefit of **concat** over the first method is that it avoids using '<cms:show />' with all variables used within the string.  \n\n  \n\n Another is that we can use '\\n' and '\\t' for inserting newline and tab characters in the string. For example -  \n\n  \n\n\n ```html \n<cms:set msg = \"<cms:concat 'item_name: ' pp_item_name '\\n'\n 'item_number: ' pp_item_number '\\n'\n 'quantity: ' pp_quantity />\" />\n ``` \n\n In the snippet above, 'msg' variable is being set in response to a successful PayPal transaction and will then be emailed.\n\n\n\nParameters\n----------\n\n\nConcat takes any number of unnamed parameters (either literal strings or variables) and returns back a single string containing the concatenated values.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\n'"
        },
        {
            "name": "cms:content_type",
            "description": "```html \n <cms:content_type 'text/xml' /> \n ```\n=============\n\n\nThe **content_type** tag can be used to make the web server send back the contents with the desired Content-Type in the HTTP header.  \n\nBy default every web page is send back as '*text/html*'.\n\n\nAs an example, the RSS feed requires it content type to be set as '*text/xml*' for the browsers to properly recognize the feed. The following snippet does the job -\n\n\n\n ```html \n<cms:content_type 'text/xml' />\n\n ``` \nPlease see [**Core Concepts - RSS Feeds**](../concepts/rss-feeds.html) for an example of the usage of this tag.\n\n\nParameters\n----------\n\n\n\n\n* value\n\n\n\n### value\n\n\nThe desired content type. Some example values are '*text/xml*', '*text/plain*', '*text/css*', '*image/gif*', '*application/pdf*' and '*application/zip*'.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "value",
                    "description": "The desired content type. Some example values are '*text/xml*', '*text/plain*', '*text/css*', '*image/gif*', '*application/pdf*' and '*application/zip*'.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": "text/html"
                        },
                        {
                            "name": "text/plain"
                        },
                        {
                            "name": "text/css"
                        },
                        {
                            "name": "image/gif"
                        },
                        {
                            "name": "application/pdf"
                        },
                        {
                            "name": "application/zip"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:date",
            "description": "```html \n <cms:date k_page_date format='jS M, Y' /> \n ```\n====\n\n\nThe **date** tag outputs a string according to the given *format* parameter using the given *date* parameter. If no *date* provided, the current time is used.\n\n\n\n ```html \n<cms:date />\n\n ``` \n\n ```html \n<cms:date k_page_date />\n\n ``` \n\n ```html \n<cms:date k_page_date format='jS M, Y' />\n\n ``` \nParameters\n----------\n\n\n\n\n* date\n\n* format\n\n* gmt\n\n* locale\n\n* charset\n\n\n\n### date\n\n\nThe date to be formated.  \n\nThis parameter is expected to be in '*Y-m-d H:i:s*' format (e.g. 2010-05-30 21:35:54). All date related variables set by Couch tags, e.g. *k_page_date* etc., are in this format.\n\n\n### format\n\n\nThe **date** tag supports two different types of format characters - locale-aware and non locale-aware.  \n\nWith locale-aware characters, you can specify that the date is to formatted according to, for example, *french* locale or *italian* locale by setting the *locale* parameter.  \n\nThe locale-aware characters all have a % sign prefixed to them.\n\n\nThe locale-aware and the non locale-aware characters cannot be intermixed.\n\n\n#### Non Locale-aware format characters\n\n\n  \n\n\n\n\n\n\nFormat character\nDescription\nExample returned values\n\n\n\n\n***Day***\n---\n---\n\n\n*d*\nDay of the month, 2 digits with leading zeros\n*01* to *31*\n\n\n*D*\nA textual representation of a day, three letters\n*Mon* through *Sun*\n\n\n*j*\nDay of the month without leading zeros\n*1* to *31*\n\n\n*l* (lowercase&nbsp;'L')\nA full textual representation of the day of the week\n*Sunday* through *Saturday*\n\n\n*S*\nEnglish ordinal suffix for the day of the month, 2 characters\n*st*, *nd*, *rd* or *th*. Works well with *j*\n\n\n*w*\nNumeric representation of the day of the week\n*0* (for Sunday) through *6* (for Saturday)\n\n\n*z*\nThe day of the year (starting from 0)\n*0* through *365*\n\n\n***Week***\n---\n---\n\n\n*W*\nISO-8601 week number of year, weeks starting on Monday\nExample: *42* (the 42nd week in the year)\n\n\n***Month***\n---\n---\n\n\n*F*\nA full textual representation of a month, such as January or March\n*January* through *December*\n\n\n*m*\nNumeric representation of a month, with leading zeros\n*01* through *12*\n\n\n*M*\nA short textual representation of a month, three letters\n*Jan* through *Dec*\n\n\n*n*\nNumeric representation of a month, without leading zeros\n*1* through *12*\n\n\n*t*\nNumber of days in the given month\n*28* through *31*\n\n\n***Year***\n---\n---\n\n\n*L*\nWhether it's a leap year\n*1* if it is a leap year, *0* otherwise.\n\n\n*Y*\nA full numeric representation of a year, 4 digits\nExamples: *1999* or *2003*\n\n\n*y*\nA two digit representation of a year\nExamples: *99* or *03*\n\n\n***Time***\n---\n---\n\n\n*a*\nLowercase Ante meridiem and Post meridiem\n*am* or *pm*\n\n\n*A*\nUppercase Ante meridiem and Post meridiem\n*AM* or *PM*\n\n\n*B*\nSwatch Internet time\n*000* through *999*\n\n\n*g*\n12-hour format of an hour without leading zeros\n*1* through *12*\n\n\n*G*\n24-hour format of an hour without leading zeros\n*0* through *23*\n\n\n*h*\n12-hour format of an hour with leading zeros\n*01* through *12*\n\n\n*H*\n24-hour format of an hour with leading zeros\n*00* through *23*\n\n\n*i*\nMinutes with leading zeros\n*00* to *59*\n\n\n*s*\nSeconds, with leading zeros\n*00* through *59*\n\n\n***Timezone***\n---\n---\n\n\n*I* (capital&nbsp;'i')\nWhether or not the date is in daylight saving time\n*1* if Daylight Saving Time, *0* otherwise.\n\n\n*O*\nDifference to Greenwich time (GMT) in hours\nExample: *+0200*\n\n\n*T*\nTimezone abbreviation\nExamples: *EST*, *MDT*\n\n\n*Z*\nTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.\n*-43200* through *50400*\n\n\n***Full&nbsp;Date/Time***\n---\n---\n\n\n*r*\n[RFC 2822](http://www.faqs.org/rfcs/rfc2822) formatted date\nExample: *Thu, 21 Dec 2000 16:01:07 +0200*\n\n\n*U*\nSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n\n\n\n  \n\n\n\n#### Locale-aware format characters\n\n\n  \n\n\n\n\n\n\nFormat Character\nDescription\nExample returned values\n\n\n\n\n***Day***\n---\n---\n\n\n*%a*\nAn abbreviated textual representation of the day\n*Sun* through *Sat*\n\n\n*%A*\nA full textual representation of the day\n*Sunday* through *Saturday*\n\n\n*%d*\nTwo-digit day of the month (with leading zeros)\n*01* to *31*\n\n\n*%e*\nDay of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information.\n*1* to *31*\n\n\n*%j*\nDay of the year, 3 digits with leading zeros\n*001* to *366*\n\n\n*%u*\nISO-8601 numeric representation of the day of the week\n*1* (for Monday) though *7* (for Sunday)\n\n\n*%w*\nNumeric representation of the day of the week\n*0* (for Sunday) through *6* (for Saturday)\n\n\n***Week***\n---\n---\n\n\n*%U*\nWeek number of the given year, starting with the first Sunday as the first week\n*13* (for the 13th full week of the year)\n\n\n*%V*\nISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week\n*01* through *53* (where 53 accounts for an overlapping week)\n\n\n*%W*\nA numeric representation of the week of the year, starting with the first Monday as the first week\n*46* (for the 46th week of the year beginning with a Monday)\n\n\n***Month***\n---\n---\n\n\n*%b*\nAbbreviated month name, based on the locale\n*Jan* through *Dec*\n\n\n*%B*\nFull month name, based on the locale\n*January* through *December*\n\n\n*%h*\nAbbreviated month name, based on the locale (an alias of %b)\n*Jan* through *Dec*\n\n\n*%m*\nTwo digit representation of the month\n*01* (for January) through *12* (for December)\n\n\n***Year***\n---\n---\n\n\n*%C*\nTwo digit representation of the century (year divided by 100, truncated to an integer)\n*19* for the 20th Century\n\n\n*%g*\nTwo digit representation of the year going by ISO-8601:1988 standards (see %V)\nExample: *09* for the week of January 6, 2009\n\n\n*%G*\nThe full four-digit version of %g\nExample: *2008* for the week of January 3, 2009\n\n\n*%y*\nTwo digit representation of the year\nExample: *09* for 2009, *79* for 1979\n\n\n*%Y*\nFour digit representation for the year\nExample: *2038*\n\n\n***Time***\n---\n---\n\n\n*%H*\nTwo digit representation of the hour in 24-hour format\n*00* through *23*\n\n\n*%I*\nTwo digit representation of the hour in 12-hour format\n*01* through *12*\n\n\n*%l* (lower-case&nbsp;'L')\nHour in 12-hour format, with a space preceeding single digits\n*1* through *12*\n\n\n*%M*\nTwo digit representation of the minute\n*00* through *59*\n\n\n*%p*\nUPPER-CASE 'AM' or 'PM' based on the given time\nExample: *AM* for 00:31, *PM* for 22:23\n\n\n*%P*\nlower-case 'am' or 'pm' based on the given time\nExample: *am* for 00:31, *pm* for 22:23\n\n\n*%r*\nSame as \"%I:%M:%S %p\"\nExample: *09:34:17 PM* for 21:34:17\n\n\n*%R*\nSame as \"%H:%M\"\nExample: *00:35* for 12:35 AM, *16:44* for 4:44 PM\n\n\n*%S*\nTwo digit representation of the second\n*00* through *59*\n\n\n*%T*\nSame as \"%H:%M:%S\"\nExample: *21:34:17* for 09:34:17 PM\n\n\n*%X*\nPreferred time representation based on locale, without the date\nExample: *03:59:16* or *15:59:16*\n\n\n*%z*\nEither the time zone offset from UTC or the abbreviation (depends on operating system)\nExample: *-0500* or *EST* for Eastern Time\n\n\n*%Z*\nThe time zone offset/abbreviation option NOT given by %z (depends on operating system)\nExample: *-0500* or *EST* for Eastern Time\n\n\n***Time&nbsp;and&nbsp;Date&nbsp;Stamps***\n---\n---\n\n\n*%c*\nPreferred date and time stamp based on local\nExample: *Tue Feb 5 00:45:10 2009* for February 4, 2009 at 12:45:10 AM\n\n\n*%D*\nSame as \"%m/%d/%y\"\nExample: *02/05/09* for February 5, 2009\n\n\n*%F*\nSame as \"%Y-%m-%d\" (commonly used in database datestamps)\nExample: *2009-02-05* for February 5, 2009\n\n\n*%s*\nUnix Epoch Time timestamp\nExample: *305815200* for September 10, 1979 08:40:00 AM\n\n\n*%x*\nPreferred date representation based on locale, without the time\nExample: *02/05/09* for February 5, 2009\n\n\n***Miscellaneous***\n---\n---\n\n\n*%n*\nA newline character (\"\\n\")\n---\n\n\n*%t*\nA Tab character (\"\\t\")\n---\n\n\n*%%*\nA literal percentage character (\"%\")\n---\n\n\n\n  \n\n\n\n### gmt\n\n\nBy setting this parameter to '1', you can get the GMT equivalent of the date provided.\n\n\n### locale\n\n\nIf you use the locale-aware format characters mentioned above, this parameter can be set to the locale desired for formatting the provided date.\n\n\n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='french' />\n\n ``` \n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='italian' />\n\n ``` \nThis feature depends entirely on the indicated locale being available at your web server. If the locale is not available, the default 'english' locale is used.\n\n\n### charset\n\n\nSome locales do not provide their output in UTF8 character set. This causes strange ?? characters to appear in the output.  \n\nThe **date** tag can help converting the output to UTF8 if you can provide it with information about the charset used by the locale.\n\n\nFor example -\n\n\n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='greek' charset='ISO-8859-7' />\n\n ``` \n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='russian' charset='ISO-8859-5' />\n\n ``` \nThe following is a rough list of the charset used by different languages -\n\n\n**ISO-8859-1 - Latin 1**  \n\nWestern Europe and Americas: Afrikaans, Basque, Catalan, Danish, Dutch, English, Faeroese, Finnish, French, Galician, German, Icelandic, Irish, Italian, Norwegian, Portuguese, Spanish and Swedish.\n\n\n**ISO-8859-2 - Latin 2**  \n\nLatin-written Slavic and Central European languages: Czech, German, Hungarian, Polish, Romanian, Croatian, Slovak, Slovene.\n\n\n**ISO-8859-3 - Latin 3**  \n\nEsperanto, Galician, Maltese, and Turkish.\n\n\n**ISO-8859-4 - Latin 4**  \n\nScandinavia/Baltic (mostly covered by 8859-1 also): Estonian, Latvian, and Lithuanian. It is an incomplete predecessor of Latin 6.\n\n\n**ISO-8859-5 - Cyrillic**  \n\nBulgarian, Byelorussian, Macedonian, Russian, Serbian and Ukrainian.\n\n\n**ISO-8859-6 - Arabic**  \n\nNon-accented Arabic.\n\n\n**ISO-8859-7 - Modern Greek**  \n\nGreek.\n\n\n**ISO-8859-8 - Hebrew**  \n\nNon-accented Hebrew.\n\n\n**ISO-8859-9 - Latin 5**  \n\nSame as 8859-1 except for Turkish instead of Icelandic\n\n\n**ISO-8859-10 - Latin 6**  \n\nLatin6, for Lappish/Nordic/Eskimo languages: Adds the last Inuit (Greenlandic) and Sami (Lappish) letters that were missing in Latin 4 to cover the entire Nordic area.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [number_format](number_format.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "date",
                    "description": "The date to be formated.  \n This parameter is expected to be in '*Y-m-d H:i:s*' format (e.g. 2010-05-30 21:35:54). All date related variables set by Couch tags, e.g. *k_page_date* etc., are in this format.\n\n",
                    "values": [
                        {
                            "name": "Y-m-d H:i:s"
                        }
                    ]
                },
                {
                    "name": "format",
                    "description": "The **date** tag supports two different types of format characters - locale-aware and non locale-aware.  \n With locale-aware characters, you can specify that the date is to formatted according to, for example, *french* locale or *italian* locale by setting the *locale* parameter.  \n The locale-aware characters all have a % sign prefixed to them.\n\nThe locale-aware and the non locale-aware characters cannot be intermixed.\n\n#### Non Locale-aware format characters\n\n  \n\n\n   Format character Description Example returned values     ***Day*** --- ---   *d* Day of the month, 2 digits with leading zeros *01* to *31*   *D* A textual representation of a day, three letters *Mon* through *Sun*   *j* Day of the month without leading zeros *1* to *31*   *l* (lowercase 'L') A full textual representation of the day of the week *Sunday* through *Saturday*   *S* English ordinal suffix for the day of the month, 2 characters *st*, *nd*, *rd* or *th*. Works well with *j*   *w* Numeric representation of the day of the week *0* (for Sunday) through *6* (for Saturday)   *z* The day of the year (starting from 0) *0* through *365*   ***Week*** --- ---   *W* ISO-8601 week number of year, weeks starting on Monday Example: *42* (the 42nd week in the year)   ***Month*** --- ---   *F* A full textual representation of a month, such as January or March *January* through *December*   *m* Numeric representation of a month, with leading zeros *01* through *12*   *M* A short textual representation of a month, three letters *Jan* through *Dec*   *n* Numeric representation of a month, without leading zeros *1* through *12*   *t* Number of days in the given month *28* through *31*   ***Year*** --- ---   *L* Whether it's a leap year *1* if it is a leap year, *0* otherwise.   *Y* A full numeric representation of a year, 4 digits Examples: *1999* or *2003*   *y* A two digit representation of a year Examples: *99* or *03*   ***Time*** --- ---   *a* Lowercase Ante meridiem and Post meridiem *am* or *pm*   *A* Uppercase Ante meridiem and Post meridiem *AM* or *PM*   *B* Swatch Internet time *000* through *999*   *g* 12-hour format of an hour without leading zeros *1* through *12*   *G* 24-hour format of an hour without leading zeros *0* through *23*   *h* 12-hour format of an hour with leading zeros *01* through *12*   *H* 24-hour format of an hour with leading zeros *00* through *23*   *i* Minutes with leading zeros *00* to *59*   *s* Seconds, with leading zeros *00* through *59*   ***Timezone*** --- ---   *I* (capital 'i') Whether or not the date is in daylight saving time *1* if Daylight Saving Time, *0* otherwise.   *O* Difference to Greenwich time (GMT) in hours Example: *+0200*   *T* Timezone abbreviation Examples: *EST*, *MDT*\u2026   *Z* Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. *-43200* through *50400*   ***Full Date/Time*** --- ---   *r* [\u00BB RFC 2822](http://www.faqs.org/rfcs/rfc2822) formatted date Example: *Thu, 21 Dec 2000 16:01:07 +0200*   *U* Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)     \n\n\n#### Locale-aware format characters\n\n  \n\n\n   Format Character Description Example returned values     ***Day*** --- ---   *%a* An abbreviated textual representation of the day *Sun* through *Sat*   *%A* A full textual representation of the day *Sunday* through *Saturday*   *%d* Two-digit day of the month (with leading zeros) *01* to *31*   *%e* Day of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information. *1* to *31*   *%j* Day of the year, 3 digits with leading zeros *001* to *366*   *%u* ISO-8601 numeric representation of the day of the week *1* (for Monday) though *7* (for Sunday)   *%w* Numeric representation of the day of the week *0* (for Sunday) through *6* (for Saturday)   ***Week*** --- ---   *%U* Week number of the given year, starting with the first Sunday as the first week *13* (for the 13th full week of the year)   *%V* ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week *01* through *53* (where 53 accounts for an overlapping week)   *%W* A numeric representation of the week of the year, starting with the first Monday as the first week *46* (for the 46th week of the year beginning with a Monday)   ***Month*** --- ---   *%b* Abbreviated month name, based on the locale *Jan* through *Dec*   *%B* Full month name, based on the locale *January* through *December*   *%h* Abbreviated month name, based on the locale (an alias of %b) *Jan* through *Dec*   *%m* Two digit representation of the month *01* (for January) through *12* (for December)   ***Year*** --- ---   *%C* Two digit representation of the century (year divided by 100, truncated to an integer) *19* for the 20th Century   *%g* Two digit representation of the year going by ISO-8601:1988 standards (see %V) Example: *09* for the week of January 6, 2009   *%G* The full four-digit version of %g Example: *2008* for the week of January 3, 2009   *%y* Two digit representation of the year Example: *09* for 2009, *79* for 1979   *%Y* Four digit representation for the year Example: *2038*   ***Time*** --- ---   *%H* Two digit representation of the hour in 24-hour format *00* through *23*   *%I* Two digit representation of the hour in 12-hour format *01* through *12*   *%l* (lower-case 'L') Hour in 12-hour format, with a space preceeding single digits *1* through *12*   *%M* Two digit representation of the minute *00* through *59*   *%p* UPPER-CASE 'AM' or 'PM' based on the given time Example: *AM* for 00:31, *PM* for 22:23   *%P* lower-case 'am' or 'pm' based on the given time Example: *am* for 00:31, *pm* for 22:23   *%r* Same as \"%I:%M:%S %p\" Example: *09:34:17 PM* for 21:34:17   *%R* Same as \"%H:%M\" Example: *00:35* for 12:35 AM, *16:44* for 4:44 PM   *%S* Two digit representation of the second *00* through *59*   *%T* Same as \"%H:%M:%S\" Example: *21:34:17* for 09:34:17 PM   *%X* Preferred time representation based on locale, without the date Example: *03:59:16* or *15:59:16*   *%z* Either the time zone offset from UTC or the abbreviation (depends on operating system) Example: *-0500* or *EST* for Eastern Time   *%Z* The time zone offset/abbreviation option NOT given by %z (depends on operating system) Example: *-0500* or *EST* for Eastern Time   ***Time and Date Stamps*** --- ---   *%c* Preferred date and time stamp based on local Example: *Tue Feb 5 00:45:10 2009* for February 4, 2009 at 12:45:10 AM   *%D* Same as \"%m/%d/%y\" Example: *02/05/09* for February 5, 2009   *%F* Same as \"%Y-%m-%d\" (commonly used in database datestamps) Example: *2009-02-05* for February 5, 2009   *%s* Unix Epoch Time timestamp Example: *305815200* for September 10, 1979 08:40:00 AM   *%x* Preferred date representation based on locale, without the time Example: *02/05/09* for February 5, 2009   ***Miscellaneous*** --- ---   *%n* A newline character (\"\n\") ---   *%t* A Tab character (\"\t\") ---   *%%* A literal percentage character (\"%\") ---     \n\n\n",
                    "values": [
                        {
                            "name": "Non Locale-aware",
                            "description": "Format character \t Description \t Example returned values\r\n        Day \t--- \t---\r\n          d \tDay of the month, 2 digits with leading zeros \t01 to 31\r\n          D \tA textual representation of a day, three letters \tMon through Sun\r\n          j \tDay of the month without leading zeros \t1 to 31\r\n          l (lowercase 'L') \tA full textual representation of the day of the week \tSunday through Saturday\r\n          S \tEnglish ordinal suffix for the day of the month, 2 characters \tst, nd, rd or th. Works well with j\r\n          w \tNumeric representation of the day of the week \t0 (for Sunday) through 6 (for Saturday)\r\n          z \tThe day of the year (starting from 0) \t0 through 365\r\n        Week \t--- \t---\r\n          W \tISO-8601 week number of year, weeks starting on Monday \tExample: 42 (the 42nd week in the year)\r\n        Month \t--- \t---\r\n          F \tA full textual representation of a month, such as January or March \tJanuary through December\r\n          m \tNumeric representation of a month, with leading zeros \t01 through 12\r\n          M \tA short textual representation of a month, three letters \tJan through Dec\r\n          n \tNumeric representation of a month, without leading zeros \t1 through 12\r\n          t \tNumber of days in the given month \t28 through 31\r\n        Year \t--- \t---\r\n          L \tWhether it's a leap year \t1 if it is a leap year, 0 otherwise.\r\n          Y \tA full numeric representation of a year, 4 digits \tExamples: 1999 or 2003\r\n          y \tA two digit representation of a year \tExamples: 99 or 03\r\n        Time \t--- \t---\r\n          a \tLowercase Ante meridiem and Post meridiem \tam or pm\r\n          A \tUppercase Ante meridiem and Post meridiem \tAM or PM\r\n          B \tSwatch Internet time \t000 through 999\r\n          g \t12-hour format of an hour without leading zeros \t1 through 12\r\n          G \t24-hour format of an hour without leading zeros \t0 through 23\r\n          h \t12-hour format of an hour with leading zeros \t01 through 12\r\n          H \t24-hour format of an hour with leading zeros \t00 through 23\r\n          i \tMinutes with leading zeros \t00 to 59\r\n          s \tSeconds, with leading zeros \t00 through 59\r\n        Timezone \t--- \t---\r\n          I (capital 'i') \tWhether or not the date is in daylight saving time \t1 if Daylight Saving Time, 0 otherwise.\r\n          O \tDifference to Greenwich time (GMT) in hours \tExample: +0200\r\n          T \tTimezone abbreviation \tExamples: EST, MDT…\r\n          Z \tTimezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. \t-43200 through 50400\r\n        Full Date/Time \t--- \t---\r\n          r \t» RFC 2822 formatted date \tExample: Thu, 21 Dec 2000 16:01:07 +0200\r\n          U \tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\r\n"
                        },
                        {
                            "name": "Locale-aware",
                            "description": "Format Character \tDescription \tExample returned values\r\n        Day \t--- \t---\r\n          %a \tAn abbreviated textual representation of the day \tSun through Sat\r\n          %A \tA full textual representation of the day \tSunday through Saturday\r\n          %d \tTwo-digit day of the month (with leading zeros) \t01 to 31\r\n          %e \tDay of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information. \t1 to 31\r\n          %j \tDay of the year, 3 digits with leading zeros \t001 to 366\r\n          %u \tISO-8601 numeric representation of the day of the week \t1 (for Monday) though 7 (for Sunday)\r\n          %w \tNumeric representation of the day of the week \t0 (for Sunday) through 6 (for Saturday)\r\n        Week \t--- \t---\r\n          %U \tWeek number of the given year, starting with the first Sunday as the first week \t13 (for the 13th full week of the year)\r\n          %V \tISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week \t01 through 53 (where 53 accounts for an overlapping week)\r\n          %W \tA numeric representation of the week of the year, starting with the first Monday as the first week \t46 (for the 46th week of the year beginning with a Monday)\r\n        Month \t--- \t---\r\n          %b \tAbbreviated month name, based on the locale \tJan through Dec\r\n          %B \tFull month name, based on the locale \tJanuary through December\r\n          %h \tAbbreviated month name, based on the locale (an alias of %b) \tJan through Dec\r\n          %m \tTwo digit representation of the month \t01 (for January) through 12 (for December)\r\n        Year \t--- \t---\r\n          %C \tTwo digit representation of the century (year divided by 100, truncated to an integer) \t19 for the 20th Century\r\n          %g \tTwo digit representation of the year going by ISO-8601:1988 standards (see %V) \tExample: 09 for the week of January 6, 2009\r\n          %G \tThe full four-digit version of %g \tExample: 2008 for the week of January 3, 2009\r\n          %y \tTwo digit representation of the year \tExample: 09 for 2009, 79 for 1979\r\n          %Y \tFour digit representation for the year \tExample: 2038\r\n        Time \t--- \t---\r\n          %H \tTwo digit representation of the hour in 24-hour format \t00 through 23\r\n          %I \tTwo digit representation of the hour in 12-hour format \t01 through 12\r\n          %l (lower-case 'L') \tHour in 12-hour format, with a space preceeding single digits \t1 through 12\r\n          %M \tTwo digit representation of the minute \t00 through 59\r\n          %p \tUPPER-CASE 'AM' or 'PM' based on the given time \tExample: AM for 00:31, PM for 22:23\r\n          %P \tlower-case 'am' or 'pm' based on the given time \tExample: am for 00:31, pm for 22:23\r\n          %r \tSame as \"%I:%M:%S %p\" \tExample: 09:34:17 PM for 21:34:17\r\n          %R \tSame as \"%H:%M\" \tExample: 00:35 for 12:35 AM, 16:44 for 4:44 PM\r\n          %S \tTwo digit representation of the second \t00 through 59\r\n          %T \tSame as \"%H:%M:%S\" \tExample: 21:34:17 for 09:34:17 PM\r\n          %X \tPreferred time representation based on locale, without the date \tExample: 03:59:16 or 15:59:16\r\n          %z \tEither the time zone offset from UTC or the abbreviation (depends on operating system) \tExample: -0500 or EST for Eastern Time\r\n          %Z \tThe time zone offset/abbreviation option NOT given by %z (depends on operating system) \tExample: -0500 or EST for Eastern Time\r\n        Time and Date Stamps \t--- \t---\r\n          %c \tPreferred date and time stamp based on local \tExample: Tue Feb 5 00:45:10 2009 for February 4, 2009 at 12:45:10 AM\r\n          %D \tSame as \"%m/%d/%y\" \tExample: 02/05/09 for February 5, 2009\r\n          %F \tSame as \"%Y-%m-%d\" (commonly used in database datestamps) \tExample: 2009-02-05 for February 5, 2009\r\n          %s \tUnix Epoch Time timestamp \tExample: 305815200 for September 10, 1979 08:40:00 AM\r\n          %x \tPreferred date representation based on locale, without the time \tExample: 02/05/09 for February 5, 2009\r\n        Miscellaneous \t--- \t---\r\n          %n \tA newline character (\"\\n\") \t---\r\n          %t \tA Tab character (\"\\t\") \t---\r\n          %% \tA literal percentage character (\"%\") \t---\r\n"
                        }
                    ]
                },
                {
                    "name": "gmt",
                    "description": "By setting this parameter to '1', you can get the GMT equivalent of the date provided.\n\n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                },
                {
                    "name": "locale",
                    "description": "If you use the locale-aware format characters mentioned above, this parameter can be set to the locale desired for formatting the provided date.\n\n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='french' /> \n ``` \n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='italian' /> \n ``` \nThis feature depends entirely on the indicated locale being available at your web server. If the locale is not available, the default 'english' locale is used.\n\n"
                },
                {
                    "name": "charset",
                    "description": "Some locales do not provide their output in UTF8 character set. This causes strange ?? characters to appear in the output.  \n The **date** tag can help converting the output to UTF8 if you can provide it with information about the charset used by the locale.\n\nFor example -\n\n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='greek' charset='ISO-8859-7' /> \n ``` \n\n ```html \n<cms:date k_page_date format='%B %d, %Y' locale='russian' charset='ISO-8859-5' /> \n ``` \nThe following is a rough list of the charset used by different languages -\n\n**ISO-8859-1 - Latin 1**  \n Western Europe and Americas: Afrikaans, Basque, Catalan, Danish, Dutch, English, Faeroese, Finnish, French, Galician, German, Icelandic, Irish, Italian, Norwegian, Portuguese, Spanish and Swedish.\n\n**ISO-8859-2 - Latin 2**  \n Latin-written Slavic and Central European languages: Czech, German, Hungarian, Polish, Romanian, Croatian, Slovak, Slovene.\n\n**ISO-8859-3 - Latin 3**  \n Esperanto, Galician, Maltese, and Turkish.\n\n**ISO-8859-4 - Latin 4**  \n Scandinavia/Baltic (mostly covered by 8859-1 also): Estonian, Latvian, and Lithuanian. It is an incomplete predecessor of Latin 6.\n\n**ISO-8859-5 - Cyrillic**  \n Bulgarian, Byelorussian, Macedonian, Russian, Serbian and Ukrainian.\n\n**ISO-8859-6 - Arabic**  \n Non-accented Arabic.\n\n**ISO-8859-7 - Modern Greek**  \n Greek.\n\n**ISO-8859-8 - Hebrew**  \n Non-accented Hebrew.\n\n**ISO-8859-9 - Latin 5**  \n Same as 8859-1 except for Turkish instead of Icelandic\n\n**ISO-8859-10 - Latin 6**  \n Latin6, for Lappish/Nordic/Eskimo languages: Adds the last Inuit (Greenlandic) and Sami (Lappish) letters that were missing in Latin 4 to cover the entire Nordic area.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [number_format](number_format.html)\n \n",
                    "values": [
                        {
                            "name": "ISO-8859-1",
                            "description": "- Latin 1\r\n        Western Europe and Americas: Afrikaans, Basque, Catalan, Danish, Dutch, English, Faeroese, Finnish, French, Galician, German, Icelandic, Irish, Italian, Norwegian, Portuguese, Spanish and Swedish.\r\n"
                        },
                        {
                            "name": "ISO-8859-2",
                            "description": " Latin 2\r\n        Latin-written Slavic and Central European languages: Czech, German, Hungarian, Polish, Romanian, Croatian, Slovak, Slovene."
                        },
                        {
                            "name": "ISO-8859-3",
                            "description": " Latin 3\r\n        Esperanto, Galician, Maltese, and Turkish."
                        },
                        {
                            "name": "ISO-8859-4",
                            "description": " Latin 4\r\n        Scandinavia/Baltic (mostly covered by 8859-1 also): Estonian, Latvian, and Lithuanian. It is an incomplete predecessor of Latin 6."
                        },
                        {
                            "name": "ISO-8859-5",
                            "description": "Cyrillic\r\n        Bulgarian, Byelorussian, Macedonian, Russian, Serbian and Ukrainian."
                        },
                        {
                            "name": "ISO-8859-6",
                            "description": "Arabic\r\n        Non-accented Arabic."
                        },
                        {
                            "name": "ISO-8859-7",
                            "description": "Modern Greek\r\n        Greek."
                        },
                        {
                            "name": "ISO-8859-8",
                            "description": "Hebrew\r\n        Non-accented Hebrew."
                        },
                        {
                            "name": "ISO-8859-9",
                            "description": "Latin 5\r\n        Same as 8859-1 except for Turkish instead of Icelandic"
                        },
                        {
                            "name": "ISO-8859-10",
                            "description": "Latin 6\r\n        Latin6, for Lappish/Nordic/Eskimo languages: Adds the last Inuit (Greenlandic) and Sami (Lappish) letters that were missing in Latin 4 to cover the entire Nordic area."
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:days",
            "description": "```html \n <cms:days ><td ><cms:show k_day /></td></cms:days> \n```\n====\n\n\nThe **days** tag works only within the **weeks** tag and enumerates all the seven days of each week.\n\n\nPlease see [**Core Concepts - Events Calendar**](../concepts/events-calendar.html) for a working example of this tag.\n\n\nParameters\n----------\n\n\n\n\n* pad_with_zeroes\n\n\n\n### pad_with_zeroes\n\n\nIf set to '1' will pad all single digit days in variable *k_day* with a leading zero.\n\n\nVariables\n---------\n\n\n\n\n* k_date\n\n* k_day\n\n* k_month\n\n* k_year\n\n* k_day_of_week\n\n* k_position\n\n* k_count_entries\n\n* k_timeline_position\n\n\n\n### k_date\n\n\nDate of the day. e.g. 2010-10-31\n\n\n### k_day\n\n\nNumber representing the day - ranges from 1 to 31\n\n\n### k_month\n\n\nNumber representing the month - ranges from 1 - 12\n\n\n### k_year\n\n\nThe year. e.g. 2010\n\n\n### k_day_of_week\n\n\nNumber representing the week - ranges from 0 (Sun) to 6 (Sat)\n\n\n### k_position\n\n\nA calendar grid can contain days that belong to the month being shown as well as the previous and the next month. Depending on which month a day belongs to, its position is denoted by this parameter as one of these three values -\n\n\n\n\n* previous_month\n\n* current_month\n\n* next_month\n\n\n\n### k_count_entries\n\n\nThe count of pages published on this day.\n\n\n### k_timeline_position\n\n\nDenotes the position of the day in timelime (relative to today). Can be one of these three values -\n\n\n\n\n* past\n\n* present\n\n* future\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [calendar](calendar.html)\n\n* [weeks](weeks.html)\n\n* [entries](entries.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "pad_with_zeroes",
                    "description": "If set to '1' will pad all single digit days in variable *k_day* with a leading zero.\n\nVariables\n---------\n\n\n * k_date\n * k_day\n * k_month\n * k_year\n * k_day_of_week\n * k_position\n * k_count_entries\n * k_timeline_position\n \n",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:decr",
            "description": "```html \n <cms:decr my_value '2' /> \n ```\n====\n\n\nThe **decr** tag accepts as its first parameter a variable and decreases the value contained within the variable by the value contained within the second optional parameter. If the second parameter is not provided, a value of 1 is assumed.\n\n\n\n ```html \n<cms:set my_value='11' />\n<cms:show my_value />\n\n ``` \nIn the snippet above, value of variable my_value is output as 11.\n\n\n\n ```html \n<cms:decr my_value '2' />\n<cms:show my_value />\n\n ``` \nThe value of variable my_value now becomes 9.\n\n\n\n ```html \n<cms:decr my_value />\n<cms:show my_value />\n\n ``` \nThe value of variable my_value now becomes 8.\n\n\nParameters\n----------\n\n\nExpects a maximum of two parameters.\n\n\nThe first parameter has to be a variable. The second parameter is optional and its value is used to decrease the value of the variable passed as the first parameter. A default value of 1 is assumed if the second parameter is not specified.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [add](add.html)\n\n* [sub](sub.html)\n\n* [mul](mul.html)\n\n* [div](div.html)\n\n* [mod](mod.html)\n\n* [incr](incr.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "decr-value1",
                    "description": "The parameters may be literal strings, variables or output of other tags.",
                    "values": [
                        {
                            "name": "var"
                        },
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "decr-value2",
                    "description": "The parameters may be literal strings, variables or output of other tags.",
                    "values": [
                        {
                            "name": "var"
                        },
                        {
                            "name": "int"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:delete_cookie",
            "description": "```html \n <cms:delete_cookie 'my_test_cookie' /> \n ```\n==============\n\n\nThe **delete_cookie** tag can be used to delete any cookie created using the **set_cookie** tag.\n\n\n\n ```html \n<cms:delete_cookie 'my_test_cookie' />\n\n ``` \nThe snippet above will delete the cookie named 'my_test_cookie'.\n\n\nParameters\n----------\n\n\nThis tag accepts no parameters.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [set_cookie](set_cookie.html)\n\n* [get_cookie](get_cookie.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "cookieName"
                }
            ]
        },
        {
            "name": "cms:div",
            "description": "```html \n <cms:div my_count '5' /> \n ```\n===\n\n\nThe **div** tag accepts two parameters and returns as its output the value obtained after dividing the first parameter by the second parameter.  \n\nThe parameters may be literal strings, variables or output of other tags.\n\n\n\n ```html \n<cms:div my_count '5' />\n\n ``` \nThe snippet divides by 5 whatever value is contained within *my_count* variable and outputs the resulting value.\n\n\nParameters\n----------\n\n\nThe tag expects two parameters as the operands for division.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [add](add.html)\n\n* [sub](sub.html)\n\n* [mul](mul.html)\n\n* [mod](mod.html)\n\n* [incr](incr.html)\n\n* [decr](decr.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "div-value1",
                    "description": "The parameters may be literal strings, variables or output of other tags.",
                    "values": [
                        {
                            "name": "var"
                        },
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "div-value2",
                    "description": "The parameters may be literal strings, variables or output of other tags.",
                    "values": [
                        {
                            "name": "var"
                        },
                        {
                            "name": "int"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:dropdownfolders",
            "description": "```html \n <cms:dropdownfolders masterpage='news.php' /> \n ```\n===============\n\n\nThe **dropdownfolders** tag can be used to create a quick-n-dirty HTML dropdown list of the folders belonging to a template.\n\n\n\n ```html \n<cms:dropdownfolders masterpage='news.php' />\n\n ``` \nParameters\n----------\n\n\nSupports the same parameter as the **folders** tag. In addition, takes one more parameter - *show_count*.\n\n\n\n\n* masterpage\n\n* root\n\n* childof\n\n* hierarchical\n\n* depth\n\n* orderby\n\n* order\n\n* exclude\n\n* extended_info\n\n* show_count\n\n\n\nPlease see the [**folders**](folders.html) documentation for an explanation of these parameters.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [folder](folder.html)\n\n* [folders](folders.html)\n\n* [listfolders](listfolders.html)\n\n* [parentfolders](parentfolders.html)\n\n* [is_ancestor](is_ancestor.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter can be used to specify the template the folders of which are to be enumerated. If skipped, the template this tag is being used from is used.",
                    "values": [
                        {
                            "name": "k_template_name"
                        }
                    ]
                },
                {
                    "name": "root",
                    "description": "Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. The folder specified as the root is returned along with all its children.",
                    "values": [
                        {
                            "name": "folder"
                        }
                    ]
                },
                {
                    "name": "childof",
                    "description": "Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. Only the children of the specified folder are returned.",
                    "values": [
                        {
                            "name": "folder"
                        }
                    ]
                },
                {
                    "name": "hierarchical",
                    "description": "By setting this parameter the folders tag can be made to enumerate the folders in their hierarchical order. If skipped, the folders are enumerated in the alphabetical order of their names.",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                },
                {
                    "name": "depth",
                    "description": "This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be reached during enumeration. This can be used, for example, to list only the top folders in the tree by setting the depth to 1. A depth of 0 means unlimited depth.",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        },
                        {
                            "name": "int"
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "This parameter can be set to order the enumerated folders according to the following- name, title, id, count or weight. If skipped, name is used as default.",
                    "values": [
                        {
                            "name": "name"
                        },
                        {
                            "name": "title"
                        },
                        {
                            "name": "id"
                        },
                        {
                            "name": "count"
                        },
                        {
                            "name": "weight"
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Can be set to specify whether the enumerated folders are ordered in the ascending order or in descending order. Valid values are asc and desc. Default is asc.",
                    "values": [
                        {
                            "name": "asc"
                        },
                        {
                            "name": "desc"
                        }
                    ]
                },
                {
                    "name": "exclude",
                    "description": " Folders can be excluded from being enumerated by specifying them with this parameter. If an excluded folder has children, they are excluded too. If multiple folders are to be excluded, separate them with comma.",
                    "values": [
                        {
                            "name": "folderName"
                        }
                    ]
                },
                {
                    "name": "show_count",
                    "description": "Show count of pages within folder.",
                    "values": [
                        {
                            "name": "0"
                        },
                        {
                            "name": "1"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:dump",
            "description": "```html \n <cms:dump /> \n ```\n====\n\n\nThe **dump** tag is used to output all variables (system or otherwise) that are present in the immediate context of the location it is invoked from.\n\n\nAs an example, the following snippet is using the **pages** tag nested within the **folders** tag to create a list of all folders and a list of pages that are present within each folder -\n\n\n\n ```html \n<cms:folders masterpage='news.php' hierarchical='1'>\n <H3><cms:show k_folder_title /></H3>\n <cms:if k_folder_pagecount >\n <UL>\n <cms:pages masterpage=\"news.php\" folder=k_folder_name include_subfolders='0'>\n <LI><a href=\"<cms:show k_page_link />\"><cms:show k_page_title /></a></LI>\n </cms:pages>\n </UL>\n </cms:if>\n</cms:folders>\n\n ``` \nIf we place three dump tags at the following locations -\n\n\n\n ```html \n<cms:dump />\n<cms:folders masterpage='news.php' hierarchical='1'>\n <H3><cms:show k_folder_title /></H3>\n <cms:dump />\n <cms:if k_folder_pagecount >\n <UL>\n <cms:pages masterpage=\"news.php\" folder=k_folder_name include_subfolders='0'>\n <cms:dump />\n <LI><a href=\"<cms:show k_page_link />\"><cms:show k_page_title /></a></LI>\n </cms:pages>\n </UL>\n </cms:if>\n</cms:folders>\n\n ``` \n- the first **dump** tag will output global variables (said to be in the *root context*) set for the executing page by Couch, the second **dump** tag will output variables set for each iteration by the **folders** tag while the third tag will output variables that are set by the **pages** tag.\n\n\nCompare this with the **dump_all** tag that will output variables belonging to all the contexts that are a part of the hierarchy leading to the current location. Thus for the same example using **dump_all**. instead of **dump**, the first tag would have output global variables belonging to the root context, the second tag would have output variables of the root context followed by the variables set for the current iteration by the **folders** tag and finally the third tag would have output the global variables, the variables set by folders followed by the variables set for the iteration by the **pages** tag.\n\n\nSince, unless specified otherwise, when we use a variable anywhere (e.g. with **show** tag), Couch looks up through the tags hierarchy starting from the tag within the context of which the variable was used, **dump_all** is a very useful tag to visually confirm if the variable is actually set and available anywhere in the hierarachy.\n\n\nThe **dump** tag is very useful to quickly see which variables (along with their current values) are set by a particular tag.\n\n\nParameters\n----------\n\n\nTakes no parameters\n\n\nVariables\n---------\n\n\nIs a self-closing tag and sets no variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [dump_all](dump_all.html)\n\n\n\n'"
        },
        {
            "name": "cms:dump_all",
            "description": "```html \n <cms:dump_all /> \n ```\n=========\n\n\nPlease see [**dump**](dump.html) tag for a discussion of this tag.\n\n\nParameters\n----------\n\n\nTakes no parameters.\n\n\nVariables\n---------\n\n\nIs a self-closing tag and sets no variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [dump](dump.html)\n\n\n\n'"
        },
        {
            "name": "cms:each",
            "description": "```html \n <cms:each msg sep='|' ><cms:show item /><br></cms:each> \n ```\n====\n\n\nThe **Each** tag, given a string containing values separated by a known separator, splits it up along the separator and returns each value.  \n\nFor example, assume we have a variable 'msg' -\n\n\n\n ```html \n<cms:set msg='hello|world|how|do|you|do' />\n\n ``` \nPassing variable 'msg' as parameter to **each** like this -\n\n\n\n ```html \n<cms:each msg sep='|' >\n <cms:show item /><br>\n</cms:each>\n\n ``` \nwill make available each of the '|' separated words as variable named 'item' (which is then being displayed using **show** tag).\n\n\n\n ```html \nhello\nworld\nhow\ndo\nyou\ndo\n\n ``` \nThe above example could have been written without specifying 'sep', because the default separator is '|'.\n\n\nOne real world scenario for using **each** is while handling submission of forms containing multiple checkboxes. If more than one checkbox is selected, the checkbox variable contains a '|' separated string with values for each selected checkbox.\n\n\nParameters\n----------\n\n\n\n\n* var\n\n* as\n\n* sep\n\n\n\n### var\n\n\nThe string to split. If passed as the first parameter, the name 'var' can be omitted and only the value passed. e.g.\n\n\n\n ```html \n<cms:each var=msg >..</cms:each>\n\n ``` \n\n ```html \n<cms:each msg >..</cms:each>\n\n ``` \nboth of the above are same.\n\n\n### as\n\n\nName of the variable as which each of the values obtained after splitting the string will be made available.  \n\nBy default, the variable is named 'item'.  \n\nIf you wish to use some other name, it can be specified thus -\n\n\n\n ```html \n<cms:each msg as='my_var' >\n <cms:show my_var/><br>\n</cms:each>\n\n ``` \n### sep\n\n\nThe separator along which the provided string is split.  \n\nBy default, the pipe character '|' is assumed as the separator.  \n\nIf any other character is being used in the string, it can be specified this way -\n\n\n\n ```html \n<cms:each msg sep='@' >..</cms:each>\n\n ``` \nVariables\n---------\n\n\n\n\n* item\n\n\n\n### item\n\n\nThis is the default variable that contains the value obtained.  \n\nIf any other variable is specified using the **as** parameter, as explained in parameters, then this variable will not be set.  \n\nThe specified variable will be set instead.\n\n\nRelated Tags\n------------\n\n\n\n\n* [repeat](repeat.html)\n\n* [zebra](zebra.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "var",
                    "description": "The string to split. If passed as the first parameter, the name 'var' can be omitted and only the value passed. e.g.\n\n\n ```html \n<cms:each var=msg >..</cms:each> \n ``` \n\n ```html \n<cms:each msg >..</cms:each> \n ``` \nboth of the above are same.\n\n",
                    "values": [
                        {
                            "name": "string"
                        }
                    ]
                },
                {
                    "name": "as",
                    "description": "Name of the variable as which each of the values obtained after splitting the string will be made available.  \n By default, the variable is named 'item'.  \n If you wish to use some other name, it can be specified thus -\n\n\n ```html \n<cms:each msg as='my_var' > <cms:show my_var/><br> </cms:each> \n ``` \n",
                    "values": [
                        {
                            "name": "var"
                        }
                    ]
                },
                {
                    "name": "sep",
                    "description": "The separator along which the provided string is split.  \n By default, the pipe character '|' is assumed as the separator.  \n If any other character is being used in the string, it can be specified this way -\n\n\n ```html \n<cms:each msg sep='@' >..</cms:each> \n ``` \nVariables\n---------\n\n\n * item\n \n",
                    "values": [
                        {
                            "name": "|"
                        },
                        {
                            "name": "char"
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:else",
            "description": "b'else\n====\n\n\nThe **Else** tag always occurs within an **If** tag block.  \n\nOften you'd want to execute a certain set of statements when a given condition is met and a different set when the condition is not met.  \n\n**Else** provides this capability by extending the **If** tag. It does so by delimiting statements that will be executed when the condition given to the **if** does not evaluate to true.  \n\nFor example -\n\n\n\n ```html \n<cms:if my_var == 'hello' >\n <h3> Hello </h3>\n<cms:else />\n <h3> Don't know what it is </h3>\n</cms:if>\n\n ``` \nIn the snippet above, if variable 'my_var' contains 'hello', all the statements within the **if** tag block upto the **else** tag will be executed. In case 'my_var' contains any other value, all the statements within the **if** tag block starting from the **else** tag upto the end tag of **if**, will be executed. (In our example there are only single statements for both conditions but there can be any number of them).\n\n\nNotice that the **else** tag is a self closing tag.\n\n\nIn cases where there are more than two outcomes of the condition, the **else** block can be made to contain another nested **if** block -  \n\nFor example, here is a snippet that shows the stage of life by evaluating the variable 'age'.\n\n\n\n ```html \n<cms:if age lt '1' >\n <h3>Infant</h3>\n<cms:else />\n <cms:if (age ge '1') && (age lt '3') >\n <h3>Toddler</h3>\n <cms:else />\n <cms:if (age ge '3') && (age lt '5') >\n <h3>Preschooler</h3>\n <cms:else />\n <cms:if (age ge '5') && (age lt '11') >\n <h3>School Age</h3>\n <cms:else />\n <cms:if (age ge '11') && (age lt '13') >\n <h3>Preteen or Tween</h3>\n <cms:else />\n <cms:if (age ge '13') && (age lt '20') >\n <h3>Teen</h3>\n <cms:else />\n <h3>Adult</h3>\n </cms:if>\n </cms:if>\n </cms:if>\n </cms:if>\n </cms:if>\n</cms:if>\n\n ``` \nParameters\n----------\n\n\nThis tag does not take any parameter.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [if](if.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:embed",
            "description": "b'embed\n=====\n\n\nThe **Embed** tag can be used to divide your templates into manageable chunks.  \n\nParts of the templates that are reused at several places can be placed in discrete files and the files then embedded via this tag.  \n\ne.g. most of the templates share the same header code. This can be cut and pasted into a file named 'header.inc' (the extension does not matter - it can be anything) and the file then saved into 'couch/snippets' folder.\n\n\nThe following code then can be placed where the original code was -\n\n\n\n ```html \n<cms:embed 'header.inc' />\n\n ``` \nThis will result in exactly the same output as with the original code in place.  \n\nThe advantage of using embedding is that if the code snippet is used in several templates, any future modifications will now need to be done only in a single file.\n\n\n\n**Embed** tag, when looking for the embedded file, searches along a path relative to the 'couch/snippets' folder. Thus in the example above, the 'header.inc' file should reside directly in 'snippets' folder for Couch to find it. Had the passed parameter been 'common/header.inc', Couch would have looked for the file within a sub-folder named 'common' within 'couch/snippets'. Similarly if the parameter passed was '../../common/header.inc', Couch would have gone up in the folder hierarchy twice (first time landing in the 'couch' folder and next time in the folder where your website resides) and then looked for the embedded file within a subfolder named 'common'.  \n\n  \n\n**UPDATE:** From version 1.1.1, the base path relative to which Couch searches for embedded files can be changed from the default 'couch/snippets' folder to any folder **relatve to your main site**. This can be done by setting the *12b. K_SNIPPETS_DIR* configuration item within your *config.php* file.  \n\n This is convenient when you choose to use a subfolder within your main site to store embedded snippets instead of storing them within 'couch/snippets' folder. For example if *K_SNIPPETS_DIR* is set to 'common', <cms:embed 'header.inc' /> will now cause Couch to look for 'header.inc' within the 'common' subfolder that resides in the root folder of your website.  \n\n  \n\n**IMP.** If you choose to place your snippets in any folder other than the default 'couch/snippets' folder or any of its subfolders, do take care to prevent the snippets from being directly downloadable. 'couch/snippets' folder is protected from this problem by a .htaccess file present within it. You can copy this file into your folder to disallow everybody from directly accessing your snippets.\n\n\n\n**IMP.** If the code snippet you choose to place in a separate embeddable file contains Couch tags (i.e. those that begin with *<cms:*), take care not to truncate any tag block. That is, always make sure that every opening tag also has the associated end tag included within the embedded snippet. Embedding partial tags will cause the parser to emit parse errors.\n\n\nTo illustrate the concept of embedding we use an ultra-trivial example here. In real life scenarios, the embedded snippets may be of any complexity. Suppose we have this piece of code somewhere in a template\n\n\n\n ```html \n<div class=\"right\">\n <b class=\"title\"><cms:show 'Hello World' /></b>\n</div>\n\n ``` \nThis does nothing except display 'Hello world'. We now cut and paste the bold part into a file named, say, 'greeting.inc' and save the file into 'couch/snippets' folder. The above code is modified thus -\n\n\n\n ```html \n<div class=\"right\">\n <cms:embed 'greeting.inc' />\n</div>\n\n ``` \nand upon executing the page we get the same output as before.\n\n\nEmbedded snippets can themselves contain other embedded snippets. Thus to stretch our, already contrived, example a little further, open the 'greeting.inc' file, remove the 'Hello world' part and save it into a separate file named 'message.inc'. Embed the new file within 'greeting.inc' thus -\n\n\n\n ```html \n<b class=\"title\"><cms:show \"<cms:embed 'message.inc' />\" /></b>\n\n ``` \nNotice the use of double quotes. Executing the template results in the same output as having the entire string right there within the template instead of embedding it in two separate files (original template embeds 'greeting.inc' which in turn embeds 'message.inc').\n\n\n**WARNING:** Make sure that none of the children embedded files embeds back a parent file. This will lead to recursion and an infinite loop.\n\n\n### Passing code directly\n\n\nInstead of using a physical file, **Embed** tag can be passed code directly to include (see parameters section below).  \n\nFor example, in the template code mentioned above, we can use\n\n\n\n ```html \n<div class=\"right\">\n <cms:set my_var=\"<b class='title'><cms:show 'Hello world' /></b>\" />\n <cms:embed code=my_var />\n</div>\n\n ``` \nPer se, this does not seem to be of much use, but this ability of **embed** tag to execute code contained within a variable can be a very powerful thing if that variable happens to be a custom field (i.e. an editable area defined by you within a template).  \n\nClearly we can now store snippets or even complete templates as editable regions that can be tweaked within the browser itself instead of manipulating a physical file and FTP'ing it back to the server.\n\n\nMake sure that the type of the editable region is *textarea* and that its *no_xss_check* parameter is set to '1' (this will prevent Couch from mangling up the < and > tags the way it usually does to stop XSS attacks).\n\n\nParameters\n----------\n\n\n\n\n* unnamed or code\n\n\n\nIf the first parameter is unnamed (i.e. only the value is passed) or it is anything other than 'code', it is considered to be a path to an embedded file. The path is always relative to the 'couch/snippets' folder. e.g.\n\n\n\n ```html \n<cms:embed 'message.inc' />\n\n ``` \nHowever if the parameter is named 'code', the value is considered to be a valid code snippet and is executed thus.  \n\nFor example -\n\n\n\n ```html \n<cms:embed code=\"<b class='title'><cms:show 'Hello world' /></b>\" />\n\n ``` \nor\n\n\n\n ```html \n<cms:set my_var=\"<b class='title'><cms:show 'Hello world' /></b>\" />\n<cms:embed code=my_var />\n\n ``` \nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:entries",
            "description": "b'entries\n=======\n\n\nThe **entries** tag is a special tag that works only within the **calendar** tag - specifically within the **days** tag present within the **calendar** tag.\n\n\nThis tag enumerates all the pages published on the day being enumerated by the **days** tag. The pages will belong to the template specified by the *masterpage* parameter of the calendar tag.\n\n\nPlease see [**Core Concepts - Events Calendar**](../concepts/events-calendar.html) for a working example of this tag in action.\n\n\nParameters\n----------\n\n\n\n\n* limit\n\n* skip_custom_fields\n\n\n\n### limit\n\n\nThis parameter limits the number of pages that this tag enumerates.\n\n\n### skip_custom_fields\n\n\nAs it enumerates the fetched pages, by default this tag makes available all the variables associated with every page - this includes the editable regions too.  \n\nIf you simply require to display the names and links of the pages, the values contained within the editable regions of the pages can be skipped from being fetched by setting this parameter. This will result in a performance boost.\n\n\nVariables\n---------\n\n\nAs this tag iterates through the pages, at each iteration it sets all the variables that one normally finds set when that page is accessed in a *page-view* (see [**Variables available in Views**](../concepts/variables-in-views.html)).\n\n\nRelated Tags\n------------\n\n\n\n\n* [calendar](calendar.html)\n\n* [weeks](weeks.html)\n\n* [days](days.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "limit",
                    "description": "This parameter limits the number of pages that this tag enumerates.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "skip_custom_fields",
                    "description": "As it enumerates the fetched pages, by default this tag makes available all the variables associated with every page - this includes the editable regions too.  \n If you simply require to display the names and links of the pages, the values contained within the editable regions of the pages can be skipped from being fetched by setting this parameter. This will result in a performance boost.\n\nVariables\n---------\n\nAs this tag iterates through the pages, at each iteration it sets all the variables that one normally finds set when that page is accessed in a *page-view* (see [**Variables available in Views**](../concepts/variables-in-views.html)).\n\nRelated Tags\n------------\n\n\n * [calendar](calendar.html)\n * [weeks](weeks.html)\n * [days](days.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:excerpt",
            "description": "b'excerpt\n=======\n\n\nThe **excerpt** tag can be used to create an excerpt of any content that is enclosed within its opening and closing tags.  \n\nUnlike the **excerptHTML** tag, the **excerpt** tag strips off all HTML tags (except those specified by its *allow* parameter) from the excerpt it creates.\n\n\nParameters\n----------\n\n\n\n\n* count\n\n* allow\n\n* trail\n\n* truncate_chars\n\n\n\n### count\n\n\nThe maximum number of words/characters that the excerpt can contain. The default value is 50.  \n\nBy default, this parameter is applied to the number of words in the excerpt.  \n\nBy setting the 'truncate_chars' parameter (see below) to '1', it can be made to apply to the number of characters in the excerpt instead.\n\n\n### allow\n\n\nThe HTML elements you wish to preserve in the excerpt.  \n\nIf you wish to preserve multiple tags, separate the tagnames by using comma e.g.\n\n\n\n ```html \nallow='i, b'\n\n ``` \n### trail\n\n\nBy default the produced excerpt is appended with '...' (three ellipses). You can change this by using this parameter.\n\n\n### truncate_chars\n\n\nBy default, the 'count' paramater is considered to be the number of words the excerpt can contain.  \n\nBy setting the 'truncate_chars' to '1', the 'count' becomes the number of characters the excerpt can contain.\n\n\n\n ```html \n<cms:excerpt count='100' truncate_chars='1'>...blah blah...</cms:excerpt>\n\n ``` \nPlease note that if 'truncate_chars' is set to '1', the 'allow' parameter is ignored and all the HTML tags are stripped off the input.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [excerptHTML](excerpthtml.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "count",
                    "description": "The maximum number of words/characters that the excerpt can contain. The default value is 50.  \n By default, this parameter is applied to the number of words in the excerpt.  \n By setting the 'truncate_chars' parameter (see below) to '1', it can be made to apply to the number of characters in the excerpt instead.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "allow",
                    "description": "The HTML elements you wish to preserve in the excerpt.  \n If you wish to preserve multiple tags, separate the tagnames by using comma e.g.\n\n\n ```html \nallow='i, b' \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "trail",
                    "description": "By default the produced excerpt is appended with '...' (three ellipses). You can change this by using this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "truncate_chars",
                    "description": "By default, the 'count' paramater is considered to be the number of words the excerpt can contain.  \n By setting the 'truncate_chars' to '1', the 'count' becomes the number of characters the excerpt can contain.\n\n\n ```html \n<cms:excerpt count='100' truncate_chars='1'>...blah blah...</cms:excerpt> \n ``` \nPlease note that if 'truncate_chars' is set to '1', the 'allow' parameter is ignored and all the HTML tags are stripped off the input.\n\nVariables\n---------\n\nThis tag does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [excerptHTML](excerpthtml.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:excerptHTML",
            "description": "b'excerptHTML\n===========\n\n\nThe **excerptHTML** tag can be used to create an excerpt of any HTML content that is enclosed within its opening and closing tags.  \n\nUnlike the **excerpt** tag, excerptHTML preserves the HTML formatting of the truncated contents (except for the HTML tags specified in its *ignore* parameter).\n\n\nExamples -\n\n\n\n ```html \n<cms:excerptHTML><cms:show content /></cms:excerptHTML>\n\n ``` \n\n ```html \n<cms:excerptHTML count='130' ignore='img'>\n <cms:show content />\n</cms:excerptHTML>\n\n ``` \nThe snippets are outputting an excerpt of the value contained within the *content* variable.\n\n\nParameters\n----------\n\n\n\n\n* count\n\n* ignore\n\n* trail\n\n\n\n### count\n\n\nThe maximum number of words that the excerpt can contain. The default value is 50 words.\n\n\n### ignore\n\n\nThe HTML elements to weed out of the excerpt. For example, you might not want to have any images in the excerpt.  \n\nIf you wish to ignore multiple tags, separate the tagnames by using comma e.g.\n\n\n\n ```html \nignore='img, table'\n\n ``` \n### trail\n\n\nBy default the produced excerpt is appended with '...' (three ellipses). You can change this by using this parameter.\n\n\n\n ```html \n<cms:excerptHTML trail=\"&nbsp;(<a href=\"<cms:show k_page_link />\">read more..</a>)\"><cms:show blog_content /></cms:excerptHTML>\n\n ``` \nThe snippet above will append a '*read more..*' link leading to the page-view of the item being shown in excerpted form.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [excerpt](excerpt.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "count",
                    "description": "The maximum number of words that the excerpt can contain. The default value is 50 words.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "ignore",
                    "description": "The HTML elements to weed out of the excerpt. For example, you might not want to have any images in the excerpt.  \n If you wish to ignore multiple tags, separate the tagnames by using comma e.g.\n\n\n ```html \nignore='img, table' \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "trail",
                    "description": "By default the produced excerpt is appended with '...' (three ellipses). You can change this by using this parameter.\n\n\n ```html \n<cms:excerptHTML trail=\"&nbsp;(<a href=\"<cms:show k_page_link />\">read more..</a>)\"><cms:show blog_content /></cms:excerptHTML> \n ``` \nThe snippet above will append a '*read more..*' link leading to the page-view of the item being shown in excerpted form.\n\nVariables\n---------\n\nThis tag does not set any variables of its own.",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:exists",
            "description": "b'exists\n======\n\n\nThe **Exists** tag can be used to confirm the presence of a file or a folder on the server.  \n\nIt returns '1' if the object file/folder exists. Otherwise it returns a '0'.  \n\nFor example -\n\n\n\n ```html \n<cms:exists \"contact.inc\" />\n\n ``` \nwill output either '1' or '0' depending on whether the file 'contact.inc' is present or not within the 'couch/snippets' folder.\n\n\n\n Exactly like the [**embed**](embed.html) tag, the **exists** tag considers the file/folder provided to be relative to the 'couch/snippets' folder.  \n\n For example  \n\n  \n\n\n ```html \n<cms:exists \"common/contact.inc\" />\n ``` \n\n will look for 'contact.inc' file within a folder named 'common' that resides within the 'couch/snippets' folder. Whereas  \n\n  \n\n\n ```html \n<cms:exists \"../../common/contact.inc\" />\n ``` \n\n will move up through the folder hierarchy (the first '../' will move into the 'couch' folder while the next '../' will move into the website folder within which 'couch' folder resides) and search for the file within a folder named 'common' residing in the main website folder.\n\n\n\nCombined with the [**If**](if.html) tag and [**Embed**](embed.html) tag, the **Exists** tag provides a very powerful method of choosing the right template to display while showing a particular page.  \n\nFor example, let us say we have a template 'index.php' that is clonable and several pages have been made out of it - e.g. 'about-us', 'services', 'contact-us' etc.. The template has defined one editable richtext area named 'my_content' and, as usual, every page has its own data in this area. The code within this template to display the data for each cloned page might go somewhat like this\n\n\n\n ```html \n<cms:if k_is_page >\n <cms:show my_content />\n</cms:if>\n\n ``` \nThis is perfect for all pages but for 'contact-us', we do not want to display 'my_content'. We wish to display a form (created by using [**Form**](form.html) tag). One way to do this would be to make 'contact-us' a separate template in itself. However a better method would be to check in the code snippet above whether the page being displayed is 'contact-us' or not and if it is, instead of displaying the usual 'my_content', display the form instead.  \n\nLet us say we have saved the code for the form in a snippet called 'contact-us.inc' within 'couch/snippets' folder. The modified code will be -\n\n\n\n ```html \n<cms:if k_is_page >\n <cms:if k_page_name=='contact-us' >\n <cms:embed 'contact-us.inc' />\n <cms:else />\n <cms:show my_content />\n </cms:if>\n</cms:if>\n\n ``` \nThis will do the trick.  \n\nHowever, suppose there is one other page, 'testimonials', where we wish to use the [**Pages**](pages.html) tag to iterate through and display excerpts from pages created through some other template (or any other logic). Once again, instead of creating a separate template, we decide to check for 'testimonials' page and execute some different code. We'll assume that the code for this page has been saved in a snippet named 'testimonials.inc' within snippets folder.  \n\nThe code above can be modified to fit in the new condition -\n\n\n\n ```html \n<cms:if k_is_page >\n <cms:if k_page_name=='contact-us' >\n <cms:embed 'contact-us.inc' />\n <cms:else />\n <cms:if k_page_name=='testimonials' >\n <cms:embed 'testimonials.inc' />\n <cms:else />\n <cms:show my_content />\n </cms:if>\n </cms:if>\n</cms:if>\n\n ``` \nThis works but it is now becoming painfully evident that this technique is crumbling under its own weight and the addition of few more pages will make it too complex to handle.\n\n\nEmploying **Exists** tag for the above task makes it a snap. Here is how -\n\n\n\n ```html \n<cms:if k_is_page >\n <cms:if \"<cms:exists \"<cms:show k_page_name/>.inc\" />\" >\n <cms:embed \"<cms:show k_page_name/>.inc\" />\n <cms:else />\n <cms:show my_content />\n </cms:if>\n</cms:if>\n\n ``` \nNotice how we are checking for the existence of a snippet that is named the same as the page being displayed (but with a '.inc' appended).  \n\nIf such a file exists, it gets embedded, else the usual logic is folllowed.  \n\nThe beauty of this method is that if you decide to add more pages that will require custom logic, you simply have to place the code in a snippet named the same as the page (and a '.inc' extension) and put the snippet in the 'couch/snippets' folder.  \n\nYou'll never need to modify the code given above.\n\n\nParameters\n----------\n\n\n\n\n* unnamed\n\n\n\nTakes one unnamed parameter (only the value is required).  \n\nIt is considered to be a path to a file or folder. The path is always relative to the 'couch/snippets' folder.  \n\nSee above for a discussion on relative path.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\n",
            "attributes": []
        },
        {
            "name": "cms:fieldset",
            "description": "b'fieldset\n========\n\n\nPlease see [**Core Concepts - Forms - Using Fieldset**](../concepts/forms.html#using-fieldset) for a complete discussion of this tag.\n\n\nParameters\n----------\n\n\n\n\n* label\n\n\n\n### label\n\n\nThe label to be applied to the fieldset.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables.\n\n\nRelated Tags\n------------\n\n\n\n\n* [form](form.html)\n\n* [input](input.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "label",
                    "description": "The label to be applied to the fieldset.\n\nVariables\n---------\n\nThis tag does not set any variables.\n\nRelated Tags\n------------\n\n\n * [form](form.html)\n * [input](input.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:folder",
            "description": "b'folder\n======\n\n\nThe **folder** tag is used to create virtual folders for a template. The **folder** tags support nesting within each other thus allowing the creation of an hierarchy of virtual folders.\n\n\nPlease see [**Core Concepts - Folders**](../concepts/using-folders.html) for a detailed explanation of this tag.\n\n\nParameters\n----------\n\n\n\n\n* name\n\n* title\n\n* desc\n\n* weight\n\n\n\n### name\n\n\nThe mandatory name of the folder. Has to be unique for the template.  \n\nOnly lowercase[a-z], numerals[0-9] hyphen and underscore permitted\n\n\n### title\n\n\nThe more user friendly displayable title. Can be duplicate unlike name.\n\n\n### desc\n\n\nDescription.\n\n\n### weight\n\n\nA folder can be given a number as its weight. This parameter then can be used to list the folders in any desired order while enumerating them using Couch **folders** tag. The bigger the number (the heavier the weight), the lower down a folder appears in the sort order. Default weight is 0. You can specify a negative number to make a folder appear higher up.\n\n\nVariables\n---------\n\n\nThis tag sets no parameters of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [folders](folders.html)\n\n* [listfolders](listfolders.html)\n\n* [dropdownfolders](dropdownfolders.html)\n\n* [parentfolders](parentfolders.html)\n\n* [is_ancestor](is_ancestor.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "The mandatory name of the folder. Has to be unique for the template.  \n Only lowercase[a-z], numerals[0-9] hyphen and underscore permitted\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "title",
                    "description": "The more user friendly displayable title. Can be duplicate unlike name.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "desc",
                    "description": "Description.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "weight",
                    "description": "A folder can be given a number as its weight. This parameter then can be used to list the folders in any desired order while enumerating them using Couch **folders** tag. The bigger the number (the heavier the weight), the lower down a folder appears in the sort order. Default weight is 0. You can specify a negative number to make a folder appear higher up.\n\nVariables\n---------\n\nThis tag sets no parameters of its own.\n\nRelated Tags\n------------\n\n\n * [folders](folders.html)\n * [listfolders](listfolders.html)\n * [dropdownfolders](dropdownfolders.html)\n * [parentfolders](parentfolders.html)\n * [is_ancestor](is_ancestor.html)\n * [breadcrumbs](breadcrumbs.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:folders",
            "description": "b'folders\n=======\n\n\nThe **folders** tag can be used to enumerate the virtual folders that have been defined for a template.\n\n\nPlease see [**Core Concepts - Folders**](../concepts/using-folders.html) for an in-depth discussion of this tag.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* root\n\n* childof\n\n* hierarchical\n\n* depth\n\n* orderby\n\n* order\n\n* exclude\n\n* extended_info\n\n\n\n### masterpage\n\n\nThis parameter can be used to specify the template the folders of which are to be enumerated. If skipped, the template this tag is being used from is used.\n\n\n### root\n\n\nOnly a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. The folder specified as the root is returned along with all its children.\n\n\n### childof\n\n\nOnly a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. Only the children of the specified folder are returned.\n\n\n### hierarchical\n\n\nBy setting this parameter the **folders** tag can be made to enumerate the folders in their hierarchical order. If skipped, the folders are enumerated in the alphabetical order of their names.\n\n\n### depth\n\n\nThis parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be reached during enumeration. This can be used, for example, to list only the top folders in the tree by setting the depth to 1. A depth of 0 means unlimited depth.\n\n\n### orderby\n\n\nThis parameter can be set to order the enumerated folders according to the following- *name*, *title*, *id*, *count* or *weight*. If skipped, *name* is used as default.\n\n\n### order\n\n\nCan be set to specify whether the enumerated folders are ordered in the ascending order or in descending order. Valid values are *asc* and *desc*. Default is *asc*.\n\n\n### exclude\n\n\nFolders can be excluded from being enumerated by specifying them with this parameter. If an excluded folder has children, they are excluded too.  \n\nIf multiple folders are to be excluded, separate them with comma.\n\n\n### extended_info\n\n\nIf this parameter is set, additional variables get set to report the changes in hierarchy encountered by the **folders** tag, as it traverses through the folder tree. Please see the **Variables** section below.\n\n\nVariables\n---------\n\n\nThe following variables are set to provide information about each folder that gets enumerated\n\n\n\n\n* k_folder_id\n\n* k_folder_name\n\n* k_folder_title\n\n* k_folder_desc\n\n* k_folder_link\n\n* k_folder_pagecount\n\n* k_folder_totalpagecount\n\n* k_level\n\n\n\nIf the *hierarchical* parameter is set to '1', the following variables also get set to indicate the current position in the hierarchy as this tag enumerates the folders -\n\n\n\n\n* k_level_start\n\n* k_element_start\n\n* k_element_end\n\n* k_level_end\n\n\n\nYou can use these variables to easily create HTML ordered or unordered lists. Please see **Folders** in **Core Concepts**.\n\n\nRelated Tags\n------------\n\n\n\n\n* [folder](folder.html)\n\n* [listfolders](listfolders.html)\n\n* [dropdownfolders](dropdownfolders.html)\n\n* [parentfolders](parentfolders.html)\n\n* [is_ancestor](is_ancestor.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n* [pages](pages.html)\n\n* [archives](archives.html)\n\n* [templates](templates.html)\n\n* [comments](comments.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter can be used to specify the template the folders of which are to be enumerated. If skipped, the template this tag is being used from is used.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "root",
                    "description": "Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. The folder specified as the root is returned along with all its children.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "childof",
                    "description": "Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. Only the children of the specified folder are returned.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "hierarchical",
                    "description": "By setting this parameter the **folders** tag can be made to enumerate the folders in their hierarchical order. If skipped, the folders are enumerated in the alphabetical order of their names.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "depth",
                    "description": "This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be reached during enumeration. This can be used, for example, to list only the top folders in the tree by setting the depth to 1. A depth of 0 means unlimited depth.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "This parameter can be set to order the enumerated folders according to the following- *name*, *title*, *id*, *count* or *weight*. If skipped, *name* is used as default.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Can be set to specify whether the enumerated folders are ordered in the ascending order or in descending order. Valid values are *asc* and *desc*. Default is *asc*.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "exclude",
                    "description": "Folders can be excluded from being enumerated by specifying them with this parameter. If an excluded folder has children, they are excluded too.  \n If multiple folders are to be excluded, separate them with comma.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "extended_info",
                    "description": "If this parameter is set, additional variables get set to report the changes in hierarchy encountered by the **folders** tag, as it traverses through the folder tree. Please see the **Variables** section below.\n\nVariables\n---------\n\nThe following variables are set to provide information about each folder that gets enumerated\n\n\n * k_folder_id\n * k_folder_name\n * k_folder_title\n * k_folder_desc\n * k_folder_link\n * k_folder_pagecount\n * k_folder_totalpagecount\n * k_level\n \nIf the *hierarchical* parameter is set to '1', the following variables also get set to indicate the current position in the hierarchy as this tag enumerates the folders -\n\n\n * k_level_start\n * k_element_start\n * k_element_end\n * k_level_end\n \nYou can use these variables to easily create HTML ordered or unordered lists. Please see **Folders** in **Core Concepts**.\n\nRelated Tags\n------------\n\n\n * [folder](folder.html)\n * [listfolders](listfolders.html)\n * [dropdownfolders](dropdownfolders.html)\n * [parentfolders](parentfolders.html)\n * [is_ancestor](is_ancestor.html)\n * [breadcrumbs](breadcrumbs.html)\n * [pages](pages.html)\n * [archives](archives.html)\n * [templates](templates.html)\n * [comments](comments.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:form",
            "description": "b'form\n====\n\n\nPlease see [**Core Concepts - Forms**](../concepts/forms.html) for an in-depth discussion about this tag.\n\n\nParameters\n----------\n\n\nApart from the parameters listed below, any parameters given to this tag will be passed on unchanged to the HTML <form> tag generated by this Couch tag. Thus, for example, if you wish to style inline the form, simply set the style parameter of this tag and the resulting HTML form will be passed on the style.\n\n\n\n\n* name\n\n* method\n\n* action\n\n* separator\n\n* anchor\n\n\n\n### name\n\n\nThe name of the form.\n\n\n### method\n\n\nMethod of form submision. Can be either *get* or *post*. If skipped, *get* is assumed.\n\n\n### action\n\n\nThe script handling the form submission. Normally you do not require to set this parameter because this task is handled by Couch.\n\n\n### separator\n\n\nIf the form fails to validate, the names of each failed fields, along with their error messages, are concatanated using a '|' pipe character to get a single string and this string is placed in a variable named *k_error*. You can change the default pipe separator to any other character by setting this parameter.\n\n\n### anchor\n\n\nTo understand this parameter, suppose a form is created somewhere at the bottom of a web page and requires the user to scroll down the page to reach it. Upon submission of this form, the page is reloaded and in doing so the the form seems to disappear because the refreshed page shows the top region and it will again need scrolling to reach the form. This will cause the user to miss any feedback (error or success messages) that might have been added to the form.  \n\nBy setting the *anchor* parameter to '1', Couch adds an HTML anchor ('#') to the form so that the reloaded page scrolls back to the top of the form, thus mitigating the mentioned problem.\n\n\nVariables\n---------\n\n\n\n\n* k_success\n\n* k_error\n\n\n\n### k_success\n\n\nIf the form successfully validates, the names and values of each fields are concatenated using a '\\n' newline character to get a single string and this string is placed in a this variable.\n\n\n### k_error\n\n\nIf the form fails to validate, the names of each failed fields along with their error messages are concatenated using a '|' pipe character to get a single string and this string is placed in this variable.\n\n\nIn addition to the two above mentioned variables, the values of the fields are also made available individually by setting discrete variables for each field. The names of the variables, however, differ between the success and error conditions.  \n\nSuppose a form has two fields named *name* and *password*. Upon successful validation of both fields, two variables named after the two fields will get set - *frm_name* and *frm_password*. Each will contain the value submitted through them.  \n\nHowever, if any of the fields fail to validate, variables representing only those failed fields will get set. Suppose the password field is the one that fails. In this case a variable named *k_error_password* will get set. This variable will contain the error message set for the validating condition.\n\n\nRelated Tags\n------------\n\n\n\n\n* [input](input.html)\n\n* [fieldset](fieldset.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "The name of the form.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "method",
                    "description": "Method of form submision. Can be either *get* or *post*. If skipped, *get* is assumed.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "action",
                    "description": "The script handling the form submission. Normally you do not require to set this parameter because this task is handled by Couch.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "separator",
                    "description": "If the form fails to validate, the names of each failed fields, along with their error messages, are concatanated using a '|' pipe character to get a single string and this string is placed in a variable named *k_error*. You can change the default pipe separator to any other character by setting this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "anchor",
                    "description": "To understand this parameter, suppose a form is created somewhere at the bottom of a web page and requires the user to scroll down the page to reach it. Upon submission of this form, the page is reloaded and in doing so the the form seems to disappear because the refreshed page shows the top region and it will again need scrolling to reach the form. This will cause the user to miss any feedback (error or success messages) that might have been added to the form.  \n By setting the *anchor* parameter to '1', Couch adds an HTML anchor ('#') to the form so that the reloaded page scrolls back to the top of the form, thus mitigating the mentioned problem.\n\nVariables\n---------\n\n\n * k_success\n * k_error\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:get",
            "description": "b'get\n===\n\n\nThe **get** tag is used to output the value of the variable the name of which is supplied to it as its parameter.  \n\nFor example -\n\n\n\n ```html \n<cms:set my_var='10' />\n<cms:get 'my_var' />\n\n ``` \nIn the snippet given above, 'my_var' is the name of the variable the value of which is output by the **get** tag.  \n\nThe output of the snippet is '10'.\n\n\nCompare the **get** tag with the **show** tag that takes a value (not the name) as its parameter.\n\n\nIn the snippet given above, if we substitute the **get** tag with the **show** tag -\n\n\n\n ```html \n<cms:set my_var='10' />\n<cms:show 'my_var' />\n\n ``` \n- the output would be 'my_var' and not '10'.\n\n\nThe snippet has to be written in the following manner to make it show the value contained within variable *my_var* -\n\n\n\n ```html \n<cms:set my_var='10' />\n<cms:show my_var />\n\n ``` \nNotice how the absence of the quotes in the parameter which signifies that it is a variable. This time the output is '10'.\n\n\nConsider what would happen with the **get** tag if we forgot the quotes around the first parameter -\n\n\n\n ```html \n<cms:set my_var='10' />\n<cms:get my_var />\n\n ``` \nThe **get** tag will try and fetch the value of a variable named '10', which would be non-existent.\n\n\nThe **get** tag is useful in the cases where we have to fetch the values of variables the names of which are generated dynamically.\n\n\nParameters\n----------\n\n\n\n\n* var\n\n* local_only\n\n\n\n### var\n\n\nName of the variable the value of which is to be output.\n\n\n### local_only\n\n\nIf this parameter is set to '1', **get** will search for the variable only in the local scope.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [show](show.html)\n\n* [set](set.html)\n\n* [get_custom_field](get_custom_field.html)\n\n* [pages](pages.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "var",
                    "description": "Name of the variable the value of which is to be output.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "local_only",
                    "description": "If this parameter is set to '1', **get** will search for the variable only in the local scope.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [show](show.html)\n * [set](set.html)\n * [get_custom_field](get_custom_field.html)\n * [pages](pages.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:get_cookie",
            "description": "b'get_cookie\n===========\n\n\nThe **get_cookie** tag can be used to fetch value contained within any cookie set by the **set_cookie** tag.\n\n\n\n ```html \n<cms:get_cookie 'my_test_cookie' />\n\n ``` \nThe snippet above will retrieve the value set within the cookie named 'my_test_cookie'\n\n\nParameters\n----------\n\n\n\n\n* name\n\n\n\n### name\n\n\nThe name of the cookie the value of which is to be retrieved.\n\n\nVariables\n---------\n\n\nThis is a self closing tag and sets no variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [set_cookie](set_cookie.html)\n\n* [delete_cookie](delete_cookie.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "The name of the cookie the value of which is to be retrieved.\n\nVariables\n---------\n\nThis is a self closing tag and sets no variables of its own.\n\nRelated Tags\n------------\n\n\n * [set_cookie](set_cookie.html)\n * [delete_cookie](delete_cookie.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:get_custom_field",
            "description": "b'get_custom_field\n==================\n\n\nThe **get_custom_field** tag can be used to fetch the value contained within any editable region defined within any template.\n\n\nIt is an alternative method to using the **pages** tag and is well suited for fetching values from single fields (as opposed to the **pages** tag that fetches values of all the editable regions in a page).\n\n\n\n ```html \n<cms:get_custom_field 'site_name' masterpage='globals.php' />\n\n ``` \nParameters\n----------\n\n\n\n\n* var\n\n* masterpage\n\n* page\n\n\n\n### var\n\n\nThe name of the editable region the value of which is to be fetched.\n\n\n### masterpage\n\n\nThe name of the template that defines the editable region. This parameter is mandatory.\n\n\n### page\n\n\nThe name of the page that contains the editable region.  \n\nFor non-clonable pages this parameter can be skipped.\n\n\n\n ```html \n<cms:get_custom_field var='content' masterpage='blog.php' page='my_test_page' />\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [show](show.html)\n\n* [get](get.html)\n\n* [set](set.html)\n\n* [pages](pages.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "var",
                    "description": "The name of the editable region the value of which is to be fetched.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "masterpage",
                    "description": "The name of the template that defines the editable region. This parameter is mandatory.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "page",
                    "description": "The name of the page that contains the editable region.  \n For non-clonable pages this parameter can be skipped.\n\n\n ```html \n<cms:get_custom_field var='content' masterpage='blog.php' page='my_test_page' /> \n ``` \nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [show](show.html)\n * [get](get.html)\n * [set](set.html)\n * [pages](pages.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:google_map",
            "description": "b'google_map\n===========\n\n\nThe **google_map** tag can be used to easily create a Google map on a web page.\n\n\n\n ```html \n<cms:google_map\n name='my_map'\n address='1600 Amphitheatre Parkway, Mountain View, CA'\n/>\n\n ``` \n\n ```html \n<cms:google_map\n name='my_map'\n latitude='37.423021'\n longitude='-122.083739'\n/>\n\n ``` \nPlease see [**Core Concepts - Google Maps**](../concepts/google-maps.html) for a discussion on this tag.\n\n\nParameters\n----------\n\n\nIn addition to the parameters listed below, any arbitrary parameter given to this tag will be passed on unchanged to the DIV that holds the generated map.\n\n\n\n\n* name\n\n* id\n\n* address\n\n* longitude\n\n* latitude\n\n* zoom\n\n* message\n\n* width\n\n* height\n\n* style\n\n\n\n### name\n\n\nName of the map. This parameter is mandatory.\n\n\n### id\n\n\nIf skipped, is set to the *name*.\n\n\n### address\n\n\nA map can be generated by providing either an *address* of both *longitude* and *latitude*.\n\n\n### longitude\n\n\n### latitude\n\n\nCoordinates used to create the map.\n\n\n### zoom\n\n\nDefault is 14\n\n\n### message\n\n\nText shown in the marker baloon.\n\n\n### width\n\n\nWidth of the map in pixels. Default value is 400.\n\n\n### height\n\n\nHeight of the map in pixels. Default value is 300.\n\n\n### style\n\n\nRegular CSS styles.\n\n\nA full example -\n\n\n\n ```html \n<cms:google_map\n name='my_office'\n latitude='37.423021'\n longitude='-122.083739'\n zoom='14'\n message='We are located here'\n width='640'\n height='480'\n style='margin-bottom:10px;'\n/>\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "Name of the map. This parameter is mandatory.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "id",
                    "description": "If skipped, is set to the *name*.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "address",
                    "description": "A map can be generated by providing either an *address* of both *longitude* and *latitude*.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "longitude",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "latitude",
                    "description": "Coordinates used to create the map.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "zoom",
                    "description": "Default is 14\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "message",
                    "description": "Text shown in the marker baloon.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "width",
                    "description": "Width of the map in pixels. Default value is 400.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "height",
                    "description": "Height of the map in pixels. Default value is 300.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "style",
                    "description": "Regular CSS styles.\n\nA full example -\n\n\n ```html \n<cms:google_map name='my_office' latitude='37.423021' longitude='-122.083739' zoom='14' message='We are located here' width='640' height='480' style='margin-bottom:10px;' /> \n ``` \nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:gpc",
            "description": "b'gpc\n===\n\n\nThe **gpc** tag stands for **G**ET-**P**OST-**C**OOKIES and can be used to fetch values from variables contained in these.\n\n\n\n ```html \n<cms:gpc 'my_parameter' />\n\n ``` \n\n ```html \n<cms:gpc 'my_parameter' method='post' />\n\n ``` \nIf the method parameter is not specified, this tag will look into all the three sources.\n\n\n**M.IMP:** Never, never use variables from GET, POST or COOKIES by using raw PHP code. The **gpc** tag sanitizes all variables and helps in preventing XSS attacks, something that your code will be susceptible of if you choose to do it manually and do not sanitize the values.\n\n\nParameters\n----------\n\n\n\n\n* var\n\n* method\n\n\n\n### var\n\n\nName of the variable to fetch the value of.\n\n\n### method\n\n\nThis can be one of the following - *get*, *post*, *cookie*.  \n\nIf this parameter is not specified, all the three are searched.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "var",
                    "description": "Name of the variable to fetch the value of.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "method",
                    "description": "This can be one of the following - *get*, *post*, *cookie*.  \n If this parameter is not specified, all the three are searched.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:gravatar",
            "description": "b'gravatar\n========\n\n\nGiven an email address, the **gravatar** tag outputs an HTML <img> tag (or link only). The source of this image is set to the Gravatar image registered for this email at *gravatar.com*. If the email is not registered, the default image is output.\n\n\n\n ```html \n<cms:gravatar email=\"johndoe@gmail.com\" size=\"60\" />\n\n ``` \nParameters\n----------\n\n\n\n\n* email\n\n* size\n\n* default\n\n* link_only\n\n\n\n### email\n\n\nThe email for the Gravatar.\n\n\n### size\n\n\nSpecifies the desired width and height of the Gravatar. Valid values are from 1 to 512 inclusive. If skipped, value of 48 is used.\n\n\n### default\n\n\nIf no Gravatar found for the email, by default the Gravatar of *unknown@gravatar.com* is used. You can specify some other image to be used instead by setting this parameter to the URL of the alternative image.\n\n\n### link_only\n\n\nIf set to '1', output the image link only (i.e. not the <img> tag).\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "email",
                    "description": "The email for the Gravatar.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "Specifies the desired width and height of the Gravatar. Valid values are from 1 to 512 inclusive. If skipped, value of 48 is used.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "default",
                    "description": "If no Gravatar found for the email, by default the Gravatar of *unknown@gravatar.com* is used. You can specify some other image to be used instead by setting this parameter to the URL of the alternative image.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "link_only",
                    "description": "If set to '1', output the image link only (i.e. not the <img> tag).\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:hide",
            "description": "b'hide\n====\n\n\nThe hide tag is a very simple tag that can be used to prevent the output of code enclosed within it from being displayed.\n\n\n\n ```html \n<cms:hide>\n ...Everything here will get executed but the output will never appear on the webpage...\n</cms:hide>\n\n ``` \nThis is useful when you wish to execute some Couch tags but do not wish their outputs to get displayed.  \n\nCompare this with the **ignore** tag where the enclosed contents are not executed at all.\n\n\nParameters\n----------\n\n\nThis tag takes no parameters. All enclosed contents serve as its input.\n\n\nVariables\n---------\n\n\nThis tag sets no variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [ignore](ignore.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:html_encode",
            "description": "b'html_encode\n============\n\n\nCertain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with some of these conversions made.\n\n\nThe translations performed are:\n\n\n\n\n* '&' (ampersand) becomes '&amp;'\n\n* '\"' (double quote) becomes '&quot;'\n\n* ''' (single quote) becomes '&#039;'\n\n* '<' (less than) becomes '&lt;'\n\n* '>' (greater than) becomes '&gt;'\n\n\n\nAs an example, the following snippet has been taken from [**Core Concepts - RSS Feeds**](../concepts/rss-feeds.html), where we are are supplyig the feed with HTML encoded excerpt of our pages -\n\n\n\n ```html \n<cms:html_encode>\n <cms:excerptHTML><cms:show my_news_text /></cms:excerptHTML>\n</cms:html_encode>\n\n ``` \nParameters\n----------\n\n\nThis tag does not accept any parameters. Everything enclosed within its opening and closing tags is considered as its input.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:if",
            "description": "b'if\n==\n\n\nThe **If** tag is one of the most important tags. It can be used to make decisions based on the presence or absence of a certain condition (or conditions) and then execute or ignore statements enclosed within the opening and closing **If** tags.\n\n\n\n ```html \n<cms:if my_var >\n <h3> my_var is present </h3>\n</cms:if>\n\n ``` \nIn the snippet above, the heading will be outputted only if a variable named 'my_var' is present and has a value that is not '0'.\n\n\n**If** evaluates the condition(s) provided as parameter and executes all the statements enclosed within it **only** if the result of the evaluation is **neither '' (i.e. blank or no value) nor '0'**.\n\n\nIn the above snippet we were checking if the variable has any value at all. We can also check if a variable has a certain value or if that value is greater than or smaller than a certain value -\n\n\n### Checking if equal\n\n\n\n ```html \n<cms:if my_var = 'hello' >\n <h3> Hello </h3>\n</cms:if>\n\n ``` \nIn the snippet above we are checking if the variable 'my_var' holds the string 'hello' and output 'Hello' only if it does.\n\n\nAs noted above, **If** goes ahead with executing statements enclosed within it only if the result of evaluating the condition is neither blank nor '0'. During the comparision above, if my_var is indeed equal to 'hello', the result of the evaluation is '1', otherwise the result is '0'.\n\n\nInstead of '=' we can also use 'eq' or '==' -\n\n\n\n ```html \n<cms:if my_var eq 'hello'> <h3>Hello</h3> </cms:if>\n\n ``` \n\n ```html \n<cms:if my_var == 'hello'> <h3>Hello</h3> </cms:if>\n\n ``` \nThe above are the same as using '='.\n\n\n### Checking if not equal\n\n\n\n ```html \n<cms:if my_var != 'hello' >\n <h3> Not Hello </h3>\n</cms:if>\n\n ``` \nIn the snippet above we are checking if the variable 'my_var' does NOT hold the string 'hello' and output 'Not Hello' only if it is true.  \n\nInstead of '!=' we can instead use 'ne' -\n\n\n\n ```html \n<cms:if my_var ne 'hello'> <h3> Not Hello </h3> </cms:if>\n\n ``` \nThe above is the same as using '!='.\n\n\n### Checking if greater than\n\n\n\n ```html \n<cms:if my_var gt '100' >\n <h3> Value greater than 100 </h3>\n</cms:if>\n\n ``` \nIn the snippet above we are checking if the value in variable 'my_var' is greater than 100.\n\n\n### Checking if greater than or equal\n\n\n\n ```html \n<cms:if my_var ge '100' >\n <h3> Value greater than or equal to 100 </h3>\n</cms:if>\n\n ``` \nIn the snippet above we are checking if the value in variable 'my_var' is greater than or equal to 100.\n\n\n### Checking if lesser than\n\n\n\n ```html \n<cms:if my_var lt '100' >\n <h3> Value lesser than 100 </h3>\n</cms:if>\n\n ``` \nIn the snippet above we are checking if the value in variable 'my_var' is lesser than 100.\n\n\n### Checking if lesser than or equal\n\n\n\n ```html \n<cms:if my_var le '100' >\n <h3> Value lesser than or equal to 100 </h3>\n</cms:if>\n\n ``` \nIn the snippet above we are checking if the value in variable 'my_var' is lesser than or equal to 100.\n\n\n### Combining multiple conditions using && (AND), || (OR)\n\n\n### && (AND)\n\n\nIf multiple conditions are combined by using '&&', the **If** statement will execute only if **ALL** the conditions are true.\n\n\n\n ```html \n<cms:if (age gt '18') && (age lt '40')> .. </cms:if>\n\n ``` \nThe above will be true only if variable 'age' is greater than 18 and is lesser than 40. Thus if 'age' is 25, the above **If** statement will execute but if 'age' is 50, it will not because the second condition is false.\n\n\n### || (OR)\n\n\nIf multiple conditions are combined by using '||', the **If** statement will execute even if **any one** of the conditions is true.\n\n\n\n ```html \n<cms:if (age gt '18') || (age lt '40')> .. </cms:if>\n\n ``` \nThe above will be true if variable 'age' is greater than 18 or is lesser than 40. Thus if 'age' is 25, the above **If** statement will execute (both conditions true) but if 'age' is 50, it will still execute because the first condition is true. In fact the above statement will always execute. A better illustration would be\n\n\n\n ```html \n<cms:if (age lt '18') || (age gt '40')> .. </cms:if>\n\n ``` \nhere an age of 13 will cause the **If** to execute and so will an age of 50 but an age of 25 will not do so. As another example -\n\n\n\n ```html \n<cms:if (age gt '18') || (sex == 'M')> .. </cms:if>\n\n ``` \nThe statement above will execute if either age of the person is more than 18 or if his sex is male regardless of his age (I know, this is sexist).\n\n\n### Using && and || together\n\n\nBoth && as well as || can be used together in the same **if** tag\n\n\n\n ```html \n<cms:if (age lt '18') || (age gt '40') && (sex == 'M')> .. </cms:if>\n\n ``` \nIn the snippet above it seems we are trying to do something only if the sex of a person is male and his age is less than 18 or more than 40.  \n\nSuppose that the variable 'age' holds a value of '13' while variable 'sex' holds 'F. For example -\n\n\n\n ```html \n<cms:set age = '13' />\n<cms:set sex = 'F' />\n\n<cms:if (age lt '18') || (age gt '40') && (sex == 'M')>\n <h3>Welcome Gentleman!</h3>\n</cms:if>\n\n ``` \nYou might be surprised to see the Welcome message appearing although the sex is clearly not 'M'.  \n\nThis is because when || and && are used together, the && is given precedence over ||. Implicitly the condition that is being evaluated by **if** above is\n\n\n\n ```html \n<cms:if (age lt '18') || ((age gt '40') && (sex == 'M'))>\n\n ``` \nwhere being lesser than 18 is one condition and the **combined** result of being over 40 and also being a male is the second condition. The two conditions are separated by an || which evaluates to true even if one of the two conditions is true. It should be clear now that in the example above since the age was lesser than 18, the entire condition was evaluated as being true and the **If** block executed.\n\n\nThe right way of using both || and && together is to **always explicitly indicate the precedence**. Thus -\n\n\n\n ```html \n<cms:if ((age lt '18') || (age gt '40')) && (sex == 'M')>\n\n ``` \nwill make the code behave the way we had originally intended. The Welcome message will dissapear and will only reappear when we set 'sex' as 'M'. Notice how we enclosed the first two conditions that were supposed to be evaluated together within an extra pair of paranthesis.\n\n\nAlways explicitly indicate the evaluation precedence of the conditions by using brackets when you use && and || together.\n\n\nParameters\n----------\n\n\nSee discussion above.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [else](else.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:ignore",
            "description": "b'ignore\n======\n\n\nThe **Ignore** tag can be used to surround sections of code that you temporarily do not wish to execute (i.e. want to have the code present on the page yet not be executed).  \n\nThis is somewhat akin to comenting out code in other languages to prevent execution.\n\n\nFor example -\n\n\n\n ```html \n<cms:show 'Hello ' />\n<cms:ignore>\n <cms:show 'world' />\n</cms:ignore>\n\n ``` \nwill output only *Hello* and ignore *world*.\n\n\nParameters\n----------\n\n\nThis tag does not take any parameters.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [hide](hide.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:incr",
            "description": "b'incr\n====\n\n\nThe **incr** tag accepts as its first parameter a variable and increases the value contained within the variable by the value contained within the second optional parameter. If the second parameter is not provided, a value of 1 is assumed.\n\n\n\n ```html \n<cms:set my_value='11' />\n<cms:show my_value />\n\n ``` \nIn the snippet above, value of variable my_value is outputted as 11.\n\n\n\n ```html \n<cms:incr my_value '2' />\n<cms:show my_value />\n\n ``` \nThe value of variable my_value now becomes 13.\n\n\n\n ```html \n<cms:incr my_value />\n<cms:show my_value />\n\n ``` \nThe value of variable my_value now becomes 14.\n\n\nParameters\n----------\n\n\nExpects a maximum of two parameters.\n\n\nThe first parameter has to be a variable. The second parameter is optional and its value is used to increase the value of the variable passed as the first parameter. A default value of 1 is assumed if the second parameter is not specified.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [add](add.html)\n\n* [sub](sub.html)\n\n* [mul](mul.html)\n\n* [div](div.html)\n\n* [mod](mod.html)\n\n* [decr](decr.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:input",
            "description": "b'input\n=====\n\n\nPlease see [**Core Concepts - Form**](../concepts/forms.html) for an in-depth discussion about this tag.\n\n\nParameters\n----------\n\n\nApart from the parameters listed below, any parameters given to this tag will be passed on unchanged to the HTML tag generated by it.\n\n\n\n\n* name\n\n* type\n\n* id\n\n* required\n\n* validator\n\n* validator_msg\n\n* separator\n\n* val_separator\n\n* opt_values\n\n* opt_selected\n\n* width\n\n* height\n\n* style\n\n* format\n\n* reload_text\n\n\n\n### name\n\n\nName of the input. This parameter is mandatory.\n\n\n### type\n\n\nType of the input. Valid values are -\n\n\n\n\n* text\n\n* password\n\n* submit\n\n* hidden\n\n* textarea\n\n* radio\n\n* checkbox\n\n* dropdown\n\n* captcha\n\n\n\nPlease see [**Core Concepts - Form**](../concepts/forms.html) for details about these types.\n\n\n### id\n\n\nId of the input.\n\n\n### required\n\n\nSet this to '1' to make this field mandatory.\n\n\n### validator\n\n\nThe **input** tag shares this parameter with the **editable** tag. Please see the [**validators**](editable.html#validator) section of [***editable***](editable.html) tag for a list of all the validators that can be used.\n\n\n### validator_msg\n\n\nThe **input** tag shares this parameter with the **editable** tag. Please see the [**validators**](editable.html#validator) section of [***editable***](editable.html) tag for a description of this parameter.\n\n\n### separator\n\n\n### val_separator\n\n\n### opt_values\n\n\n### opt_selected\n\n\nThe *separator*, *val_separator*, *opt_values* and *opt_selected* parameters are valid for only *radio*, *checkbox* and *dropdown* input types.  \n\nThe **input** tag shares these parameters with the **editable** tag. Please see the parameters of [**radio**](editable/radio.html#parameters), [**checkbox**](editable/checkbox.html#parameters) and [**dropdown**](editable/dropdown.html#parameters) types of editable regions for details of these.\n\n\n### width\n\n\nWidth in pixels.\n\n\n### height\n\n\nHeight in pixels.\n\n\n### style\n\n\nInline CSS styling.\n\n\n### format\n\n\n### reload_text\n\n\nThe *format* and *reload_text* parameters pertain exclusively to input of *captcha* type. Please see [**Core Concepts - Form**](../concepts/forms.html) where the *captcha* type of input, along with its parameters, is described in detail.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [form](form.html)\n\n* [fieldset](fieldset.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "Name of the input. This parameter is mandatory.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "type",
                    "description": "Type of the input. Valid values are -\n\n\n * text\n * password\n * submit\n * hidden\n * textarea\n * radio\n * checkbox\n * dropdown\n * captcha\n \nPlease see [**Core Concepts - Form**](../concepts/forms.html) for details about these types.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "id",
                    "description": "Id of the input.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "required",
                    "description": "Set this to '1' to make this field mandatory.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "validator",
                    "description": "The **input** tag shares this parameter with the **editable** tag. Please see the [**validators**](editable.html#validator) section of [***editable***](editable.html) tag for a list of all the validators that can be used.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "validator_msg",
                    "description": "The **input** tag shares this parameter with the **editable** tag. Please see the [**validators**](editable.html#validator) section of [***editable***](editable.html) tag for a description of this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "separator",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "val_separator",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "opt_values",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "opt_selected",
                    "description": "The *separator*, *val_separator*, *opt_values* and *opt_selected* parameters are valid for only *radio*, *checkbox* and *dropdown* input types.  \n The **input** tag shares these parameters with the **editable** tag. Please see the parameters of [**radio**](editable/radio.html#parameters), [**checkbox**](editable/checkbox.html#parameters) and [**dropdown**](editable/dropdown.html#parameters) types of editable regions for details of these.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "width",
                    "description": "Width in pixels.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "height",
                    "description": "Height in pixels.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "style",
                    "description": "Inline CSS styling.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "format",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "reload_text",
                    "description": "The *format* and *reload_text* parameters pertain exclusively to input of *captcha* type. Please see [**Core Concepts - Form**](../concepts/forms.html) where the *captcha* type of input, along with its parameters, is described in detail.\n\nVariables\n---------\n\nThis tag does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [form](form.html)\n * [fieldset](fieldset.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:is_ancestor",
            "description": "b'is_ancestor\n============\n\n\nThe **is_ancestor** tag can be used to find whether or not a folder is the ancestor of another folder.  \n\nOutputs '1' if true, else outputs '0'. This makes it possible to use this tag with the conditional **if** tag.\n\n\n\n ```html \n<cms:if \"<cms:is_ancestor parent=folder1 child=folder2 />\" >\n ..\n</cms:if>\n\n ``` \nPlease see [**Core Concepts - Folders**](../concepts/using-folders.html#parents-and-children) for more info.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* parent\n\n* child\n\n\n\n### masterpage\n\n\nThis parameter specifies the template the two folders belong to. If skipped, the template of the executing page is assumed.\n\n\n### parent\n\n\nThe purported parent folder.\n\n\n### child\n\n\nThe child folder.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [folder](folder.html)\n\n* [folders](folders.html)\n\n* [listfolders](listfolders.html)\n\n* [dropdownfolders](dropdownfolders.html)\n\n* [parentfolders](parentfolders.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter specifies the template the two folders belong to. If skipped, the template of the executing page is assumed.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "parent",
                    "description": "The purported parent folder.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "child",
                    "description": "The child folder.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [folder](folder.html)\n * [folders](folders.html)\n * [listfolders](listfolders.html)\n * [dropdownfolders](dropdownfolders.html)\n * [parentfolders](parentfolders.html)\n * [breadcrumbs](breadcrumbs.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:link",
            "description": "b'link\n====\n\n\nThe link tag can be used to dynamically generate appropriate links to the various views of a template.\n\n\nNever hard code links yourself because the links are different depending on whether or not pretty-urls are enabled.\n\n\n### Home view\n\n\n\n ```html \n<a href=\"<cms:link masterpage='news.php' />\" >Testing Link tag</a>\n\n ``` \n### Page view\n\n\n\n ```html \n<a href=\"<cms:link masterpage='news.php' page='first-news-item' />\" >Testing Link tag</a>\n\n ``` \n### Folder view\n\n\n\n ```html \n<a href=\"<cms:link masterpage='news.php' folder='entertainment' />\" >Testing Link tag</a>\n\n ``` \n### Archive view\n\n\n\n ```html \n<a href=\"<cms:link masterpage='news.php' year='2010' />\" >Testing Link tag</a>\n\n<a href=\"<cms:link masterpage='news.php' year='2010' month='8' />\" >Testing Link tag</a>\n\n<a href=\"<cms:link masterpage='news.php' year='2010' month='8' day='17' />\" >Testing Link tag</a>\n\n ``` \nIf multiple parameters are given, the page-view will be given priority over the folder-view and the folder-view will be given priority over the archive-view. The home-view link will be generated only when no other parameter (except the mandatory *masterpage*) is given.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* page\n\n* folder\n\n* year\n\n* month\n\n* day\n\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:listfolders",
            "description": "b'listfolders\n===========\n\n\nThe **listfolders** tag can be used to create a quick-n-dirty HTML unordered list of the folders belonging to a template.\n\n\n\n ```html \n<cms:listfolders masterpage='news.php' />\n\n ``` \nParameters\n----------\n\n\nSupports the same parameter as the **folders** tag. In addition, takes one more parameter - *show_count*.\n\n\n\n\n* masterpage\n\n* root\n\n* childof\n\n* hierarchical\n\n* depth\n\n* orderby\n\n* order\n\n* exclude\n\n* extended_info\n\n* show_count\n\n\n\nPlease see the [**folders**](folders.html#parameters) documentation for an expanation of these parameters.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [folder](folder.html)\n\n* [folders](folders.html)\n\n* [dropdownfolders](dropdownfolders.html)\n\n* [parentfolders](parentfolders.html)\n\n* [is_ancestor](is_ancestor.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:log",
            "description": "b'log\n===\n\n\nThe **log** tag can be used to save arbitrary text into a log file. This may be useful for debugging or for actually keeping a log of events.\n\n\n\n ```html \n<cms:log 'Just a test message' />\n\n ``` \n\n ```html \n<cms:log some_msg />\n\n ``` \nParameters\n----------\n\n\n\n\n* msg\n\n* file\n\n\n\n### msg\n\n\nThe string to be logged.\n\n\n### file\n\n\nThe log file into which the *msg* is to be logged. If this parameter is skipped, a log file named 'log.txt' in your site's root is used (created if not already existing) for logging.  \n\nYou can specify a path with the file that is relative to the site's root.\n\n\n\n ```html \n<cms:log some_msg file='mylog.txt' />\n\n ``` \n\n ```html \n<cms:log k_page_title file='couch/uploads/file/secure/mylog.txt' />\n\n ``` \nIn the last snippet we are saving the log file in a subfolder of Couch which has a .htaccess file protecting its contents from being directly downloaded.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "msg",
                    "description": "The string to be logged.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "file",
                    "description": "The log file into which the *msg* is to be logged. If this parameter is skipped, a log file named 'log.txt' in your site's root is used (created if not already existing) for logging.  \n You can specify a path with the file that is relative to the site's root.\n\n\n ```html \n<cms:log some_msg file='mylog.txt' /> \n ``` \n\n ```html \n<cms:log k_page_title file='couch/uploads/file/secure/mylog.txt' /> \n ``` \nIn the last snippet we are saving the log file in a subfolder of Couch which has a .htaccess file protecting its contents from being directly downloaded.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:menu",
            "description": "b'menu\n====\n\n\nThe **menu** tag is used to quickly generate the HTML markup representing the nested-pages of a site in the form of a dropdown menu.\n\n\nPlease see [**Core Concepts - Nested Pages**](../concepts/nested-pages-aka-menu-maker.html) for details about nested-pages.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* depth\n\n* orderby\n\n* order\n\n* exclude\n\n* ignore_show_in_menu\n\n* root\n\n* childof\n\n* extended_info\n\n\n\n\n\n* menu_class\n\n* menu_id\n\n* first_class\n\n* last_class,\n\n* no_selected\n\n* selected_class\n\n* no_active_trail\n\n* active_trail_class\n\n* list_type\n\n\n\nTo illustrate the use of 'menu' tag, we'll use the same sample hierarchy of elements that we used in the '[folders](../concepts/using-folders.html)' section. The difference being that in this case the elements represent pages instead of folders.\n\n\n\n ```html \nmenu.php\n |---World News\n | |---North American News\n | | |---United States News\n | | |---Ohio News\n | | |---Nevada News\n | |---Asian News\n | |---China News\n | |---Japan News\n |---Sports News\n |---Music News\n |---Entertainment News\n\n ``` \n### masterpage\n\n\nThis parameter is used to specify the template behind the nested-pages tree used to create the menu.  \n\nIf left empty, the template of the currently executing page is assumed (which is unlikely to be correct as you'll usually want to display the menu on all sections (templates) of your site - typically by using '[embed](embed.html)' tag).\n\n\n\n ```html \n<cms:menu masterpage='menu.php'/>\n\n ``` \n### depth\n\n\nThis parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be displayed in the menu.  \n\nThis can be used, for example, to list only the top-level pages in the tree by setting the depth to 1. A depth of 0 means unlimited depth.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' depth='1' />\n\n ``` \nOutput:\n\n\n\n ```html \n* World News\n* Sports News\n* Music News\n* Entertainment News\n\n ``` \n### orderby\n\n\nBy default the menu-items get displayed in the order they are arranged in the admin-panel.  \n\nThis parameter can be set to order them according to the following criteria - name, title, id.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' depth='2' orderby='title' />\n\n ``` \nOutput:\n\n\n\n ```html \n* Entertainment News\n* Music News\n* Sports News\n* World News\n o Asian News\n o North American News\n\n ``` \n### order\n\n\nCan be set to specify whether the menu-items are ordered in the ascending order or in descending order.  \n\nValid values are 'asc' and 'desc'. Default is 'asc'.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' depth='2' orderby='title' order='desc' />\n\n ``` \nOutput:\n\n\n\n ```html \n* World News\n o North American News\n o Asian News\n* Sports News\n* Music News\n* Entertainment News\n\n ``` \n### exclude\n\n\nPages can be excluded from the menu by specifying their names using this parameter.  \n\nIf an excluded page has children, they are excluded too.  \n\nIf multiple pages are to be excluded, separate them using comma.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' exclude='united-states-news, china-news' />\n\n ``` \nOutput:\n\n\n\n ```html \n* World News\n o North American News\n o Asian News\n + Japan News\n* Sports News\n* Music News\n* Entertainment News\n\n ``` \n### ignore_show_in_menu\n\n\nThe 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.  \n\nIf that is unchecked, the page (an all its child pages) is not included by default in the menu.  \n\nYou can override this by setting 'ignore_show_in_menu' parameter to '1'.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' ignore_show_in_menu='1' />\n\n ``` \n### root\n\n\nOnly a sub-section of the nested-pages tree can be displayed in the menu by specifying the name of a nested-page as this parameter.  \n\nThe nested-page specified as the root is displayed along with all its children (compare with 'childof' parameter below where only the children are displayed).\n\n\n\n ```html \n<cms:menu masterpage='menu.php' root='united-states-news' />\n\n ``` \nOutput:\n\n\n\n ```html \n* United States News\n o Ohio News\n o Nevada News\n\n ``` \n### childof\n\n\nOnly a sub-section of the nested-pages tree can be displayed in the menu by specifying the name of a nested-page as this parameter.  \n\nOnly the children of the nested-page specified are displayed (compare with 'root' parameter above where the specified nested-page is also included in the display).\n\n\nIf both 'childof' and 'root' are set, the 'root' parameter gets precedence.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' childof='united-states-news' />\n\n ``` \nOutput:\n\n\n\n ```html \n* Ohio News\n* Nevada News\n\n ``` \n\n#### Dynamic Menu\n\n\n  \n\n Occasionally, you'll come across sites where there is more than one menu on a single page with each of the discrete menus being inter-dependant.  \n\n Thus we could have, for example, a top menu that shows only the top level pages of the site while another menu in the sidebar shows only the pages that occur immediately below the page currently selected in the top menu. There could be yet another menu in the footer that shows the pages below the page selected (if any) in the sidebar menu.  \n\n The sidebar and the footer menu in the case above are examples of dynamic menus because their 'root' keeps on dynamically changing depending on the current page being visited.  \n\n  \n\n To help easily create such menus the 'childof' and 'root' parameter accept some special keywords. At runtime, the 'menu' tag dynamically calculates their values taking into consideration the current page.  \n\n  \n\n The special keywords are -  \n\n**@n** (where n is a number starting from 1 e.g. @1, @2 etc.)  \n\n  \n\n By setting either the 'childof' and 'root' parameter to '@n', we ask Couch to use as the 'root' or 'childof' the page that is parent number 'n' of the current page being visited.  \n\n  \n\n For example -  \n\n  \n\n\n ```html \n<cms:menu masterpage='menu.php' root='@1' />\n ``` \n\n In the snippet above we are instructing Couch to find out all the parents of the current page and then use the top most parent (first parent) as the value for the 'root' parameter.  \n\n Thus, if the page being visited was  \n\n 'Nevada News' (http://www.yoursite.com/world-news/north-american-news/united-states-news/nevada-news/)  \n\n the first parent would be 'world-news' and that is the value that would be used as the 'root' parameter.  \n\n Whereas, in the following snippet  \n\n  \n\n\n ```html \n<cms:menu masterpage='menu.php' root='@2' />\n ``` \n\n the value used for the 'root' parameter would be 'north-american-news' as that is the second parent of the current page.  \n\n  \n\n**@current**  \n\n  \n\n By setting either the 'childof' and 'root' parameter to '@current', we ask Couch to use as the 'root' or 'childof' the current page itself that is being visited.  \n\n  \n\n For example -  \n\n  \n\n\n ```html \n<cms:menu masterpage='menu.php' root='@current' />\n ``` \n\n In the snippet above, if the page being visited was  \n\n 'North American News' (http://www.yoursite.com/world-news/north-american-news/)  \n\n the value used for the 'root' parameter would be 'north-american-news'.  \n\n  \n\n**@current-n** (where n is a number starting from 1 e.g. @current-1, @current-2 etc.)  \n\n  \n\n By setting either the 'childof' and 'root' parameter to '@current-n', we ask Couch to use as the 'root' or 'childof' the parent page that is 'n' level above the page being visited.  \n\n  \n\n For example -  \n\n  \n\n\n ```html \n<cms:menu masterpage='menu.php' root='@current-1' />\n ``` \n\n In the snippet above, if the page being visited was  \n\n 'Nevada News' (http://www.yoursite.com/world-news/north-american-news/united-states-news/nevada-news/)  \n\n the value used for the 'root' parameter would be 'united-states-news' while for the following snippet  \n\n  \n\n\n ```html \n<cms:menu masterpage='menu.php' root='@current-2' />\n ``` \n\n the value used would be 'north-american-news'.  \n\n  \n\n Using these special keywords some very complex menu can be easily created without involving any programming.\n\n  \n\n\n\n### list_type\n\n\nBy default the HTML list element used to create the menu is <UL>.  \n\nIt can be set to <OL> but using this parameter.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' list_type='ol' />\n\n ``` \n### menu_class\n\n\nThis parameter can be used to add class names to the outermost list container (<UL> or <OL>) of the menu.  \n\nThis is useful for styling the menu using CSS.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' menu_class='sf-menu' />\n\n ``` \n\n ```html \n<cms:menu masterpage='menu.php' menu_class='sf-menu sf-navbar' />\n\n ``` \nNotice that in the second example we are applying two classes to the menu.\n\n\n### menu_id\n\n\nThis parameter can be used to apply an ID to the outermost list container (<UL> or <OL>) of the menu.  \n\nThis is useful for styling the menu using CSS.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' menu_id='top-menu' />\n\n ``` \n### first_class\n\n\nThe default behavior of the menu tag is to apply a special class 'first' to the very first menu-item at each level.  \n\nThis is useful for styling the menu using CSS.  \n\nA different class name can be set by using this parameter.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' first_class='begin' />\n\n ``` \n### last_class\n\n\nThe default behavior of the menu tag is to apply a special class 'last' to the last menu-item at each level.  \n\nThis is useful for styling the menu using CSS.  \n\nA different class name can be set by using this parameter.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' first_class='begin' last_class='end' />\n\n ``` \n### no_selected\n\n\nThe default behavior of the menu tag is to apply a special class 'current' (can be changed using the 'selected_class' parameter) to the menu-item that matches the page being visited. This behavior can be turned off by setting the 'no_selected' parameter to '1'.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' no_selected='1' />\n\n ``` \n### selected_class\n\n\nThe default behavior of the menu tag is to apply a special class 'current' to the menu-item that matches the page being visited.  \n\nA different class name can be set by using this parameter.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' selected_class='selected' />\n\n ``` \n### no_active_trail\n\n\nThe default behavior of the menu tag is to apply a special class 'active' to all the menu-items leading up to (and including) the menu-item that matches the current page - thus marking out an 'active-trail' that can be used for CSS styling.  \n\nThis behavior can be turned off by setting the 'no_active_trail' parameter to '1'.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' no_active_trail='1' />\n\n ``` \n### active_trail_class\n\n\nThe default behavior of the menu tag is to apply a special class 'active' to all the menu-items leading up to (and including) the menu-item that matches the current page - thus marking out an 'active-trail' that can be used for CSS styling.  \n\nA different class name can be set by using this parameter.\n\n\n\n ```html \n<cms:menu masterpage='menu.php' active_trail_class='selected-parent' />\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [nested_pages](nested_pages.html)\n\n* [nested_crumbs](nested_crumbs.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter is used to specify the template behind the nested-pages tree used to create the menu.  \n If left empty, the template of the currently executing page is assumed (which is unlikely to be correct as you'll usually want to display the menu on all sections (templates) of your site - typically by using '[embed](embed.html)' tag).\n\n\n ```html \n<cms:menu masterpage='menu.php'/> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "depth",
                    "description": "This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be displayed in the menu.  \n This can be used, for example, to list only the top-level pages in the tree by setting the depth to 1. A depth of 0 means unlimited depth.\n\n\n ```html \n<cms:menu masterpage='menu.php' depth='1' /> \n ``` \nOutput:\n\n\n ```html \n* World News * Sports News * Music News * Entertainment News \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "By default the menu-items get displayed in the order they are arranged in the admin-panel.  \n This parameter can be set to order them according to the following criteria - name, title, id.\n\n\n ```html \n<cms:menu masterpage='menu.php' depth='2' orderby='title' /> \n ``` \nOutput:\n\n\n ```html \n* Entertainment News * Music News * Sports News * World News o Asian News o North American News \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Can be set to specify whether the menu-items are ordered in the ascending order or in descending order.  \n Valid values are 'asc' and 'desc'. Default is 'asc'.\n\n\n ```html \n<cms:menu masterpage='menu.php' depth='2' orderby='title' order='desc' /> \n ``` \nOutput:\n\n\n ```html \n* World News o North American News o Asian News * Sports News * Music News * Entertainment News \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "exclude",
                    "description": "Pages can be excluded from the menu by specifying their names using this parameter.  \n If an excluded page has children, they are excluded too.  \n If multiple pages are to be excluded, separate them using comma.\n\n\n ```html \n<cms:menu masterpage='menu.php' exclude='united-states-news, china-news' /> \n ``` \nOutput:\n\n\n ```html \n* World News o North American News o Asian News + Japan News * Sports News * Music News * Entertainment News \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "ignore_show_in_menu",
                    "description": "The 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.  \n If that is unchecked, the page (an all its child pages) is not included by default in the menu.  \n You can override this by setting 'ignore_show_in_menu' parameter to '1'.\n\n\n ```html \n<cms:menu masterpage='menu.php' ignore_show_in_menu='1' /> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "root",
                    "description": "Only a sub-section of the nested-pages tree can be displayed in the menu by specifying the name of a nested-page as this parameter.  \n The nested-page specified as the root is displayed along with all its children (compare with 'childof' parameter below where only the children are displayed).\n\n\n ```html \n<cms:menu masterpage='menu.php' root='united-states-news' /> \n ``` \nOutput:\n\n\n ```html \n* United States News o Ohio News o Nevada News \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "childof",
                    "description": "Only a sub-section of the nested-pages tree can be displayed in the menu by specifying the name of a nested-page as this parameter.  \n Only the children of the nested-page specified are displayed (compare with 'root' parameter above where the specified nested-page is also included in the display).\n\nIf both 'childof' and 'root' are set, the 'root' parameter gets precedence.\n\n\n ```html \n<cms:menu masterpage='menu.php' childof='united-states-news' /> \n ``` \nOutput:\n\n\n ```html \n* Ohio News * Nevada News \n ``` \n #### Dynamic Menu\n\n   \n Occasionally, you'll come across sites where there is more than one menu on a single page with each of the discrete menus being inter-dependant.  \n Thus we could have, for example, a top menu that shows only the top level pages of the site while another menu in the sidebar shows only the pages that occur immediately below the page currently selected in the top menu. There could be yet another menu in the footer that shows the pages below the page selected (if any) in the sidebar menu.  \n The sidebar and the footer menu in the case above are examples of dynamic menus because their 'root' keeps on dynamically changing depending on the current page being visited.  \n   \n To help easily create such menus the 'childof' and 'root' parameter accept some special keywords. At runtime, the 'menu' tag dynamically calculates their values taking into consideration the current page.  \n   \n The special keywords are -  \n **@n** (where n is a number starting from 1 e.g. @1, @2 etc.)  \n   \n By setting either the 'childof' and 'root' parameter to '@n', we ask Couch to use as the 'root' or 'childof' the page that is parent number 'n' of the current page being visited.  \n   \n For example -  \n   \n \n ```html \n<cms:menu masterpage='menu.php' root='@1' />\n ``` \n In the snippet above we are instructing Couch to find out all the parents of the current page and then use the top most parent (first parent) as the value for the 'root' parameter.  \n Thus, if the page being visited was  \n 'Nevada News' (http://www.yoursite.com/world-news/north-american-news/united-states-news/nevada-news/)  \n the first parent would be 'world-news' and that is the value that would be used as the 'root' parameter.  \n Whereas, in the following snippet  \n   \n \n ```html \n<cms:menu masterpage='menu.php' root='@2' />\n ``` \n the value used for the 'root' parameter would be 'north-american-news' as that is the second parent of the current page.  \n   \n **@current**  \n   \n By setting either the 'childof' and 'root' parameter to '@current', we ask Couch to use as the 'root' or 'childof' the current page itself that is being visited.  \n   \n For example -  \n   \n \n ```html \n<cms:menu masterpage='menu.php' root='@current' />\n ``` \n In the snippet above, if the page being visited was  \n 'North American News' (http://www.yoursite.com/world-news/north-american-news/)  \n the value used for the 'root' parameter would be 'north-american-news'.  \n   \n **@current-n** (where n is a number starting from 1 e.g. @current-1, @current-2 etc.)  \n   \n By setting either the 'childof' and 'root' parameter to '@current-n', we ask Couch to use as the 'root' or 'childof' the parent page that is 'n' level above the page being visited.  \n   \n For example -  \n   \n \n ```html \n<cms:menu masterpage='menu.php' root='@current-1' />\n ``` \n In the snippet above, if the page being visited was  \n 'Nevada News' (http://www.yoursite.com/world-news/north-american-news/united-states-news/nevada-news/)  \n the value used for the 'root' parameter would be 'united-states-news' while for the following snippet  \n   \n \n ```html \n<cms:menu masterpage='menu.php' root='@current-2' />\n ``` \n the value used would be 'north-american-news'.  \n   \n Using these special keywords some very complex menu can be easily created without involving any programming.   \n\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:mod",
            "description": "b'mod\n===\n\n\nThe **mod** tag accepts two parameters and returns as its output the remainder obtained after dividing the first parameter by the second.  \n\nThe parameters may be literal strings, variables or output of other tags.\n\n\n\n ```html \n<cms:set my_count='23' />\n<cms:mod my_count '5' />\n\n ``` \nThe snippet above outputs '3', which is what remains after dividing 23 by 5.\n\n\nParameters\n----------\n\n\nThe tag expects two parameters as the operands.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [add](add.html)\n\n* [sub](sub.html)\n\n* [mul](mul.html)\n\n* [div](div.html)\n\n* [incr](incr.html)\n\n* [decr](decr.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:mul",
            "description": "b'mul\n===\n\n\nThe **mul** tag accepts two parameters and returns as its output the value obtained after multiplying them.  \n\nThe parameters may be literal strings, variables or output of other tags.\n\n\n\n ```html \n<cms:mul my_count '5' />\n\n ``` \nThe snippet multiplies by 5 whatever value is contained within *my_count* variable and outputs the resulting value.\n\n\nParameters\n----------\n\n\nThe tag expects two parameters as the values to be multiplied.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [add](add.html)\n\n* [sub](sub.html)\n\n* [div](div.html)\n\n* [mod](mod.html)\n\n* [incr](incr.html)\n\n* [decr](decr.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:nested_crumbs",
            "description": "b'nested_crumbs\n==============\n\n\nThe **nested_crumbs** tag can be used to easily create breadcrumbs out of [nested-pages](../concepts/nested-pages-aka-menu-maker.html).\n\n\n\n There is another tag named '[breadcrumbs](breadcrumbs.html)', which is used with the folder hierarchy associated with normal cloned pages.  \n\n 'nested_crumbs' on the other hand works with nested-pages only.\n\n\n\n### Usage\n\n\nThis tag can be used in two ways -\n\n\n**1.** As self-closing tag. e.g.\n\n\n\n ```html \n<cms:nested_crumbs masterpage='index.php' />\n\n ``` \nwhere 'masterpage' points to the template behind the nested-pages tree.\n\n\n**2.** As a tag-pair for better control over the generated breadcrumbs markup. e.g.\n\n\n\n ```html \n<cms:nested_crumbs masterpage='index.php' ignore_show_in_menu='1' prepend='<ul class=\"breadcrumb\">' append='</ul>'>\n <li><a href=\"<cms:show k_crumb_link />\"><cms:show k_crumb_text /></a><cms:if k_crumb_is_last='0'> &raquo; </cms:if></li>\n</cms:nested_crumbs>\n\n ``` \nParameters\n----------\n\n\n\n\n* masterpage\n\n* ignore_show_in_menu\n\n* prepend\n\n* append\n\n\n\n### masterpage\n\n\nThis parameter is used to specify the template behind the nested-pages used to create the breadcrumbs.  \n\nIf left empty, the template of the currently executing page is assumed.\n\n\n### ignore_show_in_menu\n\n\nThe 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.  \n\nIf that is unchecked, the page is not included by default in the breadcrumbs.  \n\nYou can override this by setting 'ignore_show_in_menu' parameter to '1'.\n\n\n### prepend\n\n\nWhile using the tag as a tag-pair (see Usage above), this parameter can be used to output anything before the first crumb.\n\n\n### append\n\n\nWhile using the tag as a tag-pair (see Usage above), this parameter can be used to output anything after the last crumb.\n\n\nVariables\n---------\n\n\nWhen used as a self-closing tag, this tag sets no variables.\n\n\nWhen used as a tag-pair, the following variables are set for each crumb -\n\n\n\n\n* k_crumb_id\n\n* k_crumb_name\n\n* k_crumb_text\n\n* k_crumb_link\n\n* k_crumb_is_nested_page\n\n* k_crumb_is_folder\n\n* k_crumb_open_external\n\n* k_crumb_is_last\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [menu](menu.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n* [nested_pages](nested_pages.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter is used to specify the template behind the nested-pages used to create the breadcrumbs.  \n If left empty, the template of the currently executing page is assumed.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "ignore_show_in_menu",
                    "description": "The 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.  \n If that is unchecked, the page is not included by default in the breadcrumbs.  \n You can override this by setting 'ignore_show_in_menu' parameter to '1'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "prepend",
                    "description": "While using the tag as a tag-pair (see Usage above), this parameter can be used to output anything before the first crumb.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "append",
                    "description": "While using the tag as a tag-pair (see Usage above), this parameter can be used to output anything after the last crumb.\n\nVariables\n---------\n\nWhen used as a self-closing tag, this tag sets no variables.\n\nWhen used as a tag-pair, the following variables are set for each crumb -\n\n\n * k_crumb_id\n * k_crumb_name\n * k_crumb_text\n * k_crumb_link\n * k_crumb_is_nested_page\n * k_crumb_is_folder\n * k_crumb_open_external\n * k_crumb_is_last\n \nRelated Tags\n------------\n\n\n * [menu](menu.html)\n * [breadcrumbs](breadcrumbs.html)\n * [nested_pages](nested_pages.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:nested_pages",
            "description": "b'nested_pages\n=============\n\n\nThe **nested_pages** tag is used to list [nested-pages](../concepts/nested-pages-aka-menu-maker.html).\n\n\nSince the primary purpose of nested-pages (as explained in the [Core Concepts](../concepts/nested-pages-aka-menu-maker.html)) is to create a hierarchy of pages that can be represented as the site's menu, you'll find that usually the '[menu](menu.html)' tag will suffice for the purpose of creating a menu.  \n\nHowever, sometimes you'll need more control over the generated menu than what the '[menu](menu.html)' tag offers.  \n\nFor such cases, the 'nested_pages' tag can be used as it is a lower level tag (in fact, the '[menu](menu.html)' tag uses the 'nested_pages' internally).\n\n\nTo illustrate the use of 'nested_pages', we'll use the same sample hierarchy of elements that we used in the '[folders](../concepts/using-folders.html)' section. The difference being that in this case the elements represent pages instead of folders.  \n\nWe'll assume that a template named 'index.php' has been used to create the nested-pages.\n\n\n\n ```html \nindex.php\n |---World News\n | |---North American News\n | | |---United States News\n | | |---Ohio News\n | | |---Nevada News\n | |---Asian News\n | |---China News\n | |---Japan News\n |---Sports News\n |---Music News\n |---Entertainment News\n\n ``` \nThe simplest way to list the nested-pages would be as follows -\n\n\n\n ```html \n<cms:nested_pages masterpage='index.php'>\n <a href=\"<cms:show k_nestedpage_link />\"><cms:show k_nestedpage_title /></a><br />\n</cms:nested_pages>\n\n ``` \nThe output -\n\n\n\n ```html \nWorld News\nNorth American News\nUnited States News\nOhio News\nNevada News\nAsian News\nChina News\nJapan News\nSports News\nMusic News\nEntertainment News\n\n ``` \nNotice how the hierarchical relationship between the pages has been preserved.\n\n\nAs is the norm with other similar tags in Couch, the 'nested_pages' tag too, as it iterates through the pages within the tree, makes available all the information pertaining the page it is currently on by setting various variables.  \n\nPlace a *<cms:dump />* statement inside the loop and you'll see that Couch provides all the information that was inputted in the admin-section for each nested-page.\n\n\n\n ```html \n<cms:nested_pages masterpage='index.php'>\n <cms:dump />\n <a href=\"<cms:show k_nestedpage_link />\"><cms:show k_nestedpage_title /></a><br />\n</cms:nested_pages>\n\n ``` \nThese, for example, are the variables that get set for page 'United States News' -\n\n\n\n ```html \n* k_level: 2\n* k_nestedpage_id: 1595\n* k_nestedpage_name: united-states-news\n* k_nestedpage_title: United States News\n* k_nestedpage_is_active: 1\n* k_nestedpage_comments_count: 0\n* k_nestedpage_parent_id: 1594\n* k_nestedpage_weight: 1\n* k_show_in_menu: 1\n* k_menu_text:\n* k_is_pointer: 0\n* k_pointer_link:\n* k_open_external: 0\n* k_masquerades: 0\n* k_is_active: 1\n* k_is_current: 1\n* k_immediate_children: 2\n* k_total_children: 2\n* k_nestedpage_link: http://www.yourdomain.com/?p=1595\n* k_menu_link: http://www.yourdomain.com/?p=1595\n* k_menu_title: United States News\n\n ``` \nAs you can see, all the information that would be needed to create manually a menu markup is available.  \n\nLet us use is to create one.\n\n\n### Creating menu using 'nested_pages' tag\n\n\nA menu is normally created using nested <UL>/<OL> and <LI> elements. To make the task of doing so easy, the 'nested_pages' tag, like the '[folders](folders.html)' tag, supports the 'extended_info' parameter. Setting the 'extended_info' parameter to '1' makes the 'nested_pages' tag provide additional information that can be used to output the closing and opening <UL>/<OL> and <LI> tags without any pain.\n\n\n\n ```html \n<cms:nested_pages masterpage='index.php' extended_info='1' >\n <cms:if k_level_start ><ul></cms:if>\n <cms:if k_element_start ><li>\n <cms:show k_nestedpage_title />\n </cms:if>\n <cms:if k_element_end ></li></cms:if>\n <cms:if k_level_end ></ul></cms:if>\n</cms:nested_pages>\n\n ``` \nOutput -\n\n\n\n ```html \n<ul>\n <li>\n Asian News\n <ul>\n <li>China News</li>\n <li>Japan News</li>\n </ul>\n </li>\n <li>\n North American News\n <ul>\n <li>\n United States News\n <ul>\n <li>Nevada News</li>\n <li>Ohio News</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n ``` \nFollowing is a complete example that makes use of the variables mentioned before to create a functioning menu -\n\n\n\n ```html \n<cms:nested_pages masterpage='index.php' extended_info='1' >\n <cms:if k_level_start >\n <cms:if k_level='0'>\n <ul class=\"my-menu-class-1 my-menu-class-2\" id=\"my-menu-id\">\n <cms:else />\n <ul>\n </cms:if>\n </cms:if>\n\n <cms:if k_element_start >\n <li id=\"item-<cms:show k_nestedpage_name />\" class=\"level-<cms:show k_level/><cms:if k_total_children> has-submenu</cms:if><cms:if k_first_child> first</cms:if><cms:if k_last_child> last</cms:if><cms:if k_is_active> active</cms:if><cms:if k_is_current> current</cms:if>\">\n <a href=\"<cms:show k_menu_link />\"><cms:show k_menu_title /></a>\n </cms:if>\n\n <cms:if k_element_end ></li></cms:if>\n <cms:if k_level_end ></ul></cms:if>\n</cms:nested_pages>\n\n ``` \nThe example shown above is equivalent to the following using '[menu](menu.html)' tag -\n\n\n\n ```html \n<cms:menu masterpage='index.php' menu_class='my-menu-class-1 my-menu-class-2' menu_id='my-menu-id' first_class='first' last_class='last' active_trail_class='active' selected_class='current' />\n\n ``` \n### Creating a paginated listing using 'nested_pages' tag\n\n\nApart from being used to create a menu, the 'nested_pages' tag may also be used to create a conventional listing of pages, complete with pagination etc., the way it is usually done using the '[pages](pages.html)' tag with normal (i.e. non nestable) pages.\n\n\nIf you are familiar with the '[pages](pages.html)' tag, the following snippet will seem familiar -\n\n\n\n ```html \n<cms:nested_pages masterpage='index.php' extended_info='1' paginate='1' limit='5' >\n <cms:if k_paginated_top>\n <cms:if k_paginator_required >\n Page <cms:show k_current_page /> of <cms:show k_total_pages /><br>\n </cms:if>\n <cms:show k_total_records /> records Found.\n Displaying: <cms:show k_record_from />-<cms:show k_record_to />\n <br /><hr />\n </cms:if>\n\n <a href=\"<cms:show k_nestedpage_link />\"><cms:show k_nestedpage_title /></a><br />\n\n <cms:paginator />\n\n</cms:nested_pages>\n\n ``` \nOutput -\n\n\n\n ```html \nPage 1 of 3\n11 records Found. Displaying: 1-5\n\nWorld News\nNorth American News\nUnited States News\nOhio News\nNevada News\n\n<< prev 1 2 3 next >>\n\n ``` \nSome points to note -\n\n\n\n\n2. With 'paginate' set to '1', the 'extended_info' is automatically turned off - i.e. only the conventional linear listing is possible.\n\n4. For performance reasons, data from the custom fields (i.e. the editable regions defined for the nested-pages template) is not made available by default. You can set the 'include_custom_fields' parameter to '1' to make the custom fields available.\n\n\n\n\n**IMPORTANT:** Since, as you just saw, the nested pages can be listed in the conventional manner (like the one produced by the 'pages' tag), it is perfectly possible to create entire sections of a website using nested-pages instead of the regular cloned pages.  \n\n One feature of the nested-pages that might make doing so more desirable is the ability to set their display order from the admin panel using simple up-down arrows (for regular pages this usually entailed tweaking their publish-dates).  \n\n  \n\n However, it is necessary to emphasize here that the nested-pages have been created (and hence optimized) for creating loose stand-alone pages in a site. Such pages, as opposed to the cloned pages within discrete sections like blog or portfolio, are not likely to be in very large numbers.  \n\n You can definitely have hundreds of them, but if the number of pages is likely to reach into the thousands please use the regular cloned pages as they are optimized for handling larger numbers.\n\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* depth\n\n* orderby\n\n* order\n\n* exclude\n\n* ignore_show_in_menu\n\n* root\n\n* childof\n\n* extended_info\n\n* include_custom_fields\n\n* paginate\n\n* limit\n\n* offset\n\n* startcount\n\n\n\n### masterpage\n\n\nThis parameter is used to specify the template behind the nested-pages tree.  \n\nIf left empty, the template of the currently executing page is assumed.\n\n\n### depth\n\n\nThis parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be listed by this tag.  \n\nThis can be used, for example, to list only the top-level pages in the tree by setting the depth to 1. A depth of 0 means unlimited depth.\n\n\n### orderby\n\n\nBy default the pages are listed in the order they are arranged in the admin-panel.  \n\nThis order can be changed by using the 'orderby' parameter. Valid values are: name, title, id.\n\n\n### order\n\n\nCan be set to specify whether the pages are ordered in the ascending order or in descending order.  \n\nValid values are asc and desc. Default is asc.\n\n\n### exclude\n\n\nPages can be excluded from being listed by specifying their names using this parameter.  \n\nIf an excluded page has children, they are excluded too.  \n\nIf multiple pages are to be excluded, separate their names using comma.\n\n\n### ignore_show_in_menu\n\n\nThe 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.  \n\nIf that is unchecked, the page (an all its child pages) is not included by default in the listing.  \n\nYou can override this by setting 'ignore_show_in_menu' parameter to '1'\n\n\n### root\n\n\nOnly a sub-section of the nested-pages tree can be listed by specifying the name of a page as this parameter.  \n\nThe page specified as the root is displayed along with all its children (compare with 'childof' parameter below where only the children are displayed).\n\n\n### childof\n\n\nOnly a sub-section of the nested-pages tree can be listed by specifying the name of a page as this parameter.  \n\nOnly the children of the page specified are displayed (compare with 'root' parameter above where the specified page is also included in the display).\n\n\nIf both 'childof' and 'root' are set, the 'root' parameter gets precedence.\n\n\n### extended_info\n\n\nIf this parameter is set, additional variables get set to report the changes in hierarchy encountered by the nested_pages tag, as it traverses through the tree. Please see the Variables section below.\n\n\n### include_custom_fields\n\n\nBy default, in a bid to enhance performance, the custom-field's data (i.e. data within the editable regions) are not made available as the nested_pages tag traverses through the pages in the tree.  \n\nIf the 'include_custom_fields' is set to '1', all the values within the editable regions of each page are made available as variables named after the regions.\n\n\n### paginate\n\n\nTo list the nested-pages in conventional manner (i.e. the way the 'pages' tag lists the regular cloned pages), set this parameter to '1'.  \n\nOne the 'paginate' parameter is set -  \n\n**a.** 'extended_info' is automatically turned off so information about the changes in hierarchy levels in no longer available.  \n\n**b.** All the variables that help in creating the pagination buttons become available (see [Pagination](../concepts/pagination.html))  \n\n**c.** The 'limit', 'offset' and 'startcount' parameters described below become effective.\n\n\n### limit\n\n\nThis parameter takes effect only when the 'paginate' parameter is set to '1'.  \n\nIt can be used to limit the number of pages listed before the pagination buttons leading to the next/prev set of pages appear.\n\n\n### offset\n\n\nThis parameter takes effect only when the 'paginate' parameter is set to '1'.  \n\nit can be used to skip any number of pages before beginning the listing.\n\n\n### startcount\n\n\nThis parameter takes effect only when the 'paginate' parameter is set to '1'.  \n\nThe k_count, k_record_from, k_current_record and k_record_to variables (see [Pagination](../concepts/pagination.html)) start by default from '1'. This can be changed to any other value by setting this parameter.\n\n\nVariables\n---------\n\n\nThe following variables are set to provide information about each nested-page that gets enumerated -\n\n\n\n\n* k_nestedpage_id\n\n* k_nestedpage_name\n\n* k_nestedpage_title\n\n* k_nestedpage_is_active\n\n* k_nestedpage_comments_count\n\n* k_nestedpage_parent_id\n\n* k_nestedpage_weight\n\n* k_show_in_menu\n\n* k_menu_text:\n\n* k_menu_link\n\n* k_menu_title\n\n* k_is_pointer\n\n* k_pointer_link:\n\n* k_open_external\n\n* k_masquerades\n\n* k_is_active\n\n* k_is_current\n\n* k_immediate_children\n\n* k_total_children\n\n* k_first_child\n\n* k_last_child\n\n* k_nestedpage_link\n\n\n\nIf the 'extended_info' parameter is set to '1', the following variables also get set to indicate the current position in the hierarchy as this tag enumerates the pages -\n\n\n\n\n* k_level_start\n\n* k_element_start\n\n* k_element_end\n\n* k_level_end\n\n\n\nIf the 'include_custom_fields' parameter is set to '1', all the values within the editable regions of each page are made available as variables named after the regions.\n\n\nIf the 'paginate' parameter is set to '1', variables that help in creating the pagination buttons become available (see [Pagination](../concepts/pagination.html))\n\n\nRelated Tags\n------------\n\n\n\n\n* [pages](pages.html)\n\n* [folders](folders.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter is used to specify the template behind the nested-pages tree.  \n If left empty, the template of the currently executing page is assumed.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "depth",
                    "description": "This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be listed by this tag.  \n This can be used, for example, to list only the top-level pages in the tree by setting the depth to 1. A depth of 0 means unlimited depth.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "By default the pages are listed in the order they are arranged in the admin-panel.  \n This order can be changed by using the 'orderby' parameter. Valid values are: name, title, id.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Can be set to specify whether the pages are ordered in the ascending order or in descending order.  \n Valid values are asc and desc. Default is asc.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "exclude",
                    "description": "Pages can be excluded from being listed by specifying their names using this parameter.  \n If an excluded page has children, they are excluded too.  \n If multiple pages are to be excluded, separate their names using comma.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "ignore_show_in_menu",
                    "description": "The 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.  \n If that is unchecked, the page (an all its child pages) is not included by default in the listing.  \n You can override this by setting 'ignore_show_in_menu' parameter to '1'\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "root",
                    "description": "Only a sub-section of the nested-pages tree can be listed by specifying the name of a page as this parameter.  \n The page specified as the root is displayed along with all its children (compare with 'childof' parameter below where only the children are displayed).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "childof",
                    "description": "Only a sub-section of the nested-pages tree can be listed by specifying the name of a page as this parameter.  \n Only the children of the page specified are displayed (compare with 'root' parameter above where the specified page is also included in the display).\n\nIf both 'childof' and 'root' are set, the 'root' parameter gets precedence.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "extended_info",
                    "description": "If this parameter is set, additional variables get set to report the changes in hierarchy encountered by the nested_pages tag, as it traverses through the tree. Please see the Variables section below.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "include_custom_fields",
                    "description": "By default, in a bid to enhance performance, the custom-field's data (i.e. data within the editable regions) are not made available as the nested_pages tag traverses through the pages in the tree.  \n If the 'include_custom_fields' is set to '1', all the values within the editable regions of each page are made available as variables named after the regions.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "paginate",
                    "description": "To list the nested-pages in conventional manner (i.e. the way the 'pages' tag lists the regular cloned pages), set this parameter to '1'.  \n One the 'paginate' parameter is set -  \n **a.** 'extended_info' is automatically turned off so information about the changes in hierarchy levels in no longer available.  \n **b.** All the variables that help in creating the pagination buttons become available (see [Pagination](../concepts/pagination.html))  \n **c.** The 'limit', 'offset' and 'startcount' parameters described below become effective.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "limit",
                    "description": "This parameter takes effect only when the 'paginate' parameter is set to '1'.  \n It can be used to limit the number of pages listed before the pagination buttons leading to the next/prev set of pages appear.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "offset",
                    "description": "This parameter takes effect only when the 'paginate' parameter is set to '1'.  \n it can be used to skip any number of pages before beginning the listing.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "startcount",
                    "description": "This parameter takes effect only when the 'paginate' parameter is set to '1'.  \n The k_count, k_record_from, k_current_record and k_record_to variables (see [Pagination](../concepts/pagination.html)) start by default from '1'. This can be changed to any other value by setting this parameter.\n\nVariables\n---------\n\nThe following variables are set to provide information about each nested-page that gets enumerated -\n\n\n * k_nestedpage_id\n * k_nestedpage_name\n * k_nestedpage_title\n * k_nestedpage_is_active\n * k_nestedpage_comments_count\n * k_nestedpage_parent_id\n * k_nestedpage_weight\n * k_show_in_menu\n * k_menu_text:\n * k_menu_link\n * k_menu_title\n * k_is_pointer\n * k_pointer_link:\n * k_open_external\n * k_masquerades\n * k_is_active\n * k_is_current\n * k_immediate_children\n * k_total_children\n * k_first_child\n * k_last_child\n * k_nestedpage_link\n \nIf the 'extended_info' parameter is set to '1', the following variables also get set to indicate the current position in the hierarchy as this tag enumerates the pages -\n\n\n * k_level_start\n * k_element_start\n * k_element_end\n * k_level_end\n \nIf the 'include_custom_fields' parameter is set to '1', all the values within the editable regions of each page are made available as variables named after the regions.\n\nIf the 'paginate' parameter is set to '1', variables that help in creating the pagination buttons become available (see [Pagination](../concepts/pagination.html))\n\nRelated Tags\n------------\n\n\n * [pages](pages.html)\n * [folders](folders.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:nl2br",
            "description": "b'nl2br\n=====\n\n\nThe **nl2br** tag stands for 'newline to BR' and can be used to convert all newline characters in a string to HTML <BR> tags.\n\n\nIt comes in handy in situations where you have an editable region of *textarea* type and while displaying the data contained within it, you wish to replace all the newlines entered by the user with <BR> tags.\n\n\n\n ```html \n<cms:nl2br><cms:show some_variable /></cms:nl2br>\n\n ``` \nParameters\n----------\n\n\nThis tag takes no parameters. All content enclosed within its opening and closing tags serve as its input.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:not_empty",
            "description": "b'not_empty\n==========\n\n\nThe **not_empty** tag can be used to find out whether or not an editable region contains any value.\n\n\nIt returns a '1' if the variable representing the editable region contains some value (i.e. is not empty) else it returns a '0'.  \n\nThis property makes it possible to use it with conditional tags, like **if** and **else**.\n\n\n\n ```html \n<cms:if \"<cms:not_empty my_content />\" >\n .. do something..\n</cms:if>\n\n ``` \nThe snippet above, where we are checking if the editable region named *my_content* contains any value, could have been written in the following simpler manner -\n\n\n\n ```html \n<cms:if my_content >\n .. do something..\n</cms:if>\n\n ``` \n- however, if the editable region is of type *richtext*, the CKEditor sometimes inserts some spurious <BR /> or empty <P> tags into it even if nothing is entered into the editable region by the user. This will cause the simple test above to fail with *richtext* types. The **not_empty** strips off all HTML tags from the variable it is testing and then returns the result, thus making it useful for such cases.\n\n\nParameters\n----------\n\n\nThis tag takes no parameters.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:number_format",
            "description": "b'number_format\n==============\n\n\nThe **number_format** tag can be used to properly format numeric values.\n\n\nFor example\n\n\n\n ```html \n<cms:number_format '1234567890' />\n\n ``` \nThe snippet above will output\n\n\n\n ```html \n1,234,567,890.00\n\n ``` \nParameters\n----------\n\n\n\n\n* number\n\n* decimal_precision\n\n* decimal_character\n\n* thousands_separator\n\n\n\n### number\n\n\nThe number to be formatted.\n\n\n### decimal_precision\n\n\nBy default two numeric characters are outputted after the decimal point. This can be changed by this parameter.\n\n\n\n ```html \n<cms:number_format '1234567890' decimal_precision='0' />\n\n ``` \nwill output\n\n\n\n ```html \n1,234,567,890\n\n ``` \n### decimal_character\n\n\nThe default character used as the decimal point can be changed by this parameter.\n\n\n### thousands_separator\n\n\nThe default character used as the thousand separator is the comma. It can be changed by this parameter.\n\n\nThe following snippet can be used to format a number in French notation\n\n\n\n ```html \n<cms:number_format '1234.56' decimal_character=',' thousands_separator=' ' />\n\n ``` \nOutput -\n\n\n\n ```html \n1 234,56\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [date](date.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "number",
                    "description": "The number to be formatted.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "decimal_precision",
                    "description": "By default two numeric characters are outputted after the decimal point. This can be changed by this parameter.\n\n\n ```html \n<cms:number_format '1234567890' decimal_precision='0' /> \n ``` \nwill output\n\n\n ```html \n1,234,567,890 \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "decimal_character",
                    "description": "The default character used as the decimal point can be changed by this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "thousands_separator",
                    "description": "The default character used as the thousand separator is the comma. It can be changed by this parameter.\n\nThe following snippet can be used to format a number in French notation\n\n\n ```html \n<cms:number_format '1234.56' decimal_character=',' thousands_separator=' ' /> \n ``` \nOutput -\n\n\n ```html \n1 234,56 \n ``` \nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [date](date.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:page_exists",
            "description": "b'page_exists\n============\n\n\nThe **page_exists** tag checks whether or not a cloned page, the name of which is given to it as a parameter, exists.  \n\nIt returns a '1' if the page exists else it returns a '0'.\n\n\n\n ```html \n<cms:page_exists 'contact-us' masterpage='index.php' />\n\n ``` \nThe above snippet is checking for the existence of a page named 'contact-us' that has been cloned out of a template named 'index.php'.\n\n\nParameters\n----------\n\n\n\n\n* name\n\n* masterpage\n\n\n\n### name\n\n\nName of the cloned page the existence of which is to be checked.\n\n\n### masterpage\n\n\nName of the template out of which the cloned page mentioned above has been cloned.  \n\nIf this parameter is skipped, the name of the template of the currently executing page will be used instead.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [exists](exists.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "Name of the cloned page the existence of which is to be checked.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "masterpage",
                    "description": "Name of the template out of which the cloned page mentioned above has been cloned.  \n If this parameter is skipped, the name of the template of the currently executing page will be used instead.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [exists](exists.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:pages",
            "description": "b'pages\n=====\n\n\n**Pages** tag can be used to list all pages belonging to a template.\n\n\n\n ```html \n<cms:pages masterpage='blog.php'>\n <!-- All the variables of each page cloned out of this template are available here -->\n <cms:show k_page_title /><br>\n</cms:pages>\n\n ``` \n- the snippet given above will fetch all pages cloned out of *blog.php* template.  \n\nThe *masterpage* parameter stands for the template's name. If this parameter is omitted, the name of the current template (i.e. the template this snippet is placed in) will be used.\n\n\nThis tag iterates through each of the fetched page and makes available all the data associated with the page as variables. The variables are exactly the same as those made available had the page been accessed discretly via its URL (i.e. in its [*page-view*](../concepts/variables-in-views.html)).\n\n\n**Pages** tag supports a number of parameters that can be used to fine tune the actual pages that get fetched.\n\n\nParameters\n----------\n\n\n\n\n* masterpage\n\n* id\n\n* page_name\n\n* limit\n\n* paginate\n\n* offset\n\n* startcount\n\n* folder\n\n* include_subfolders\n\n* start_on\n\n* stop_before\n\n* show_future_entries\n\n* orderby\n\n* order\n\n* custom_field\n\n\n\n### masterpage\n\n\n\n ```html \n<cms:pages masterpage='blog.php'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php.\n\n\nIf this parameter is skipped, the template being currently executed is used instead. Thus -\n\n\n\n ```html \n<cms:pages></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from the template being currently executed.\n\n\n### id\n\n\n\n ```html \n<cms:pages masterpage='blog.php' id='14'></cms:pages>\n\n ``` \nThis example would fetch only page with id of 14 that has been cloned from blog.php.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' id='14, 13'></cms:pages>\n\n ``` \nThis example would fetch only pages with id of 14 or 13 that have been cloned from blog.php.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' id='NOT 14, 13'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php except the two with the ids of 14 or 13.\n\n\n### page_name\n\n\n\n ```html \n<cms:pages masterpage='blog.php' page_name='my_first_entry'></cms:pages>\n\n ``` \nThis example would fetch the page named 'my_first_entry' that has been cloned from blog.php.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' page_name='my_first_entry, my_another_entry'></cms:pages>\n\n ``` \nThis example would fetch pages named 'my_first_entry' or 'my_another_entry' that have been cloned from blog.php.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' page_name='NOT my_first_entry, my_another_entry'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php except the two named 'my_first_entry' or 'my_another_entry'.\n\n\n### limit\n\n\n\n ```html \n<cms:pages masterpage='blog.php' limit='5'></cms:pages>\n\n ``` \nThis example would fetch five pages cloned from blog.php. (Since no 'orderby' and 'order' parameters specified, the default values of these parameters will be used and the most recent five pages will be fetched.)\n\n\n### paginate\n\n\n\n ```html \n<cms:pages masterpage='blog.php' limit='5' paginate='1'></cms:pages>\n\n ``` \nThis example would fetch ALL pages cloned from blog.php but show only 5 at one time. To move to the next 5 or the previous 5 pages, pagination code has to be used (see [**Pagination**](../concepts/pagination.html)).\n\n\n### offset\n\n\n\n ```html \n<cms:pages masterpage='blog.php' offset='2'></cms:pages>\n\n ``` \nThis example would fetch pages cloned from blog.php after skipping the first two.\n\n\n### startcount\n\n\n\n ```html \n<cms:pages masterpage='blog.php' startcount='0'></cms:pages>\n\n ``` \nThe *k_count*, *k_record_from*, *k_current_record* and *k_record_to* variables (see [**Pagination**](../concepts/pagination.html)) start by default from '1'. This can be changed to any other value by setting this parameter.\n\n\n### folder\n\n\n\n ```html \n<cms:pages masterpage='blog.php' folder='classic-bikes'></cms:pages>\n\n ``` \nThis example would fetch pages cloned from blog.php and belonging to folder named 'classic-bikes'.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' folder='classic-bikes, super-bikes'></cms:pages>\n\n ``` \nThis example would fetch pages cloned from blog.php and belonging to folders named 'classic-bikes' or 'super-bikes'.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' folder='NOT classic-bikes, super-bikes'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php except those belonging to folders named 'classic-bikes' or 'super-bikes'.\n\n\nBy default Couch will only fetch pages that lie DIRECTLY within the given folder(s).  \n\nTo include the pages that are within the subfolders of the given folder(s), set the *include_subfolders* parameter as well.  \n\nSee below.\n\n\nIn the *folder-view* (see [**Views**](../concepts/views.html)), the *k_folder_name* variable is set to the name of the current folder. It can be used to list the right pages -\n\n\n\n ```html \n<cms:pages folder=k_folder_name include_subfolders='1'></cms:pages>\n\n ``` \n### include_subfolders\n\n\n\n ```html \n<cms:pages masterpage='blog.php' folder='classic-bikes' include_subfolders='1'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php that belong to 'classic-bikes' or any of its sub-folders.\n\n\nThis parameter augments the *folder* parameter given above which only fetches pages that lie DIRECTLY within the given folder(s).\n\n\n### start_on\n\n\n\n ```html \n<cms:pages masterpage='blog.php' start_on='2010-02-01'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php that have been published on or after the 1st of February, 2010.\n\n\n### stop_before\n\n\n\n ```html \n<cms:pages masterpage='blog.php' stop_before='2010-03-01'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php that have been published before the first of March, 2010.\n\n\nThe parameters *start_on* and *stop_before* can be combined to fetch pages published betwen a particular time period. Thus -\n\n\n\n ```html \n<cms:pages masterpage='blog.php' start_on='2010-02-01' stop_before='2010-03-01'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php that have been published on or after the first of February, 2010 but before the first of March, 2010. (i.e. only during the month of February of 2010)\n\n\nIn the *archive-view* (see [**Views**](../concepts/views.html)), the *k_archive_date* and the *k_next_archive_date* are set to the first day of the archive and the first day of the next archive (month). These can be used to easily fetch pages that belong to only that archive period -\n\n\n\n ```html \n<cms:pages start_on=k_archive_date stop_before=k_next_archive_date ></cms:pages>\n\n ``` \n### show_future_entries\n\n\n\n ```html \n<cms:pages masterpage='blog.php' show_future_entries='0'></cms:pages>\n\n ``` \nThis example would fetch only those pages cloned from blog.php that have been published on or before the current date (i.e. skip those pages the publication date of whom fall in the future).\n\n\n### orderby\n\n\nThe pages fetched can be sorted and ordered according to the following fields -\n\n\n\n\n* publish_date (*default*)\n\n* page_name\n\n* page_title\n\n* modification_date\n\n* comments_count\n\n* random\n\n\n\nThus -\n\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='page_name'></cms:pages>\n\n ``` \nApart from the three fields mentioned above, any of the custom field defined in the template (i.e. the editable regions contained within the template) may be used for sorting the fetched pages. Thus, for example if the template 'blog.php' has three editable regions - *my_blog_text*, *my_blog_image* and *my_blog_author*, the following snippet -\n\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='my_blog_author'></cms:pages>\n\n ``` \nwill sort the fetched pages by the custom field named 'my_blog_author'.\n\n\n**IMP.** Though any type of editable region can be used as the orderby field, it is the 'text', 'textarea', 'dropdown' and 'radio' types that are best suited for ordering the pages.\n\n\nMultiple fields can be used together for sorting e.g.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='modification_date, page_name'></cms:pages>\n\n ``` \n### order\n\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='publish_date' order='desc'></cms:pages>\n\n ``` \nThis example would fetch all pages cloned from blog.php and arrange them in descending order of 'publish_date'.\n\n\nIf *order* parameter is not set, the default value used is 'desc'. Since the default value used for *orderby* is 'publish_date', the above snippet is equivalent to the following -\n\n\n\n ```html \n<cms:pages masterpage='blog.php'></cms:pages>\n\n ``` \nIf multiple fields have been used in the *orderby* parameter, separate sort orders can be set for each of the *orderby* field. Thus -\n\n\n\n ```html \n<cms:pages orderby='my_custom_field_1, my_custom_field_2' order='asc, desc'></cms:pages>\n\n ``` \nThe above will first sort pages in ascending order of 'my_custom_field_1'. The pages having the same value for 'my_custom_field_1' will then be sorted in descending order of 'my_custom_field_2'.\n\n\n### custom_field\n\n\nThe editable regions defined for a template can be used to fetch cloned pages that contain certain values within those editable regions (custom fields) -\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey'></cms:pages>\n\n ``` \nThis example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' contained the word 'jeffrey' anywhere within it.\n\n\nTo fetch those pages where the editable region 'my_blog_author' exactly matches the term 'jeffrey', use '==' instead of '='. Thus -\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author==jeffrey'></cms:pages>\n\n ``` \n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author==jeffrey, arthur'></cms:pages>\n\n ``` \nThis example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' exactly matches either the term 'jeffrey' or 'arthur'.\n\n\n\n Since a comma ',' is being used to separate two values, if any of the values contains a comma  \n\n within itself you'll have to 'escape' the comma by prepending it with a backward slash -  \n\n 'my_blog_text=veni, vidi, veci' - contains any of the terms veni, vidi or veci  \n\n 'my_blog_text=veni\\, vidi\\, veci' - contains the phrase 'veni, vidi, veci'.  \n\n  \n\n Similarly if any of the values contains a single quote ''' or double quote '\"', it can be escaped likewise.\n\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey'></cms:pages>\n\n ``` \nThis example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the word 'jeffrey' anywhere within it.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author!==jeffrey'></cms:pages>\n\n ``` \nThis example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT exactly match the term 'jeffrey'.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey, arthur'></cms:pages>\n\n ``` \nThis example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the words 'jeffrey' and 'arthur' anywhere within it.\n\n\n\n The above snippet might seem a little counter-intuitive.  \n\n It does not mean fetch all pages that contain neither jeffrey nor arthur. It means fetch only those pages that do not  \n\n have both jeffrey and arthur in the same field.  \n\n For how to fetch pages that contain neither jeffrey nor arthur, use the multiple fields examples given below.\n\n\n\nMultiple custom fields may be combined together with a pipe '|' character (The pipe stands for a boolean AND) -  \n\nThe same custom field may be repeated.\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey | my_blog_author!=arthur'></cms:pages>\n\n ``` \nThis example would fetch all pages that do not contain 'jeffrey' AND do not contain 'arthur' anywhere within 'my_blog_author' (i.e. have neither jeffrey nor arthur).\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_author=arthur'></cms:pages>\n\n ``` \nThis example would fetch all pages that contain 'jeffery' AND contain 'arthur' somewhere within 'my_blog_author' (i.e. contain both jeffery as well as arthur).\n\n\n\n ```html \n<cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_text=fellow countrymen'></cms:pages>\n\n ``` \nThis example would fetch all pages that contain 'jeffery' within 'my_blog_author' AND contain 'fellow countrymen' within 'my_blog_text'\n\n\nCustom fields can also be used for comparisions other than the equality and non-equality described above.  \n\nFor example, we can fetch pages that have the value of a certain editable region 'greater than' or 'less than' a particular value.\n\n\n\n Please bear in mind that if an editable region will contain values that you plan to compare in this manner  \n\n (i.e. test whether the value is greater or less than some value), most probably the value will be a 'number' -  \n\n age < 35  \n\n salary > 12500  \n\n distance >= 23.56  \n\n price = 355.39  \n\n  \n\n Telephone number, though it might contain all numeric values, is not a 'number' because you are unlikely to do something like -  \n\n telephone_number < 234567878  \n\n  \n\n For all such cases where the values will be numbers and you'd want to use them in the *custom_field* parameter, MAKE SURE to set the *search_type* parameter of the editable regions to either 'integer' (for values that will not be fractional e.g. number of bathrooms) or 'decimal' (for values that can be fractional e.g. price).  \n\n  \n\n Remember that only editable regions of types 'text', 'radio' and 'dropdown' can be made of 'integer'/'decimal' search_type.\n\n\n\nAs an example of numeric fields -\n\n\n\n ```html \n<cms:pages custom_field='distance<50 | price>=1000000 | price<=3000000'></cms:pages>\n\n ``` \nThis example would fetch all pages with custom field distance containing a value less than 50  \n\nAND custom field price 'greater than or equal to' 1000000  \n\nAND custom field price 'less than or equal to' 3000000 (i.e. price between 1000000 and 3000000)\n\n\nThe following comparisions can be done with numeric fields -\n\n\n\n\n* = (equal to)\n\n* != (not equal to)\n\n* <= (less than or equal to)\n\n* >= (greater than or equal to)\n\n* <> (not equal to)\n\n* < (less than)\n\n* > (greater than)\n\n\n\nVariables\n---------\n\n\nAs this tag iterates through all the fetched pages, at each iteration it sets all the variables that one normally finds set when that page is accessed in a *page-view* (see [**Variables available in Views**](../concepts/variables-in-views.html)).  \n\nApart from this, several variables are also set that indicate the current status of the loop.  \n\nThese variables can be used to show the fetched pages in a paginated manner.",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php.\n\nIf this parameter is skipped, the template being currently executed is used instead. Thus -\n\n\n ```html \n<cms:pages></cms:pages> \n ``` \nThis example would fetch all pages cloned from the template being currently executed.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "id",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' id='14'></cms:pages> \n ``` \nThis example would fetch only page with id of 14 that has been cloned from blog.php.\n\n\n ```html \n<cms:pages masterpage='blog.php' id='14, 13'></cms:pages> \n ``` \nThis example would fetch only pages with id of 14 or 13 that have been cloned from blog.php.\n\n\n ```html \n<cms:pages masterpage='blog.php' id='NOT 14, 13'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php except the two with the ids of 14 or 13.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "page_name",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' page_name='my_first_entry'></cms:pages> \n ``` \nThis example would fetch the page named 'my_first_entry' that has been cloned from blog.php.\n\n\n ```html \n<cms:pages masterpage='blog.php' page_name='my_first_entry, my_another_entry'></cms:pages> \n ``` \nThis example would fetch pages named 'my_first_entry' or 'my_another_entry' that have been cloned from blog.php.\n\n\n ```html \n<cms:pages masterpage='blog.php' page_name='NOT my_first_entry, my_another_entry'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php except the two named 'my_first_entry' or 'my_another_entry'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "limit",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' limit='5'></cms:pages> \n ``` \nThis example would fetch five pages cloned from blog.php. (Since no 'orderby' and 'order' parameters specified, the default values of these parameters will be used and the most recent five pages will be fetched.)\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "paginate",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' limit='5' paginate='1'></cms:pages> \n ``` \nThis example would fetch ALL pages cloned from blog.php but show only 5 at one time. To move to the next 5 or the previous 5 pages, pagination code has to be used (see [**Pagination**](../concepts/pagination.html)).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "offset",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' offset='2'></cms:pages> \n ``` \nThis example would fetch pages cloned from blog.php after skipping the first two.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "startcount",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' startcount='0'></cms:pages> \n ``` \nThe *k_count*, *k_record_from*, *k_current_record* and *k_record_to* variables (see [**Pagination**](../concepts/pagination.html)) start by default from '1'. This can be changed to any other value by setting this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "folder",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' folder='classic-bikes'></cms:pages> \n ``` \nThis example would fetch pages cloned from blog.php and belonging to folder named 'classic-bikes'.\n\n\n ```html \n<cms:pages masterpage='blog.php' folder='classic-bikes, super-bikes'></cms:pages> \n ``` \nThis example would fetch pages cloned from blog.php and belonging to folders named 'classic-bikes' or 'super-bikes'.\n\n\n ```html \n<cms:pages masterpage='blog.php' folder='NOT classic-bikes, super-bikes'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php except those belonging to folders named 'classic-bikes' or 'super-bikes'.\n\nBy default Couch will only fetch pages that lie DIRECTLY within the given folder(s).  \n To include the pages that are within the subfolders of the given folder(s), set the *include_subfolders* parameter as well.  \n See below.\n\nIn the *folder-view* (see [**Views**](../concepts/views.html)), the *k_folder_name* variable is set to the name of the current folder. It can be used to list the right pages -\n\n\n ```html \n<cms:pages folder=k_folder_name include_subfolders='1'></cms:pages> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "include_subfolders",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' folder='classic-bikes' include_subfolders='1'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php that belong to 'classic-bikes' or any of its sub-folders.\n\nThis parameter augments the *folder* parameter given above which only fetches pages that lie DIRECTLY within the given folder(s).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "start_on",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' start_on='2010-02-01'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php that have been published on or after the 1st of February, 2010.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "stop_before",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' stop_before='2010-03-01'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php that have been published before the first of March, 2010.\n\nThe parameters *start_on* and *stop_before* can be combined to fetch pages published betwen a particular time period. Thus -\n\n\n ```html \n<cms:pages masterpage='blog.php' start_on='2010-02-01' stop_before='2010-03-01'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php that have been published on or after the first of February, 2010 but before the first of March, 2010. (i.e. only during the month of February of 2010)\n\nIn the *archive-view* (see [**Views**](../concepts/views.html)), the *k_archive_date* and the *k_next_archive_date* are set to the first day of the archive and the first day of the next archive (month). These can be used to easily fetch pages that belong to only that archive period -\n\n\n ```html \n<cms:pages start_on=k_archive_date stop_before=k_next_archive_date ></cms:pages> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "show_future_entries",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' show_future_entries='0'></cms:pages> \n ``` \nThis example would fetch only those pages cloned from blog.php that have been published on or before the current date (i.e. skip those pages the publication date of whom fall in the future).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "The pages fetched can be sorted and ordered according to the following fields -\n\n\n * publish_date (*default*)\n * page_name\n * page_title\n * modification_date\n * comments_count\n * random\n \nThus -\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='page_name'></cms:pages> \n ``` \nApart from the three fields mentioned above, any of the custom field defined in the template (i.e. the editable regions contained within the template) may be used for sorting the fetched pages. Thus, for example if the template 'blog.php' has three editable regions - *my_blog_text*, *my_blog_image* and *my_blog_author*, the following snippet -\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='my_blog_author'></cms:pages> \n ``` \nwill sort the fetched pages by the custom field named 'my_blog_author'.\n\n**IMP.** Though any type of editable region can be used as the orderby field, it is the 'text', 'textarea', 'dropdown' and 'radio' types that are best suited for ordering the pages.\n\nMultiple fields can be used together for sorting e.g.\n\n\n ```html \n<cms:pages masterpage='blog.php' orderby='modification_date, page_name'></cms:pages> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "\n ```html \n<cms:pages masterpage='blog.php' orderby='publish_date' order='desc'></cms:pages> \n ``` \nThis example would fetch all pages cloned from blog.php and arrange them in descending order of 'publish_date'.\n\nIf *order* parameter is not set, the default value used is 'desc'. Since the default value used for *orderby* is 'publish_date', the above snippet is equivalent to the following -\n\n\n ```html \n<cms:pages masterpage='blog.php'></cms:pages> \n ``` \nIf multiple fields have been used in the *orderby* parameter, separate sort orders can be set for each of the *orderby* field. Thus -\n\n\n ```html \n<cms:pages orderby='my_custom_field_1, my_custom_field_2' order='asc, desc'></cms:pages> \n ``` \nThe above will first sort pages in ascending order of 'my_custom_field_1'. The pages having the same value for 'my_custom_field_1' will then be sorted in descending order of 'my_custom_field_2'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "custom_field",
                    "description": "The editable regions defined for a template can be used to fetch cloned pages that contain certain values within those editable regions (custom fields) -\n\n    <cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey'></cms:pages>\n    \n\nThis example would fetch all cloned pages of blog.php where the editable region 'my\\_blog\\_author' contained the word 'jeffrey' anywhere within it.\n\nTo fetch those pages where the editable region 'my\\_blog\\_author' exactly matches the term 'jeffrey', use '==' instead of '='. Thus -\n\n    <cms:pages masterpage='blog.php' custom_field='my_blog_author==jeffrey'></cms:pages>\n    \n\n    <cms:pages masterpage='blog.php' custom_field='my_blog_author==jeffrey, arthur'></cms:pages>\n    \n\nThis example would fetch all cloned pages of blog.php where the editable region 'my\\_blog\\_author' exactly matches either the term 'jeffrey' or 'arthur'.\n\nSince a comma ',' is being used to separate two values, if any of the values contains a comma within itself you'll have to 'escape' the comma by prepending it with a backward slash - 'my\\_blog\\_text=veni, vidi, veci' - contains any of the terms veni, vidi or veci 'my\\_blog\\_text=veni\\\\, vidi\\\\, veci' - contains the phrase 'veni, vidi, veci'.\n\nSimilarly if any of the values contains a single quote ''' or double quote '\"', it can be escaped likewise.",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:paginator",
            "description": "b'paginator\n=========\n\n\nThe **paginator** tag can be used to quickly create a 'Google' style paginator like the following -\n\n\n![](../assets/img/contents/paginator.png)\n\n\nThe paginator tag can be used within the **pages**, **comments** and **search** tags. Example -\n\n\n\n ```html \n<cms:paginator />\n\n ``` \nPlease see [**Core Concepts - Pagination**](../concepts/pagination.html) for a detailed usage example.\n\n\nParameters\n----------\n\n\n\n\n* simple\n\n* position\n\n* adjacents\n\n* prev_text\n\n* next_text\n\n\n\n### simple\n\n\nIf instead of the Google style paginator, you wish this tag to display a simple 'next' and 'prev' paginator, set this parameter to '1'.\n\n\n### position\n\n\nBy default this tag displays the paginator at the bottom after the last record. To make the paginator appear at the top, set this parameter to '1'. The default valie is '0'.\n\n\n### adjacents\n\n\nThe number of buttons that are always displayed can be changed by this parameter.\n\n\n### prev_text\n\n\nThe text used in the 'prev' button can be set by this parameter. The default is << prev' (&#171; prev)\n\n\n### next_text\n\n\nThe text used in the next' button can be set by this parameter. The default is 'next >>' (next &#187;)\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "simple",
                    "description": "If instead of the Google style paginator, you wish this tag to display a simple 'next' and 'prev' paginator, set this parameter to '1'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "position",
                    "description": "By default this tag displays the paginator at the bottom after the last record. To make the paginator appear at the top, set this parameter to '1'. The default valie is '0'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "adjacents",
                    "description": "The number of buttons that are always displayed can be changed by this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "prev_text",
                    "description": "The text used in the 'prev' button can be set by this parameter. The default is '\u00AB prev' (&#171; prev)\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "next_text",
                    "description": "The text used in the next' button can be set by this parameter. The default is 'next \u00BB' (next &#187;)\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:parentfolders",
            "description": "b'parentfolders\n=============\n\n\nThe **parentfolders** tag enumerates all the ancestor folders of a given folder.\n\n\n\n ```html \n<cms:parentfolders folder='china' >\n <a href=\"<cms:show k_folder_link/>\"><cms:show k_folder_title/></a>&nbsp;>\n</cms:parentfolders>\n\n ``` \nThe snippet above will iterate through all the ancestor folders of the folder named 'china', starting from the topmost ancestor.\n\n\nPlease see [**Core Concepts - Folders**](../concepts/using-folders.html#parents-and-children) for more info.\n\n\nParameters\n----------\n\n\n\n\n* folder\n\n* masterpage\n\n\n\n### folder\n\n\nThe folder the parents of which are to be enumerated.\n\n\n### masterpage\n\n\nThe template containing the folder above. If skipped, the template of the current executing page is used.\n\n\nVariables\n---------\n\n\nAt each iteration, this tag sets variables that describe the parent folder being enumerated.\n\n\n\n\n* k_folder_id\n\n* k_folder_name\n\n* k_folder_title\n\n* k_folder_desc\n\n* k_folder_link\n\n* k_folder_pagecount\n\n* k_folder_totalpagecount\n\n* k_level\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [folder](folder.html)\n\n* [folders](folders.html)\n\n* [listfolders](listfolders.html)\n\n* [dropdownfolders](dropdownfolders.html)\n\n* [is_ancestor](is_ancestor.html)\n\n* [breadcrumbs](breadcrumbs.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "folder",
                    "description": "The folder the parents of which are to be enumerated.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "masterpage",
                    "description": "The template containing the folder above. If skipped, the template of the current executing page is used.\n\nVariables\n---------\n\nAt each iteration, this tag sets variables that describe the parent folder being enumerated.\n\n\n * k_folder_id\n * k_folder_name\n * k_folder_title\n * k_folder_desc\n * k_folder_link\n * k_folder_pagecount\n * k_folder_totalpagecount\n * k_level\n \nRelated Tags\n------------\n\n\n * [folder](folder.html)\n * [folders](folders.html)\n * [listfolders](listfolders.html)\n * [dropdownfolders](dropdownfolders.html)\n * [is_ancestor](is_ancestor.html)\n * [breadcrumbs](breadcrumbs.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:paypal_button",
            "description": "b'paypal_button\n==============\n\n\nPlease see [**Core Concepts - PayPal**](../concepts/paypal.html) for a detailed discussion about this tag and its usage.\n\n\nParameters\n----------\n\n\n\n\n* image\n\n* processor\n\n* show_shipping\n\n\n\n### image\n\n\nThis parameter is used to set the image used as the button.  \n\nYou can either choose to use an image of your own or you may use one of the buttons made available by PayPal.\n\n\n**Using your own image -**\n\n\n\n ```html \n<cms:paypal_button image=\"<cms:show k_site_link />/images/my_button.gif\" />\n\n ``` \n**Using PayPal provided images -**\n\n\nTo use these images, set the *image* parameter to a number ranging from 0 to 8.\n\n\n\n ```html \n<cms:paypal_button image='3' />\n\n ``` \nThe numbers represent the folllowing images -\n\n\n![](../assets/img/contents/paypal_button.png)\n\n\n### processor\n\n\nThe generated button provides PayPal with a link to the page that will process the IPN sent by it. By default this will be the link of the page the button is located on. If you have placed the **paypal_processor** tag, that handles the IPN, on some other page, set that pages link as this parameter.\n\n\n### show_shipping\n\n\nIf the product being sold is not downloadable and requires a shipping address, set this parameter to '1'. This will make PayPal prompt the buyer for a shipping address.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [paypal_processor](paypal_processor.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "image",
                    "description": "This parameter is used to set the image used as the button.  \n You can either choose to use an image of your own or you may use one of the buttons made available by PayPal.\n\n**Using your own image -**\n\n\n ```html \n<cms:paypal_button image=\"<cms:show k_site_link />/images/my_button.gif\" /> \n ``` \n**Using PayPal provided images -**\n\nTo use these images, set the *image* parameter to a number ranging from 0 to 8.\n\n\n ```html \n<cms:paypal_button image='3' /> \n ``` \nThe numbers represent the folllowing images -\n\n![](../assets/img/contents/paypal_button.png)\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "processor",
                    "description": "The generated button provides PayPal with a link to the page that will process the IPN sent by it. By default this will be the link of the page the button is located on. If you have placed the **paypal_processor** tag, that handles the IPN, on some other page, set that pages link as this parameter.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "show_shipping",
                    "description": "If the product being sold is not downloadable and requires a shipping address, set this parameter to '1'. This will make PayPal prompt the buyer for a shipping address.\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [paypal_processor](paypal_processor.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:paypal_processor",
            "description": "b'paypal_processor\n=================\n\n\nThe **paypal_processor** tag can be used to process PayPal IPN.\n\n\nPlease see [**Core Concepts - PayPal**](../concepts/paypal.html) for an in-depth discussion of this tag.\n\n\nParameters\n----------\n\n\n\n\n* debug\n\n* logfile\n\n\n\n### debug\n\n\nThe processing of IPN by this tag is a background operation which makes it difficult to know what exactly is going on in case things don't work in the expected manner. By setting this parameter to '1', we can make this tag log into a file (specified by the *logfile* parameter) every step it takes while processing.\n\n\n### logfile\n\n\nThe log file into which the steps are to be logged. If this parameter is skipped, a log file named 'log.txt' in your site's root is used (created if not already existing) for logging.  \n\nYou can specify a path with the file that is relative to the site's root.\n\n\n\n ```html \n<cms:paypal_processor debug='1' logfile='paypal.log' />\n\n ``` \n\n ```html \n<cms:paypal_processor debug='1' logfile='couch/uploads/file/secure/paypal.log' />\n\n ``` \nIn the last snippet we are saving the log file in a subfolder of Couch which has a .htaccess file protecting its contents from being directly downloaded.\n\n\nVariables\n---------\n\n\nPayPal provides values pertaining to the transaction being handled through the IPN. This tag makes available those values by setting variables for each. The following are the variables that give those values -\n\n\n\n\n* pp_item_name\n\n* pp_item_number\n\n* pp_quantity\n\n* pp_mc_gross\n\n* pp_mc_currency\n\n* pp_txn_id\n\n* pp_receiver_email\n\n* pp_payer_email\n\n* pp_first_name\n\n* pp_last_name\n\n* pp_payer_business_name\n\n\n\nOnce this tag verifies that the transaction is valid, it sets an additional variable to notify this -\n\n\n\n\n* k_paypal_success\n\n\n\nApart from this variable, all the variables of the page representing the item being sold, which are normally available in the page's [**page-view**](../concepts/variables-in-views.html), are also made available.\n\n\nIf the transaction is deemed invalid, the following variable is set to notify this -\n\n\n\n\n* k_paypal_error\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [paypal_button](paypal_button.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "debug",
                    "description": "The processing of IPN by this tag is a background operation which makes it difficult to know what exactly is going on in case things don't work in the expected manner. By setting this parameter to '1', we can make this tag log into a file (specified by the *logfile* parameter) every step it takes while processing.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "logfile",
                    "description": "The log file into which the steps are to be logged. If this parameter is skipped, a log file named 'log.txt' in your site's root is used (created if not already existing) for logging.  \n You can specify a path with the file that is relative to the site's root.\n\n\n ```html \n<cms:paypal_processor debug='1' logfile='paypal.log' /> \n ``` \n\n ```html \n<cms:paypal_processor debug='1' logfile='couch/uploads/file/secure/paypal.log' /> \n ``` \nIn the last snippet we are saving the log file in a subfolder of Couch which has a .htaccess file protecting its contents from being directly downloaded.\n\nVariables\n---------\n\nPayPal provides values pertaining to the transaction being handled through the IPN. This tag makes available those values by setting variables for each. The following are the variables that give those values -\n\n\n * pp_item_name\n * pp_item_number\n * pp_quantity\n * pp_mc_gross\n * pp_mc_currency\n * pp_txn_id\n * pp_receiver_email\n * pp_payer_email\n * pp_first_name\n * pp_last_name\n * pp_payer_business_name\n \nOnce this tag verifies that the transaction is valid, it sets an additional variable to notify this -\n\n\n * k_paypal_success\n \nApart from this variable, all the variables of the page representing the item being sold, which are normally available in the page's [**page-view**](../concepts/variables-in-views.html), are also made available.\n\nIf the transaction is deemed invalid, the following variable is set to notify this -\n\n\n * k_paypal_error\n \nRelated Tags\n------------\n\n\n * [paypal_button](paypal_button.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:php",
            "description": "b'php\n===\n\n\nThe **php** tag can be used to execute raw PHP code enclosed within its opening and closing tags. The enclosed PHP code can contain Couch tags which will be fully executed to yield the final PHP code that will be eventually evaled to return the output.\n\n\nTake care not to allow execution of arbitrary PHP code as this could have security implications.\n\n\nExamples -\n\n\n\n ```html \n<cms:php> echo( \"Hello World\" ); </cms:php>\n\n ``` \n\n ```html \n<cms:set k_success2=\"<cms:php>\n echo(str_replace( \"\\n\", '|', \"<cms:show k_success/>\" ));\n</cms:php>\" />\n\n ``` \nNotice how in the last snippet above, we are using the **php** tag as a parameter of the **set** tag and how we are using the Couch **show** tag as a parameter of the PHP *str_replace* function.\n\n\nParameters\n----------\n\n\nTakes no parameters.\n\n\nVariables\n---------\n\n\nSets no variables.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:process_comment",
            "description": "b'process_comment\n================\n\n\nThe **process_comment** tag is meant to be used at the successful submission of a comments form.  \n\nIt simply tries to insert the submitted comment into the database. If it is successful in inserting the comment, the tag sets the *k_process_comment_success* variable otherwise it sets the *k_process_comment_error* variable in the context of its parent tag.\n\n\nPlease see [**Core Concepts - Comments**](../concepts/using-comments.html) for an example of this tag's usage.\n\n\nParameters\n----------\n\n\nThis tag does not accept any parameters.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own except the *k_process_comment_success* and *k_process_comment_error* variables that it sets in the context of the calling tag to signal the result of its operation.\n\n\nRelated Tags\n------------\n\n\n\n\n* [comments](comments.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:redirect",
            "description": "b'redirect\n========\n\n\nThe **redirect** tag can be used to redirect the user to a new location.\n\n\n\n ```html \n<cms:redirect url='http://www.google.com/' />\n\n ``` \n\n ```html \n<cms:redirect url=\"<cms:link masterpage=k_template_name page='test' />\" />\n\n ``` \nIn the last example above, the user is being redirected to a page named *test* that is a cloned page of the same template as the page this code is executed from (the **link** tag is being used to get the target URL).\n\n\nParameters\n----------\n\n\n\n\n* url\n\n* permanently\n\n\n\n### url\n\n\nThis is the URL of the location being redirected to.\n\n\n### permanently\n\n\nBy default, the **redirect** tag causes the server to send back a HTTP 302 redirection code. Setting this parameter to 1 will cause it to send back HTTP 301 (moved permanently) code instead.\n\n\n\n ```html \n<cms:redirect url=\"<cms:link masterpage=k_template_name page='test' />\" permanently='1' />\n\n ``` \nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "url",
                    "description": "This is the URL of the location being redirected to.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "permanently",
                    "description": "By default, the **redirect** tag causes the server to send back a HTTP 302 redirection code. Setting this parameter to 1 will cause it to send back HTTP 301 (moved permanently) code instead.\n\n\n ```html \n<cms:redirect url=\"<cms:link masterpage=k_template_name page='test' />\" permanently='1' /> \n ``` \nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:related_pages",
            "description": "b'related_pages\n==============\n\n\nPlease see [**Documentation - Core concepts - Relationships**](../concepts/relationships.html#displaying-the-related-pages) for a detailed explanation of this type of region.\n\n\nParameters\n----------\n\n\nThis tag is very closely related to the [**pages**](pages.html) tag and supports all the parameters acceptable to the [**pages**](pages.html) tag.  \n\nPlease see [**Documentation - Tags - Pages**](pages.html#parameters) for a complete list of all the supported parameters.\n\n\nAdditionaly, the following parameter is also supported\n\n\n\n\n* field (default)\n\n\n\n### field\n\n\nThis parameter specifies the name of the editable region of type [**relation**](editable/relation.html) that is used to create the associations between pages.  \n\nIf not specified, the first [**relation**](editable/relation.html) type editable region defined in the template would be used.\n\n\nVariables\n---------\n\n\nAs mentioned, this tag is very closely related to the [**pages**](pages.html) tag and sets exactly the same variables as the [**pages**](pages.html) tag.  \n\nPlease see [**Documentation - Tags - Pages**](pages.html#variables) for a complete list of all the variables set by this tag.\n\n\nRelated Tags\n------------\n\n\n\n\n* [reverse_related_pages](reverse_related_pages.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:repeat",
            "description": "b'repeat\n======\n\n\nThe **repeat** tag can be used to unconditionaly repeat all contents contained within its opening and closing tags the number of times specified by its *count* parameter. This can be used to create HTML tables etc.\n\n\n\n ```html \n<TABLE>\n<cms:repeat count='4' >\n <TR>\n <cms:repeat count='6' startcount='1' >\n <TD>\n <cms:show k_count />\n </TD>\n </cms:repeat>\n </TR>\n</cms:repeat>\n</TABLE>\n\n ``` \nIn the example above, we are using the **repeat** tag twice to create a table with 4 rows each having 6 cells. The *startcount* parameter is used to make the *k_count* variable, set by this tag to denote the number of the current iteration, to start from 1 instead of the default 0.\n\n\nParameters\n----------\n\n\n\n\n* count\n\n* startcount\n\n\n\n### count\n\n\nSets the number of times this tag repeats\n\n\n### startcount\n\n\nThis tag sets a variable named *k_count* that increases with each iteration. By default, the first iteration is numbered 0. The *startcount* parameter can be used to make *k_count* begin from any arbitrary number.\n\n\nVariables\n---------\n\n\n\n\n* k_count\n\n\n\n### k_count\n\n\nThis variable is increased by one each time the **repeat** tags repeats the loop. See the *startcount* parameter above.\n\n\nRelated Tags\n------------\n\n\n\n\n* [each](each.html)\n\n* [zebra](zebra.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "count",
                    "description": "Sets the number of times this tag repeats\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "startcount",
                    "description": "This tag sets a variable named *k_count* that increases with each iteration. By default, the first iteration is numbered 0. The *startcount* parameter can be used to make *k_count* begin from any arbitrary number.\n\nVariables\n---------\n\n\n * k_count\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:repeatable",
            "description": "b'repeatable\n==========\n\n\nPlease see [**Core Concepts - Repeatable Regions**](../concepts/repeatable-regions.html) for an in-depth discussion about this tag.\n\n\nParameters\n----------\n\n\n\n\n* name\n\n\n\n### name\n\n\nA unique name identifying the repeatable block created by this tag. This parameter is mandatory.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.  \n\nTo get the values entered into the editable regions enclosed by this block, use [**show_repeatable**](show_repeatable.html) tag.\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "A unique name identifying the repeatable block created by this tag. This parameter is mandatory.\n\nVariables\n---------\n\nThis tag does not set any variables of its own.  \n To get the values entered into the editable regions enclosed by this block, use [**show_repeatable**](show_repeatable.html) tag.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:reverse_related_pages",
            "description": "b'reverse_related_pages\n=======================\n\n\nPlease see [**Documentation - Core concepts - Relationships**](../concepts/relationships.html#displaying-the-related-pages) for a detailed explanation of this type of region.\n\n\nParameters\n----------\n\n\nThis tag is very closely related to the [**pages**](pages.html) tag and supports all the parameters acceptable to the [**pages**](pages.html) tag.  \n\nPlease see [**Documentation - Tags - Pages**](pages.html#parameters) for a complete list of all the supported parameters.\n\n\nAdditionaly, the following parameters are also supported\n\n\n\n\n* field (default)\n\n* masterpage\n\n\n\n### field\n\n\nThis parameter specifies the name of the editable region of type [**relation**](editable/relation.html) that is used to create the associations between pages.  \n\nIf not specified, the first [**relation**](editable/relation.html) type editable region defined in the template would be used.\n\n\n### masterpage\n\n\nThis parameter specifies the template that defines the editable region of type 'relation' specified in the 'field' parameter above.  \n\nThis parameter is mandatory.\n\n\nVariables\n---------\n\n\nAs mentioned, this tag is very closely related to the [**pages**](pages.html) tag and sets exactly the same variables as the [**pages**](pages.html) tag.  \n\nPlease see [**Documentation - Tags - Pages**](pages.html#variables) for a complete list of all the variables set by this tag.\n\n\nRelated Tags\n------------\n\n\n\n\n* [related_pages](related_pages.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "masterpage",
                    "description": "This parameter specifies the template that defines the editable region of type 'relation' specified in the 'field' parameter above.  \n This parameter is mandatory.\n\nVariables\n---------\n\nAs mentioned, this tag is very closely related to the [**pages**](pages.html) tag and sets exactly the same variables as the [**pages**](pages.html) tag.  \n Please see [**Documentation - Tags - Pages**](pages.html#variables) for a complete list of all the variables set by this tag.\n\nRelated Tags\n------------\n\n\n * [related_pages](related_pages.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:search",
            "description": "b'search\n======\n\n\nPlease see [**Core Concepts - Search**](../concepts/using-search.html) for an in-depth discussion of this tag.\n\n\nParameters\n----------\n\n\n\n\n* keywords\n\n* masterpage\n\n* limit\n\n\n\n### keywords\n\n\nThis parameter can set to the terms to be searched. If skipped, the **search** tag will look for a GET parameter named 's' in the querystring for the search terms.\n\n\n### masterpage\n\n\nNormally pages of all available templates will be searched for the specified terms. You can set this parameter to limit he search to only some of the templates or to exclude certain templates from the search.\n\n\n\n ```html \n<cms:search masterpage='news.php' >..</cms:search>\n\n ``` \nThis example would search only pages of news.php.\n\n\n\n ```html \n<cms:search masterpage='news.php, blog.php' >..</cms:search>\n\n ``` \nThis example would search only pages of news.php and blog.php.\n\n\n\n ```html \n<cms:search masterpage='NOT news.php' >..</cms:search>\n\n ``` \nThis example would search pages of all templates except news.php.\n\n\n### limit\n\n\n*Limit* parameter can be set to display only a limited number of pages that were found. The rest of the pages can be displayed in a paginated manner (See [**Pagination**](../concepts/pagination.html)).\n\n\nVariables\n---------\n\n\nFor each page found, all the variables normally available in its *page-view* will be available. Apart from these, the following variables are also made available -\n\n\n\n\n* k_search_title\n\n* k_search_content\n\n* k_search_excerpt\n\n* k_search_query\n\n\n\nPlease see [**Core Concepts - Search**](../concepts/using-search.html) for details.\n\n\nRelated Tags\n------------\n\n\n\n\n* [search_form](search_form.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "keywords",
                    "description": "This parameter can set to the terms to be searched. If skipped, the **search** tag will look for a GET parameter named 's' in the querystring for the search terms.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "masterpage",
                    "description": "Normally pages of all available templates will be searched for the specified terms. You can set this parameter to limit he search to only some of the templates or to exclude certain templates from the search.\n\n\n ```html \n<cms:search masterpage='news.php' >..</cms:search> \n ``` \nThis example would search only pages of news.php.\n\n\n ```html \n<cms:search masterpage='news.php, blog.php' >..</cms:search> \n ``` \nThis example would search only pages of news.php and blog.php.\n\n\n ```html \n<cms:search masterpage='NOT news.php' >..</cms:search> \n ``` \nThis example would search pages of all templates except news.php.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "limit",
                    "description": "*Limit* parameter can be set to display only a limited number of pages that were found. The rest of the pages can be displayed in a paginated manner (See [**Pagination**](../concepts/pagination.html)).\n\nVariables\n---------\n\nFor each page found, all the variables normally available in its *page-view* will be available. Apart from these, the following variables are also made available -\n\n\n * k_search_title\n * k_search_content\n * k_search_excerpt\n * k_search_query\n \nPlease see [**Core Concepts - Search**](../concepts/using-search.html) for details.\n\nRelated Tags\n------------\n\n\n * [search_form](search_form.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:search_form",
            "description": "b'search_form\n============\n\n\nThe **search_form** is a simple tag that creates a form that could be used with the **search** tag.\n\n\nExamples -\n\n\n\n ```html \n<cms:search_form />\n\n ``` \n\n ```html \n<cms:search_form msg='Search' processor=\"<cms:show k_site_link/>search.php\" />\n\n ``` \nParameters\n----------\n\n\n\n\n* msg\n\n* processor\n\n\n\n### msg\n\n\nThis parameter sets the message displayed within the search textbox. By default the string '*Search..*' gets displayed.\n\n\n### processor\n\n\nThis parameter sets the *action* parameter of the generated form. This needs to be set to the URL of the page that has the **pages** tag on it.  \n\nIf left empty, the **pages** tag is expected to be on the same page as the **search_form** tag.\n\n\nVariables\n---------\n\n\nThis tag sets no variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [search](search.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "msg",
                    "description": "This parameter sets the message displayed within the search textbox. By default the string '*Search..*' gets displayed.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "processor",
                    "description": "This parameter sets the *action* parameter of the generated form. This needs to be set to the URL of the page that has the **pages** tag on it.  \n If left empty, the **pages** tag is expected to be on the same page as the **search_form** tag.\n\nVariables\n---------\n\nThis tag sets no variables of its own.\n\nRelated Tags\n------------\n\n\n * [search](search.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:send_mail",
            "description": "b'send_mail\n==========\n\n\nThe **send_mail** tag, as the name suggests, can be used to send emails.\n\n\n\n ```html \n<cms:send_mail from='admin@mysite.com' to='johndoe@gmail.com' subject='Feedback from your site'>\nAnything here (between the opening and closing tags of send_mail)\nwill form the body of the email that will be sent.\n</cms:send_mail>\n\n ``` \nAnything enclosed within the opening and closing tags will form the body of the message to be sent.  \n\nEach line should be separated with a LF (\\n). Lines should not be larger than 70 characters.\n\n\nThere is no provision (yet) for attachments.\n\n\nParameters\n----------\n\n\n\n\n* from\n\n* to\n\n* cc\n\n* bcc\n\n* subject\n\n* debug\n\n* logfile\n\n* html\n\n\n\n### from\n\n\nSender's email address.\n\n\n### to\n\n\nReceiver, or receivers of the mail.\n\n\nThe formatting of this string must comply with [RFC 2822](http://www.faqs.org/rfcs/rfc2822). Some examples are:\n\n\nuser@example.com  \n\nuser@example.com, anotheruser@example.com  \n\nUser <user@example.com>  \n\nUser <user@example.com>, Another User <anotheruser@example.com>\n\n\n### cc\n\n\nCarbon copy receivers.\n\n\n### bcc\n\n\nBlind carbon copy receivers.\n\n\n### subject\n\n\nSubject of the email.\n\n\n### debug\n\n\nIf set to '1', all send emails will be logged. The file used for logging can be set by the *logfile* parameter below.\n\n\n### logfile\n\n\nThis can be set to the log file used to save all send emails. The file can be given a path relative to the site's root. If skipped, a log file named 'log.txt' in the site's root will be used (will be created if not present).\n\n\n### html\n\n\nIf set to '1', HTML will be allowed in the body of the message.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\n'",
            "attributes": [
                {
                    "name": "from",
                    "description": "Sender's email address.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "to",
                    "description": "Receiver, or receivers of the mail.\n\nThe formatting of this string must comply with [\u00BB RFC 2822](http://www.faqs.org/rfcs/rfc2822). Some examples are:\n\nuser@example.com  \n user@example.com, anotheruser@example.com  \n User <user@example.com>  \n User <user@example.com>, Another User <anotheruser@example.com>\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "cc",
                    "description": "Carbon copy receivers.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "bcc",
                    "description": "Blind carbon copy receivers.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "subject",
                    "description": "Subject of the email.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "debug",
                    "description": "If set to '1', all send emails will be logged. The file used for logging can be set by the *logfile* parameter below.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "logfile",
                    "description": "This can be set to the log file used to save all send emails. The file can be given a path relative to the site's root. If skipped, a log file named 'log.txt' in the site's root will be used (will be created if not present).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "html",
                    "description": "If set to '1', HTML will be allowed in the body of the message.\n\nVariables\n---------\n\nThis tag does not set any variables of its own.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:set",
            "description": "b'set\n===\n\n\nThe **Set** tag is used to put some value in a variable. The variable, if not already present, is created.  \n\n(This tag is the counterpart of [**Show**](show.html) tag which is used to display set variables)\n\n\nThe following example will create a variable called 'greeting' and set its value to 'Hello'\n\n\n\n ```html \n<cms:set greeting='Hello' />\n\n ``` \nThe following will create another variable known as 'message' and set its value to 'Hello'\n\n\n\n ```html \n<cms:set message=greeting />\n\n ``` \nAs with all other tags, nested tags may be used in parameters (taking care to use double quotes).  \n\nThe following will set the value of 'message' to 'Hello World'.\n\n\n\n ```html \n<cms:set message=\"<cms:show greeting /> World\" />\n\n ``` \nA valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.\n\n\n**IMP.** **Set** cannot be used to set system variables (i.e. those that begin with prefix 'k_').\n\n\nParameters\n----------\n\n\nThe first parameter, as illustrated above, is mandatory and is used to set a named variable to a certain value.  \n\nThe tag also uses an optional unnamed (i.e. only the value can be provided) second parameter that defines the **scope** within which the variable will be set.\n\n\n\n ```html \n<cms:set message='hello' scope='global' />\n\n ``` \nThe above is the same as\n\n\n\n ```html \n<cms:set message='hello' 'global' />\n\n ``` \nHere 'global' defines the scope of 'message' variable\n\n\nThe valid values for this second parameter are -\n\n\n\n\n* local\n\n* parent\n\n* global\n\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.",
            "attributes": []
        },
        {
            "name": "cms:set_cookie",
            "description": "b'set_cookie\n===========\n\n\nThe **set_cookie** tag can be used to set a cookie with a name and value. An expiration time can also be set for the cookie.\n\n\n\n ```html \n<cms:set_cookie 'my_test_cookie' 'hello world' />\n\n ``` \n\n ```html \n<cms:set_cookie name='my_test_cookie' value='hello world' />\n\n ``` \nParameters\n----------\n\n\n\n\n* name\n\n* value\n\n* expire\n\n\n\n### name\n\n\nThe name of the cookie.\n\n\n### value\n\n\nThe value of the cookie. This value is stored on the clients computer.\n\n\n### expire\n\n\nThe time in seconds for the cookie to expire. If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).\n\n\n\n ```html \n<cms:set_cookie 'my_test_cookie' value='hello world' expire='86400' />\n\n ``` \nThe code above will set the expiration time of the cookie to 1 day (24 * 60 * 60).\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [get_cookie](get_cookie.html)\n\n* [delete_cookie](delete_cookie.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "The name of the cookie.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "value",
                    "description": "The value of the cookie. This value is stored on the clients computer.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "expire",
                    "description": "The time in seconds for the cookie to expire. If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).\n\n\n ```html \n<cms:set_cookie 'my_test_cookie' value='hello world' expire='86400' /> \n ``` \nThe code above will set the expiration time of the cookie to 1 day (24 * 60 * 60).\n\nVariables\n---------\n\nThis tag is self-closing and does not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [get_cookie](get_cookie.html)\n * [delete_cookie](delete_cookie.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:show",
            "description": "b'show\n====\n\n\nThe **Show** tag is used to display something on the page.  \n\nIt could be a literal string e.g.\n\n\n\n ```html \n<cms:show 'Hello World' />\n\n ``` \nor a variable (both system variables as well as all the editable regions on the page) e.g.\n\n\n\n ```html \n<cms:show k_page_title />\n<cms:show my_intro />\n\n ``` \nParameters\n----------\n\n\nNo named parameters. Uses the first provided parameter.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [get](get.html)\n\n* [set](set.html)\n\n* [get_custom_field](get_custom_field.html)\n\n* [pages](pages.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:show_repeatable",
            "description": "b'show_repeatable\n================\n\n\nPlease see [**Core Concepts - Repeatable Regions**](../concepts/repeatable-regions.html#displaying-the-values) for an in-depth discussion about this tag.\n\n\nParameters\n----------\n\n\n\n\n* var (default)\n\n* startcount\n\n\n\n### var\n\n\nDefault parameter (usually left unnamed). The name of the [**repeatable**](repeatable.html) tag defining the repeatable regions.\n\n\n\n ```html \n<cms:show_repeatable 'my_multiple_images' >\n <b>Image: <img src=\"<cms:show my_image />\" /> <br/>\n <b>Desc:</b> <cms:show my_desc />\n <hr>\n</cms:show_repeatable>\n\n ``` \nIn the snippet above the string 'my_multiple_images' is the name of a [**repeatable**](repeatable.html) tag.\n\n\n### startcount\n\n\nOne of the variables set by this tag is *k_count*. The value of this variable increases with each iteration. By default, the first iteration is numbered 1. The *startcount* parameter can be used to make *k_count* begin from any arbitrary number.\n\n\nVariables\n---------\n\n\n\n\n* k_count\n\n* k_total_records\n\n\n\n### k_count\n\n\nAs this tag iterates through the rows of repeated regions, this variable keeps track of the number of current iteration.  \n\nBy default, the first iteration is numbered from '1' but the **startcount** parameter mentioned above can be used to change this.\n\n\n### k_total_records\n\n\nThe total number of rows that will be iterated.\n\n\n'",
            "attributes": [
                {
                    "name": "startcount",
                    "description": "One of the variables set by this tag is *k_count*. The value of this variable increases with each iteration. By default, the first iteration is numbered 1. The *startcount* parameter can be used to make *k_count* begin from any arbitrary number.\n\nVariables\n---------\n\n\n * k_count\n * k_total_records\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:sub",
            "description": "b'sub\n===\n\n\nThe **sub** tag accepts two parameters and returns as its output the value obtained after subtracting the second parameter from the first.  \n\nThe parameters may be literal strings, variables or output of other tags.\n\n\n\n ```html \n<cms:sub my_count '1' />\n\n ``` \nThe snippet above subtracts 1 from what ever value is contained within *my_count* variable and outputs the resulting value.\n\n\nParameters\n----------\n\n\nThe tag expects two parameters as operands for subtraction.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [add](add.html)\n\n* [mul](mul.html)\n\n* [div](div.html)\n\n* [mod](mod.html)\n\n* [incr](incr.html)\n\n* [decr](decr.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:template",
            "description": "b'template\n========\n\n\nThe **template** tag can be used to modify the attributes of the template this tag is used on.  \n\nIt is customary to place this tag somewhere at the beginning of a template. This tag outputs nothing and this makes it a good place to put the structural Couch tags, like **editable** and **folders**, within it.\n\n\nParameters\n----------\n\n\n\n\n* title\n\n* clonable\n\n* access_level\n\n* executable\n\n* commentable\n\n* hidden\n\n* order\n\n\n\n### title\n\n\nThis parameter is used to set the display name of the template in Couch admin panel.  \n\nIf this parameter is skipped, the name of the template (will have the .php extension) is used instead.\n\n\n### clonable\n\n\nThis parameter needs to be set to '1' in order to declare a template clonable i.e. allow multiple pages to be cloned out of it.\n\n\n### access_level\n\n\nThis parameter can be set to restrict the access to the template and all its cloned pages to users of certain access level. For details, please see 'Template level access' in [Users and Access Control](../concepts/users.html).\n\n\n### executable\n\n\nIf this parameter is set to '0', non-super-admin users will be unable to access the template and all its cloned pages via their URLs. This is usually done when a template is used only to define editable regions that will be used to capture data in the admin panel. The captured data is then usually displayed on other templates by the use of either [**pages**](pages.html) tag or [**get_custom_field**](get_custom_field.html) tag.\n\n\n### commentable\n\n\nTo allow users to comment on pages of this template, this parameter has to be set to '1'. See [**Comments**](../concepts/using-comments.html).\n\n\n### hidden\n\n\nCertain templates, like the ones used for RSS feeds and custom 404 page, might not contain any editable regions at all. Since there is nothing that the non-super-admins are supposed to enter in these templates as data, it is advisable to hide the names of such templates from them in the admin panel. This can be done by setting this parameter to '1'.\n\n\n### order\n\n\nBy default, all the templates defined for a web site are displayed in the admin panel in the order of their creation, the oldest one being on the top. This order can be manipulated by setting this parameter for each template. The smaller the number set as the order, the higher up the template appears in the list.\n\n\nVariables\n---------\n\n\nDoes not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [templates](templates.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "title",
                    "description": "This parameter is used to set the display name of the template in Couch admin panel.  \n If this parameter is skipped, the name of the template (will have the .php extension) is used instead.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "clonable",
                    "description": "This parameter needs to be set to '1' in order to declare a template clonable i.e. allow multiple pages to be cloned out of it.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "access_level",
                    "description": "This parameter can be set to restrict the access to the template and all its cloned pages to users of certain access level. For details, please see 'Template level access' in [Users and Access Control](../concepts/users.html).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "executable",
                    "description": "If this parameter is set to '0', non-super-admin users will be unable to access the template and all its cloned pages via their URLs. This is usually done when a template is used only to define editable regions that will be used to capture data in the admin panel. The captured data is then usually displayed on other templates by the use of either [**pages**](pages.html) tag or [**get_custom_field**](get_custom_field.html) tag.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "commentable",
                    "description": "To allow users to comment on pages of this template, this parameter has to be set to '1'. See [**Comments**](../concepts/using-comments.html).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "hidden",
                    "description": "Certain templates, like the ones used for RSS feeds and custom 404 page, might not contain any editable regions at all. Since there is nothing that the non-super-admins are supposed to enter in these templates as data, it is advisable to hide the names of such templates from them in the admin panel. This can be done by setting this parameter to '1'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "By default, all the templates defined for a web site are displayed in the admin panel in the order of their creation, the oldest one being on the top. This order can be manipulated by setting this parameter for each template. The smaller the number set as the order, the higher up the template appears in the list.\n\nVariables\n---------\n\nDoes not set any variables of its own.\n\nRelated Tags\n------------\n\n\n * [templates](templates.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:templates",
            "description": "b'templates\n=========\n\n\nThe **templates** tag can be used to enumerate all the templates that are managed by Couch.\n\n\nExample -\n\n\n\n ```html \n<cms:templates show_hidden='1' order='desc'>\n <cms:dump />\n</cms:templates>\n\n ``` \nParameters\n----------\n\n\n\n\n* show_hidden\n\n* orderby\n\n* order\n\n\n\n### show_hidden\n\n\nBy default the hidden templates are not enumerated. This can be changed by setting this parameter to 1.\n\n\n### orderby\n\n\nThe templates can be ordered by one of these attributes - *name*, *title* or *order*. The default is *order*.\n\n\n### order\n\n\nCan be set to either *asc* or *desc*.\n\n\nVariables\n---------\n\n\n\n\n* k_total\n\n* k_template_id\n\n* k_template_name\n\n* k_template_title\n\n* k_template_desc\n\n* k_template_access_level\n\n* k_template_is_clonable\n\n* k_template_is_commentable\n\n* k_template_is_executable\n\n* k_template_is_hidden\n\n* k_template_order\n\n* k_template_link\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [pages](pages.html)\n\n* [folders](folders.html)\n\n* [archives](archives.html)\n\n* [comments](comments.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "show_hidden",
                    "description": "By default the hidden templates are not enumerated. This can be changed by setting this parameter to 1.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "The templates can be ordered by one of these attributes - *name*, *title* or *order*. The default is *order*.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "Can be set to either *asc* or *desc*.\n\nVariables\n---------\n\n\n * k_total\n * k_template_id\n * k_template_name\n * k_template_title\n * k_template_desc\n * k_template_access_level\n * k_template_is_clonable\n * k_template_is_commentable\n * k_template_is_executable\n * k_template_is_hidden\n * k_template_order\n * k_template_link\n \nRelated Tags\n------------\n\n\n * [pages](pages.html)\n * [folders](folders.html)\n * [archives](archives.html)\n * [comments](comments.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:thumbnail",
            "description": "b'thumbnail\n=========\n\n\nTag **thumbnail** can be used as an alternative to editable region of type [**thumbnail**](editable/thumbnail.html).  \n\nUnlike the editable region, this method is a simple tag and does not create anything to edit within the admin-panel and thus might (in certain situations) prove to be more flexible and dynamic than the former.\n\n\nThe immediate reason for the introduction of this tag is to use it with [**repeatable regions**](../concepts/repeatable-regions.html) as its editable region counterpart does not support being repeated.\n\n\n### Usage\n\n\nGiven the full path of an image, as in the following snippet\n\n\n\n ```html \n<cms:thumbnail src='http://www.mysite.com/couch/uploads/image/test.jpg' width='150' />\n\n ``` \nthis tag will create a thumbnail of the specified image (in the same folder) and output the thumbnail's path.\n\n\nThe proper way to use this tag's output in a template would be in tandem with the HTML 'img' tag - something like this\n\n\n\n ```html \n<img src=\"<cms:thumbnail src='http: //www.mysite.com/couch/uploads/image/test.jpg' width='150' />\" />\n\n ``` \nInstead of hardcoding the source image's path, as we did above, we are more likely to provide the output of an editable region of type [**image**](editable/image.html) as this tag's source.\n\n\nIf, for example, the name of an [**image**](editable/image.html) type region is 'my_image', this is how we would output the image on the front-end\n\n\n\n ```html \n<img src=\"<cms:show my_image />\" />\n\n ``` \nand this is how we create and output the above image's thumbnail\n\n\n\n ```html \n<img src=\"<cms:thumbnail my_image width='150' />\" />\n\n ``` \nParameters\n----------\n\n\n\n\n* src\n\n* width\n\n* height\n\n* enforce_max\n\n\n\n\n ```html \n<img src=\"<cms:thumbnail my_image width='150' height='150' enforce_max='1' />\" />\n\n ``` \nThese parameters work exactly the same way as the parameters with the same names work for editable region of type [**thumbnail**](editable/thumbnail.html).  \n\nPlease see [**Editable region - thumbnail**](editable/thumbnail.html#parameters) for details of the parameters.\n\n\nVariables\n---------\n\n\nThis tag does not set any variables of its own.\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:weeks",
            "description": "b'weeks\n=====\n\n\nThe **weeks** tag works only within the **calendar** tag. It enumerates all the weeks within the month being handled by the **calendar** tag.\n\n\nPlease see [**Core Concepts - Events Calendar**](../concepts/events-calendar.html) for a working example of this tag.\n\n\nParameters\n----------\n\n\nThis tag takes no parameters.\n\n\nVariables\n---------\n\n\n\n\n* k_week_num\n\n\n\n### k_week_num\n\n\nIs set to the number of the week being enumerated. Can range from 4 to 6.\n\n\nRelated Tags\n------------\n\n\n\n\n* [calendar](calendar.html)\n\n* [days](days.html)\n\n* [entries](entries.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "k_week_num",
                    "description": "Is set to the number of the week being enumerated. Can range from 4 to 6.\n\nRelated Tags\n------------\n\n\n * [calendar](calendar.html)\n * [days](days.html)\n * [entries](entries.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:zebra",
            "description": "b'zebra\n=====\n\n\nThe **zebra** tag, when used within any Couch tag that repeats its contents (e.g. repeat, while, pages, folders, templates etc.), outputs its first parameter at the first iteration, its second parameter at the second iteration and so on. If the number of iterations exceed the number of its parameters, it wraps around and starts from the first parameter.\n\n\nThe **zebra** tag can be used to output a different class to every alternate row of a table, thus creating a 'zebra' striping that gives this tag its name.\n\n\nSome examples:\n\n\n\n ```html \n<cms:repeat count='5'>\n <cms:zebra 'one' 'two' 'three' /><br>\n</cms:repeat>\n\n ``` \nThe snippet above will output -\n\n\n\n ```html \none\ntwo\nthree\none\ntwo\n\n ``` \nA more practical example -\n\n\n\n ```html \n<TABLE>\n<cms:repeat count='4' >\n <TR class=\"<cms:zebra 'row' 'alternate_row' />\">\n <cms:repeat count='6' startcount='1' >\n <TD>\n <cms:show k_count />\n </TD>\n </cms:repeat>\n </TR>\n</cms:repeat>\n</TABLE>\n\n ``` \nIn the snippet above, we are using the repeat tag to create a table. The zebra tag will alternately output 'row' and 'alternate_row' as class names for the table rows. This can be used to color alternate rows differently.\n\n\nParameters\n----------\n\n\nThis tag can accept any number of unnamed parameters.\n\n\nVariables\n---------\n\n\nThis tag is self-closing and does not set any variables of its own.\n\n\nRelated Tags\n------------\n\n\n\n\n* [repeat](repeat.html)\n\n* [each](each.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:editable",
            "description": "b'editable\n========\n\n\nPlease see [**Core Concepts - Editable Regions**](../concepts/editable-regions.html) for an introduction to the Editable tag.\n\n\nParameters\n----------\n\n\nThe following are the parameters that are **common** to all the *types* of editable regions. The parameters that are **specific** to individual *types* are discussed along with that *type* of editable region.\n\n\n\n\n* name\n\n* label\n\n* desc\n\n* type\n\n* order\n\n* group\n\n* searchable\n\n* search_type\n\n* hidden\n\n* required\n\n* validator\n\n* validator_msg\n\n* separator\n\n* val_separator\n\n\n\n### name\n\n\nThe only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.\n\n\n### label\n\n\nLabel instructs Couch to display a more user friendly name than the *name* attribute above. Unlike *name*, it has no limitation of the type of characters that can be used within it. If *label* attribute is not supplied, Couch by default uses the *name* as the *label*. For usage see discussion above.\n\n\n### desc\n\n\nThis can be used to provide the user some more information about the editable region. For usage see discussion above.\n\n\n### type\n\n\nThe following are the different types of editable regions that can be created (*click for full details*).\n\n\n\n\n* [text](editable/text.html)\n\n* [password](editable/password.html)\n\n* [textarea](editable/textarea.html)\n\n* [richtext](editable/richtext.html)\n\n* [image](editable/image.html)\n\n* [thumbnail](editable/thumbnail.html)\n\n* [file](editable/file.html)\n\n* [radio](editable/radio.html)\n\n* [checkbox](editable/checkbox.html)\n\n* [dropdown](editable/dropdown.html)\n\n* [group](editable/group.html)\n\n* [message](editable/message.html)\n\n* [nicedit](editable/nicedit.html)\n\n* [relation](editable/relation.html)\n\n\n\n### order\n\n\nBy default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the *order* parameter. For example -\n\n\n\n ```html \norder='3'\n\n ``` \nThe higher the order number, the lower the editable region appears on the page (think about it as the higher number being ***heavier***). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.\n\n\nThe default order number given to all editable regions is '0'.\n\n\n### group\n\n\nRelated editable regions can be grouped together by setting the *group* parameter of each region to the name of an another editable region of type [**group**](editable/group.html). For example -\n\n\n\n ```html \ngroup='paypal_group'\n\n ``` \n- where paypal_group is the name of an editable region of type [**group**](editable/group.html).\n\n\n### searchable\n\n\n\n ```html \nsearchable='0'\n\n ``` \nSetting the *searchable* parameter to '0' for an editable region will exclude its contents from search results.\n\n\n### search_type\n\n\n\n ```html \nsearch_type='decimal'\n\n ``` \n*search_type* parameter determines how the values contained within an editable region are *sorted* and *compared*. Couch recognizes three different search_types -\n\n\n\n\n* text\n\n* integer\n\n* decimal\n\n\n\nThe default *search_type* of all editable regions is *text*. For editable regions of type [**text**](editable/text.html), [**radio**](editable/radio.html) and [**dropdown**](editable/dropdown.html), the *search_type* can be changed to *integer* or *decimal* if the values contained within them would be numeric.\n\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See [**Pages**](pages.html#custom_field).\n\n\n### hidden\n\n\n\n ```html \nhidden='1'\n\n ``` \n*hidden* parameter can be set to '1' to supress the output of an editable region that has been defined outside the [**Template**](template.html) tag.\n\n\n### required\n\n\n\n ```html \nrequired='1'\n\n ``` \nSetting the *required* parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.\n\n\nIf an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the *validator_msg* parameter described below.\n\n\n### validator\n\n\nCouch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -\n\n\n#### min_len\n\n\n\n ```html \nvalidator='min_len=6'\n\n ``` \nIn the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.\n\n\n#### max_len\n\n\n\n ```html \nvalidator='max_len=20'\n\n ``` \nIn the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.\n\n\n#### exact_len\n\n\n\n ```html \nvalidator='exact_len=10'\n\n ``` \nIn the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.\n\n\n#### alpha\n\n\n\n ```html \nvalidator='alpha'\n\n ``` \nIn the example above the only characters allowed in the input would be **a to z** and **A to Z**.\n\n\n#### alpha_num\n\n\n\n ```html \nvalidator='alpha_num'\n\n ``` \nIn the example above the only characters allowed in the input would be **a to z**, **A to Z** and numbers **0 to 9**.\n\n\n#### integer\n\n\n\n ```html \nvalidator='integer'\n\n ``` \nIn the example above only numbers **0 to 9** and the **negative sign** '**-**' are allowed. e.g.\n\n\n\n ```html \n-3, -2, -1, 0, 1, 2, 3\n\n ``` \n#### non_negative_integer\n\n\n\n ```html \nvalidator='non_negative_integer'\n\n ``` \nIn the example above only numbers **0 to 9** are allowed. e.g.\n\n\n\n ```html \n0, 1, 2, 3\n\n ``` \n#### non_zero_integer\n\n\n\n ```html \nvalidator='non_zero_integer'\n\n ``` \nIn the example above only numbers **1 to 9** are allowed. e.g.\n\n\n\n ```html \n1, 2, 3\n\n ``` \n#### decimal\n\n\n\n ```html \nvalidator='decimal'\n\n ``` \nIn the example above only numeric values are allowed. e.g.\n\n\n\n ```html \n-3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45\n\n ``` \n#### non_negative_decimal\n\n\n\n ```html \nvalidator='non_negative_decimal'\n\n ``` \nIn the example above only non-negative numeric values are allowed. e.g.\n\n\n\n ```html \n0, 0.02, 1, 2, 3.45\n\n ``` \n#### non_zero_decimal\n\n\n\n ```html \nvalidator='non_zero_decimal'\n\n ``` \nIn the example above only numeric values larger than 0 are allowed. e.g.\n\n\n\n ```html \n0.02, 1, 2, 3.45\n\n ``` \n#### email\n\n\n\n ```html \nvalidator='email'\n\n ``` \nIn the example above only a valid email address is allowed.\n\n\n#### url\n\n\n\n ```html \nvalidator='url'\n\n ``` \nIn the example above only a valid URL is allowed.\n\n\n#### matches_field\n\n\nThis is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).\n\n\n\n ```html \nvalidator='matches_field=my_password'\n\n ``` \nIn the example above, Couch will allow input only if it matches that in another editable region named *my_password*.\n\n\n#### regex\n\n\nThis is a very powerful option and can actually mimic all the validators described above (and much more).  \n\nIt requires a little knowledge of Regular Expressions (as understood by PHP), though.\n\n\n\n ```html \nvalidator='regex=/(cat|dog)$/i'\n\n ``` \nIn the silly example, the input is considered valid only if it ends in either *cat* or *dog*.\n\n\n\n Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -  \n\n  \n\n\n ```html \nvalidator='alpha_num | min_len=6 | max_len=14'\n ``` \n\n\n\n\n### validator_msg\n\n\nWhen a validator mentioned above fails (this includes the *required* parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.\n\n\nYou can display your own custom message instead by setting the *validator_msg* parameter. For example, the following is a custom message that is displayed when a *required* region is left empty -\n\n\n\n ```html \nvalidator_msg='required=What! You think you can get away with leaving this empty?'\n\n ``` \n\n Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -  \n\n  \n\n\n ```html \nvalidator_msg='required=Please enter something | min_len=Too short!'\n ``` \n\n\n\n\n### separator\n\n\n### val_separator\n\n\nThe use of '|' (pipe) character as the default separator between *validators* and *validator_msg* parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -\n\n\n\n ```html \nvalidator='regex=/(cat|dog)$/i'\n\n ``` \n- the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.\n\n\nIn such cases, the default separator and value separator can be set to any other character using the *separator* and *val_separator* parameters. For example -\n\n\n\n ```html \nseparator='#'\nval_separator=':'\n\n ``` \nWith the *separator* and the *val_separator* having changed, the regex validator can now be combined with other validator thus -\n\n\n\n ```html \nvalidator='regex:/(cat|dog)$/i # min_len:14'\n\n ``` \nThe *validator_msg* will now become -\n\n\n\n ```html \nvalidator_msg='required:Please enter something # min_len:Too short!'\n\n ``` \nVariables\n---------\n\n\nA variable by the name of the editable region becomes available in the context the region is being used in.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable (text)](editable/text.html)\n\n* [editable (password)](editable/password.html)\n\n* [editable (textarea)](editable/textarea.html)\n\n* [editable (richtext)](editable/richtext.html)\n\n* [editable (image)](editable/image.html)\n\n* [editable (thumbnail)](editable/thumbnail.html)\n\n* [editable (file)](editable/file.html)\n\n* [editable (radio)](editable/radio.html)\n\n* [editable (checkbox)](editable/checkbox.html)\n\n* [editable (dropdown)](editable/dropdown.html)\n\n* [editable (group)](editable/group.html)\n\n* [editable (message)](editable/message.html)\n\n* [editable (nicedit)](editable/nicedit.html)\n\n* [editable (relation)](editable/relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "label",
                    "description": "Label instructs Couch to display a more user friendly name than the *name* attribute above. Unlike *name*, it has no limitation of the type of characters that can be used within it. If *label* attribute is not supplied, Couch by default uses the *name* as the *label*. For usage see discussion above.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "desc",
                    "description": "This can be used to provide the user some more information about the editable region. For usage see discussion above.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "type",
                    "description": "The following are the different types of editable regions that can be created (*click for full details*).\n\n\n * [text](editable/text.html)\n * [password](editable/password.html)\n * [textarea](editable/textarea.html)\n * [richtext](editable/richtext.html)\n * [image](editable/image.html)\n * [thumbnail](editable/thumbnail.html)\n * [file](editable/file.html)\n * [radio](editable/radio.html)\n * [checkbox](editable/checkbox.html)\n * [dropdown](editable/dropdown.html)\n * [group](editable/group.html)\n * [message](editable/message.html)\n * [nicedit](editable/nicedit.html)\n * [relation](editable/relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order",
                    "description": "By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the *order* parameter. For example -\n\n\n ```html \norder='3' \n ``` \nThe higher the order number, the lower the editable region appears on the page (think about it as the higher number being ***heavier***). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.\n\nThe default order number given to all editable regions is '0'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "group",
                    "description": "Related editable regions can be grouped together by setting the *group* parameter of each region to the name of an another editable region of type [**group**](editable/group.html). For example -\n\n\n ```html \ngroup='paypal_group' \n ``` \n- where paypal_group is the name of an editable region of type [**group**](editable/group.html).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "searchable",
                    "description": "\n ```html \nsearchable='0' \n ``` \nSetting the *searchable* parameter to '0' for an editable region will exclude its contents from search results.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "search_type",
                    "description": "\n ```html \nsearch_type='decimal' \n ``` \n*search_type* parameter determines how the values contained within an editable region are *sorted* and *compared*. Couch recognizes three different search_types -\n\n\n * text\n * integer\n * decimal\n \nThe default *search_type* of all editable regions is *text*. For editable regions of type [**text**](editable/text.html), [**radio**](editable/radio.html) and [**dropdown**](editable/dropdown.html), the *search_type* can be changed to *integer* or *decimal* if the values contained within them would be numeric.\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See [**Pages**](pages.html#custom_field).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "hidden",
                    "description": "\n ```html \nhidden='1' \n ``` \n*hidden* parameter can be set to '1' to supress the output of an editable region that has been defined outside the [**Template**](template.html) tag.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "required",
                    "description": "\n ```html \nrequired='1' \n ``` \nSetting the *required* parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.\n\nIf an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the *validator_msg* parameter described below.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "validator",
                    "description": "Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -\n\n#### min_len\n\n\n ```html \nvalidator='min_len=6' \n ``` \nIn the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.\n\n#### max_len\n\n\n ```html \nvalidator='max_len=20' \n ``` \nIn the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.\n\n#### exact_len\n\n\n ```html \nvalidator='exact_len=10' \n ``` \nIn the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.\n\n#### alpha\n\n\n ```html \nvalidator='alpha' \n ``` \nIn the example above the only characters allowed in the input would be **a to z** and **A to Z**.\n\n#### alpha_num\n\n\n ```html \nvalidator='alpha_num' \n ``` \nIn the example above the only characters allowed in the input would be **a to z**, **A to Z** and numbers **0 to 9**.\n\n#### integer\n\n\n ```html \nvalidator='integer' \n ``` \nIn the example above only numbers **0 to 9** and the **negative sign** '**-**' are allowed. e.g.\n\n\n ```html \n-3, -2, -1, 0, 1, 2, 3 \n ``` \n#### non_negative_integer\n\n\n ```html \nvalidator='non_negative_integer' \n ``` \nIn the example above only numbers **0 to 9** are allowed. e.g.\n\n\n ```html \n0, 1, 2, 3 \n ``` \n#### non_zero_integer\n\n\n ```html \nvalidator='non_zero_integer' \n ``` \nIn the example above only numbers **1 to 9** are allowed. e.g.\n\n\n ```html \n1, 2, 3 \n ``` \n#### decimal\n\n\n ```html \nvalidator='decimal' \n ``` \nIn the example above only numeric values are allowed. e.g.\n\n\n ```html \n-3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45 \n ``` \n#### non_negative_decimal\n\n\n ```html \nvalidator='non_negative_decimal' \n ``` \nIn the example above only non-negative numeric values are allowed. e.g.\n\n\n ```html \n0, 0.02, 1, 2, 3.45 \n ``` \n#### non_zero_decimal\n\n\n ```html \nvalidator='non_zero_decimal' \n ``` \nIn the example above only numeric values larger than 0 are allowed. e.g.\n\n\n ```html \n0.02, 1, 2, 3.45 \n ``` \n#### email\n\n\n ```html \nvalidator='email' \n ``` \nIn the example above only a valid email address is allowed.\n\n#### url\n\n\n ```html \nvalidator='url' \n ``` \nIn the example above only a valid URL is allowed.\n\n#### matches_field\n\nThis is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).\n\n\n ```html \nvalidator='matches_field=my_password' \n ``` \nIn the example above, Couch will allow input only if it matches that in another editable region named *my_password*.\n\n#### regex\n\nThis is a very powerful option and can actually mimic all the validators described above (and much more).  \n It requires a little knowledge of Regular Expressions (as understood by PHP), though.\n\n\n ```html \nvalidator='regex=/(cat|dog)$/i' \n ``` \nIn the silly example, the input is considered valid only if it ends in either *cat* or *dog*.\n\n Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -  \n   \n \n ```html \nvalidator='alpha_num | min_len=6 | max_len=14'\n ``` \n \n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "validator_msg",
                    "description": "When a validator mentioned above fails (this includes the *required* parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.\n\nYou can display your own custom message instead by setting the *validator_msg* parameter. For example, the following is a custom message that is displayed when a *required* region is left empty -\n\n\n ```html \nvalidator_msg='required=What! You think you can get away with leaving this empty?' \n ``` \n Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -  \n   \n \n ```html \nvalidator_msg='required=Please enter something | min_len=Too short!'\n ``` \n \n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "separator",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "val_separator",
                    "description": "The use of '|' (pipe) character as the default separator between *validators* and *validator_msg* parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -\n\n\n ```html \nvalidator='regex=/(cat|dog)$/i' \n ``` \n- the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.\n\nIn such cases, the default separator and value separator can be set to any other character using the *separator* and *val_separator* parameters. For example -\n\n\n ```html \nseparator='#' val_separator=':' \n ``` \nWith the *separator* and the *val_separator* having changed, the regex validator can now be combined with other validator thus -\n\n\n ```html \nvalidator='regex:/(cat|dog)$/i # min_len:14' \n ``` \nThe *validator_msg* will now become -\n\n\n ```html \nvalidator_msg='required:Please enter something # min_len:Too short!' \n ``` \nVariables\n---------\n\nA variable by the name of the editable region becomes available in the context the region is being used in.\n\nRelated Tags\n------------\n\n\n * [editable (text)](editable/text.html)\n * [editable (password)](editable/password.html)\n * [editable (textarea)](editable/textarea.html)\n * [editable (richtext)](editable/richtext.html)\n * [editable (image)](editable/image.html)\n * [editable (thumbnail)](editable/thumbnail.html)\n * [editable (file)](editable/file.html)\n * [editable (radio)](editable/radio.html)\n * [editable (checkbox)](editable/checkbox.html)\n * [editable (dropdown)](editable/dropdown.html)\n * [editable (group)](editable/group.html)\n * [editable (message)](editable/message.html)\n * [editable (nicedit)](editable/nicedit.html)\n * [editable (relation)](editable/relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'image'",
            "description": "b'type = 'image'\n================\n\n\nEditable region of type **image** is primarily used to allow the user to upload an image from his local computer onto the server. The user can also browse and select any of the previously uploaded images.  \n\nOnce an image has been selected, this editable region then holds a fully qualified URL of the uploaded image.\n\n\n\n**NOTE:** By default, all uploaded images will be saved within the ***couch/uploads/image*** folder (or any subfolders created by the user within it). You can set the location to any other folder by uncommenting entry number 12 (*K_UPLOAD_DIR*) in *config.php* and changing it to the desired location.  \n\n  \n\n\n ```html \n// 12.\n// Upload folder if not using the default upload folder within 'couch'.\n// Should be relative to your site (don't forget to set write permissions on it).\ndefine( 'K_UPLOAD_DIR', 'myuploads' );\n ``` \n\n\n\n\nAn editable region of type *image* can be defined this way -\n\n\n\n ```html \n<cms:editable\n name='prop_image'\n label='Image'\n desc='Upload main image of property here'\n type='image'\n/>\n\n ``` \nThe code will result in -\n\n\n![](../../assets/img/contents/editable-image-1.gif)\n\n\nClicking the 'Browse Server' button will bring up a window which can be used to browse previously uploaded images on the server or upload a new image from the local machine.\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<img src=\"<cms:show prop_image />\" />\n\n ``` \nParameters\n----------\n\n\nApart from the parameters common to all types of editable regions, the regions of *image* type can take the following parameters -\n\n\n\n\n* width\n\n* height\n\n* enforce_max\n\n* crop\n\n* quality\n\n* show_preview\n\n* preview_width\n\n* preview_height\n\n\n\n### width\n\n\n### height\n\n\n\n ```html \n<cms:editable name='prop_image' width='300' height='200' type='image' />\n\n ``` \nAs mentioned above, when a user uploads an image, Couch saves it in a particular folder on the server. You can ask Couch to ensure that the saved image is of a **particular width and height** or **never exceeds certain width and height**.  \n\nThese dimensions (in pixels) are represented by the *width* and *height* parameter.\n\n\nHow these dimensions are interpreted by Couch depends on the settings of two other (mutually exclusive) parameters -  \n\n*enforce_max* and *crop*.\n\n\n\n**NOTE:** If **none** of the two dimensions are specified, e.g.  \n\n  \n\n\n ```html \n<cms:editable name='prop_image' type='image' />\n ``` \n\n regardless of any settings of *enforce_max* and *crop*, the saved image will always be of exactly the same dimensions as the one uploaded (i.e. not resized at all).\n\n\n\n### enforce_max\n\n\nWith *enforce_max* set to *1* (the default), the *width* and *height* parameters are interpreted as being the maximum permitted values of the saved image's width and height.\n\n\nIf any of the dimensions of an uploaded image exceeds the provided value, Couch resizes the image (preserving the existing proportion between width and height) till that dimension is reduced to the supplied value.\n\n\nIf both height and width are specified, enforcing the limit of one dimension might end up making the other dimension smaller than what was specified (*see examples below*).\n\n\n**By default *enforce_max* is always on so you do not have to explicitly set it.** It can be turned off either by specifically setting it to *0* (enforce_max='0') or by turnng on *crop* (crop='1').\n\n\n#### Examples:\n\n\n#### Specifying only one dimension\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n width='150'\n type='image' />\n\n ``` \n\n\n\nUploaded Image (300 x 200)\nSaved Image (150 x 100)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-2.jpg)\n![](../../assets/img/contents/editable-image-3.jpg)\nThe width was constrained to 150px while also decreasing the height proportionately.\n\n\n\n\n\n\nUploaded Image (200 x 300)\nSaved Image (150 x 225)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-4.jpg)\n![](../../assets/img/contents/editable-image-5.jpg)\nThe width was constrained to 150px while also decreasing the height proportionately.\n\n\n\n\n\n\nUploaded Image (100 x 75)\nSaved Image (100 x 75)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-6.jpg)\n![](../../assets/img/contents/editable-image-7.jpg)\nThe width was already smaller than the required 150px, hence no changes made to the image.\n\n\n\n#### Specifying both dimensions\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n width='150'\n height='150'\n type='image' />\n\n ``` \n\n\n\nUploaded Image (300 x 200)\nSaved Image (150 x 100)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-8.jpg)\n![](../../assets/img/contents/editable-image-9.jpg)\nThe width was constrained to 150px while also decreasing the height proportionately. The resulting height of 100px was smaller than the required 150px hence no further changes were made.\n\n\n\n\n\n\nUploaded Image (200 x 300)\nSaved Image (100 x 150)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-10.jpg)\n![](../../assets/img/contents/editable-image-11.jpg)\nThe width was constrained to 150px while also decreasing the height proportionately. The resulting height of 225px was larger than the required 150px hence the image was proportionately scaled further till the height became 150px. In doing so the width became smaller than 150px.\n\n\n\n\n\n\nUploaded Image (100 x 75)\nSaved Image (100 x 75)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-12.jpg)\n![](../../assets/img/contents/editable-image-13.jpg)\nThe width as well as the height were already smaller than the required 150px, hence no changes made to the image.\n\n\n\n#### SIDENOTE:\n\n\nA short discussion is necessary about what happens if *enforce_max* is explicitly set to '0' instead of implicitly doing it by setting *crop* - e.g..\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n width='150'\n height='150'\n enforce_max='0'\n type='image' />\n\n ``` \nIn such cases, since height and width are no longer enforcing maximum dimensions, these values are interpreted as being the absolute dimensions for the saved image. While resizing the image to these values ***no effort is made to preserve the existing proportion*** between original height and width. The new image is simply resized to the given values and thus if the ratio of the new dimensions do not match that of the original ones you'll end up with having a distorted image. Thus -\n\n\n\n\n\nUploaded Image (200 x 300)\nSaved Image (150 x 150)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-14.jpg)\n![](../../assets/img/contents/editable-image-15.jpg)\nThe image was simply resized to a width of 150px and a height of 150px. No attempt was made to mantain proportion and the resulting image is visibily squashed.\n\n\n\n### crop\n\n\nWith *crop* set to *1*, the *width* and *height* parameters are interpreted as specifying the dimensions using which the uploaded image should be saved.\n\n\nIf any of the dimensions of an uploaded image is lesser or greater than the value provided as parameters, Couch resizes the image (preserving the existing proportion between width and height) till that dimension is equal to the supplied value.\n\n\nIf both width and height are specified, very often while matching one dimension the other dimension overshoots the given value. In such cases, the overflowing part of it is cropped.\n\n\nBy setting this parameter to *1* we also implicitly turn off *enforce_max*.\n\n\n#### Examples:\n\n\n  \n\n\n\n#### Specifying only one dimension\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n width='150'\n crop='1'\n type='image' />\n\n ``` \n\n\n\nUploaded Image (300 x 200)\nSaved Image (150 x 100)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-16.jpg)\n![](../../assets/img/contents/editable-image-17.jpg)\nThe required width (150px) is smaller than the actual (300px), hence the width was reduced to 150px while also decreasing the height proportionately. The result is the same as with *enforce_max* on one dimension.\n\n\n\n\n\n\nUploaded Image (200 x 300)\nSaved Image (150 x 225)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-18.jpg)\n![](../../assets/img/contents/editable-image-19.jpg)\nThe required width (150px) is smaller than the actual (200px), hence the width was reduced to 150px while also decreasing the height proportionately. The result is the same as with *enforce_max* on one dimension.\n\n\n\n\n\n\nUploaded Image (100 x 75)\nSaved Image (150 x 112)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-20.jpg)\n![](../../assets/img/contents/editable-image-21.jpg)\nThe required width (150px) is larger than the actual (100px), hence the width was increased to 150px while also increasing the height proportionately. Note how the result differs from *enforce_max* on one dimension.\n\n\n\n#### Specifying both dimensions\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n width='150'\n height='150'\n crop='1'\n type='image' />\n\n ``` \n\n\n\nUploaded Image (300 x 200)\nSaved Image (150 x 150)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-22.jpg)\n![](../../assets/img/contents/editable-image-23.jpg)\nThe image is proportionately scaled till one of the two dimension is *equal* to the required value and the other is either *equal or larger* than the required value. In case the other dimension is larger, the surplus area is cropped off.\n\n\n\n\n\n\nUploaded Image (200 x 300)\nSaved Image (150 x 150)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-24.jpg)\n![](../../assets/img/contents/editable-image-25.jpg)\n-same as above-\n\n\n\n\n\n\nUploaded Image (100 x 75)\nSaved Image (150 x 150)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-image-26.jpg)\n![](../../assets/img/contents/editable-image-27.jpg)\n-same as above-\n\n\n\n### quality\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n width='150'\n quality='50'\n type='image' />\n\n ``` \nYou can set *quality* from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default value is 80.\n\n\n### show_preview\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n show_preview='1'\n type='image' />\n\n ``` \nSetting *show_preview* to '1' makes Couch display a preview of the selected image above the upload control.\n\n\n![](../../assets/img/contents/editable-image-28.jpg)\n\n\nIf *show_preview* is not set at all or is set to '0', upon selecting an image a link is added below the upload control for previewing the selected image.\n\n\n![](../../assets/img/contents/editable-image-29.jpg)\n\n\n### preview_width\n\n\n### preview_height\n\n\nAs illustrated above, setting *show_preview* to '1' causes a preview of the selected image to appear. The dimensions of this preview can be set by using *preview_width* and *preview_height* (needless to say, these two parameters take effect only with *show_preview* set to '1').\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here'\n show_preview='1'\n preview_width='150'\n type='image' />\n\n ``` \n![](../../assets/img/contents/editable-image-30.jpg)\n\n\nIt is always a good idea to set at least one of the two dimensions while using *show_preview*.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "width",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "height",
                    "description": "\n ```html \n<cms:editable name='prop_image' width='300' height='200' type='image' /> \n ``` \nAs mentioned above, when a user uploads an image, Couch saves it in a particular folder on the server. You can ask Couch to ensure that the saved image is of a **particular width and height** or **never exceeds certain width and height**.  \n These dimensions (in pixels) are represented by the *width* and *height* parameter.\n\nHow these dimensions are interpreted by Couch depends on the settings of two other (mutually exclusive) parameters -  \n *enforce_max* and *crop*.\n\n **NOTE:** If **none** of the two dimensions are specified, e.g.  \n   \n \n ```html \n<cms:editable name='prop_image' type='image' />\n ``` \n regardless of any settings of *enforce_max* and *crop*, the saved image will always be of exactly the same dimensions as the one uploaded (i.e. not resized at all). \n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "enforce_max",
                    "description": "With *enforce_max* set to *1* (the default), the *width* and *height* parameters are interpreted as being the maximum permitted values of the saved image's width and height.\n\nIf any of the dimensions of an uploaded image exceeds the provided value, Couch resizes the image (preserving the existing proportion between width and height) till that dimension is reduced to the supplied value.\n\nIf both height and width are specified, enforcing the limit of one dimension might end up making the other dimension smaller than what was specified (*see examples below*).\n\n**By default *enforce_max* is always on so you do not have to explicitly set it.** It can be turned off either by specifically setting it to *0* (enforce_max='0') or by turnng on *crop* (crop='1').\n\n#### Examples:\n\n#### Specifying only one dimension\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' width='150' type='image' /> \n ``` \n   Uploaded Image (300 x 200) Saved Image (150 x 100) Remarks     ![](../../assets/img/contents/editable-image-2.jpg) ![](../../assets/img/contents/editable-image-3.jpg) The width was constrained to 150px while also decreasing the height proportionately.      Uploaded Image (200 x 300) Saved Image (150 x 225) Remarks     ![](../../assets/img/contents/editable-image-4.jpg) ![](../../assets/img/contents/editable-image-5.jpg) The width was constrained to 150px while also decreasing the height proportionately.      Uploaded Image (100 x 75) Saved Image (100 x 75) Remarks     ![](../../assets/img/contents/editable-image-6.jpg) ![](../../assets/img/contents/editable-image-7.jpg) The width was already smaller than the required 150px, hence no changes made to the image.   #### Specifying both dimensions\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' width='150' height='150' type='image' /> \n ``` \n   Uploaded Image (300 x 200) Saved Image (150 x 100) Remarks     ![](../../assets/img/contents/editable-image-8.jpg) ![](../../assets/img/contents/editable-image-9.jpg) The width was constrained to 150px while also decreasing the height proportionately. The resulting height of 100px was smaller than the required 150px hence no further changes were made.      Uploaded Image (200 x 300) Saved Image (100 x 150) Remarks     ![](../../assets/img/contents/editable-image-10.jpg) ![](../../assets/img/contents/editable-image-11.jpg) The width was constrained to 150px while also decreasing the height proportionately. The resulting height of 225px was larger than the required 150px hence the image was proportionately scaled further till the height became 150px. In doing so the width became smaller than 150px.      Uploaded Image (100 x 75) Saved Image (100 x 75) Remarks     ![](../../assets/img/contents/editable-image-12.jpg) ![](../../assets/img/contents/editable-image-13.jpg) The width as well as the height were already smaller than the required 150px, hence no changes made to the image.   #### SIDENOTE:\n\nA short discussion is necessary about what happens if *enforce_max* is explicitly set to '0' instead of implicitly doing it by setting *crop* - e.g..\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' width='150' height='150' enforce_max='0' type='image' /> \n ``` \nIn such cases, since height and width are no longer enforcing maximum dimensions, these values are interpreted as being the absolute dimensions for the saved image. While resizing the image to these values ***no effort is made to preserve the existing proportion*** between original height and width. The new image is simply resized to the given values and thus if the ratio of the new dimensions do not match that of the original ones you'll end up with having a distorted image. Thus -\n\n   Uploaded Image (200 x 300) Saved Image (150 x 150) Remarks     ![](../../assets/img/contents/editable-image-14.jpg) ![](../../assets/img/contents/editable-image-15.jpg) The image was simply resized to a width of 150px and a height of 150px. No attempt was made to mantain proportion and the resulting image is visibily squashed.   ",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "crop",
                    "description": "With *crop* set to *1*, the *width* and *height* parameters are interpreted as specifying the dimensions using which the uploaded image should be saved.\n\nIf any of the dimensions of an uploaded image is lesser or greater than the value provided as parameters, Couch resizes the image (preserving the existing proportion between width and height) till that dimension is equal to the supplied value.\n\nIf both width and height are specified, very often while matching one dimension the other dimension overshoots the given value. In such cases, the overflowing part of it is cropped.\n\nBy setting this parameter to *1* we also implicitly turn off *enforce_max*.\n\n#### Examples:\n\n  \n\n\n#### Specifying only one dimension\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' width='150' crop='1' type='image' /> \n ``` \n   Uploaded Image (300 x 200) Saved Image (150 x 100) Remarks     ![](../../assets/img/contents/editable-image-16.jpg) ![](../../assets/img/contents/editable-image-17.jpg) The required width (150px) is smaller than the actual (300px), hence the width was reduced to 150px while also decreasing the height proportionately. The result is the same as with *enforce_max* on one dimension.      Uploaded Image (200 x 300) Saved Image (150 x 225) Remarks     ![](../../assets/img/contents/editable-image-18.jpg) ![](../../assets/img/contents/editable-image-19.jpg) The required width (150px) is smaller than the actual (200px), hence the width was reduced to 150px while also decreasing the height proportionately. The result is the same as with *enforce_max* on one dimension.      Uploaded Image (100 x 75) Saved Image (150 x 112) Remarks     ![](../../assets/img/contents/editable-image-20.jpg) ![](../../assets/img/contents/editable-image-21.jpg) The required width (150px) is larger than the actual (100px), hence the width was increased to 150px while also increasing the height proportionately. Note how the result differs from *enforce_max* on one dimension.   #### Specifying both dimensions\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' width='150' height='150' crop='1' type='image' /> \n ``` \n   Uploaded Image (300 x 200) Saved Image (150 x 150) Remarks     ![](../../assets/img/contents/editable-image-22.jpg) ![](../../assets/img/contents/editable-image-23.jpg) The image is proportionately scaled till one of the two dimension is *equal* to the required value and the other is either *equal or larger* than the required value. In case the other dimension is larger, the surplus area is cropped off.      Uploaded Image (200 x 300) Saved Image (150 x 150) Remarks     ![](../../assets/img/contents/editable-image-24.jpg) ![](../../assets/img/contents/editable-image-25.jpg) -same as above-      Uploaded Image (100 x 75) Saved Image (150 x 150) Remarks     ![](../../assets/img/contents/editable-image-26.jpg) ![](../../assets/img/contents/editable-image-27.jpg) -same as above-   ",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "quality",
                    "description": "\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' width='150' quality='50' type='image' /> \n ``` \nYou can set *quality* from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default value is 80.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "show_preview",
                    "description": "\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' show_preview='1' type='image' /> \n ``` \nSetting *show_preview* to '1' makes Couch display a preview of the selected image above the upload control.\n\n![](../../assets/img/contents/editable-image-28.jpg)\n\nIf *show_preview* is not set at all or is set to '0', upon selecting an image a link is added below the upload control for previewing the selected image.\n\n![](../../assets/img/contents/editable-image-29.jpg)\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "preview_width",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "preview_height",
                    "description": "As illustrated above, setting *show_preview* to '1' causes a preview of the selected image to appear. The dimensions of this preview can be set by using *preview_width* and *preview_height* (needless to say, these two parameters take effect only with *show_preview* set to '1').\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image of property here' show_preview='1' preview_width='150' type='image' /> \n ``` \n![](../../assets/img/contents/editable-image-30.jpg)\n\nIt is always a good idea to set at least one of the two dimensions while using *show_preview*.\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'thumbnail'",
            "description": "b'type = 'thumbnail'\n====================\n\n\nEditable region of type *thumbnail*, as the name suggests, is used to automatically create thumbnail images.\n\n\n*Thumbnail* type is different from all other types of editable regions in that the user does not directly edit anything within it. Instead it is attached to an existing editable region of type *image* which then becomes the source for the thumbnail. Any time the content of the *image* type is edited, the thumbnail attached to it also gets automatically updated.\n\n\nOnce the thumbnail has been created, this editable region then holds its fully qualified URL.\n\n\nThe thumbnail gets created in the same folder as that of the main image.\n\n\nSuppose we have an editable region, named *my_image*, of type *image* -\n\n\n\n ```html \n<cms:editable name='my_image' label='Image' desc='Upload main image here' type=\"image\" />\n\n ``` \nTo create a thumbnail automatically for any image that gets selected into it, we can define a new editable region of type *thumbnail* and associate it with the region above by using the *assoc_field* parameter -\n\n\n\n ```html \n<cms:editable\n name='my_image_thumb'\n label='Image Thumbnail'\n desc='Thumbnail of main image'\n width='100'\n show_preview='1'\n assoc_field='my_image'\n type='thumbnail'\n/>\n\n ``` \nThe code above will result in something like this below the parent *image* type editable region -\n\n\n![](../../assets/img/contents/editable-thumbnail-1.jpg)\n\n\nOnce the user selects an image into the main image region (and saves the page), the thumbnail gets created automatically -\n\n\n![](../../assets/img/contents/editable-thumbnail-2.jpg)\n\n\nAnytime the user changes the main image (and saves the changes), the thumbnail automatically reflects the changes.\n\n\nTo create multiple thumbnail images of the same image (one might be square, the other rectangular, perhaps), define multiple regions and associate them all with the same parent image.\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<img src=\"<cms:show my_image_thumb />\" />\n\n ``` \nParameters\n----------\n\n\nApart from the parameters common to all types of editable regions, the regions of *thumbnail* type can take the following parameters -\n\n\n\n\n* width\n\n* height\n\n* enforce_max\n\n* quality\n\n* show_preview\n\n* preview_width\n\n* preview_height\n\n\n\n### width\n\n\n### height\n\n\nParameters *width* and *height* specify the dimensions of the thumbnail.  \n\nIf neither *width* nor *height* are specified, the resulting thumbnail is of exactly the same dimensions as the associated image.\n\n\nSpecifying a single dimension only will create a thumbnail with that dimension of the specified value and the other dimension of a value that retains the original proportion of the image. e.g.\n\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n show_preview='1'\n assoc_field='my_image'\n type='thumbnail' />\n\n ``` \n\n\n\nParent Image (200 x 300)\nThumbnail (100 x 150)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-thumbnail-3.jpg)\n![](../../assets/img/contents/editable-thumbnail-4.jpg)\nThe width was made 100px and the height was proportionately scaled to 150px so that the original proportion between the dimensions is retained.\n\n\n\nSpecifying both the dimensions will create a thumbnail with each dimension of the specified values. The original proportion between the dimensions is preserved and hence this could lead to cropping off of any dimension that overshoots the specified value in the attempt to retain proportion. e.g.\n\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n height='80'\n show_preview='1'\n assoc_field='my_image'\n type='thumbnail' />\n\n ``` \n\n\n\nParent Image (200 x 300)\nThumbnail (100 x 80)\nRemarks\n\n\n\n\n![](../../assets/img/contents/editable-thumbnail-5.jpg)\n![](../../assets/img/contents/editable-thumbnail-6.jpg)\nThe width was made 100px and the height was proportionately scaled resulting in a dimension of 150px. Since a height of only 80px was asked for, the surplus 70px were cropped off (35px equally from both sides with the two images aligned in the center).\n\n\n\nAs is obvious from the second example above, if both the dimensions are specified and the thumbnail's ratio does not match that of the parent image, the cropping that inevitably occurs can sometimes lead to unacceptable results. In the thumbnail above the most important part of the image has been cropped off. This can be rectified by asking Couch to recreate the thumbnail but this time aligning it to the top of the parent image instead of the default center.\n\n\n![](../../assets/img/contents/editable-thumbnail-7.jpg)\n\n\nThe following is the resulting thumbnail -\n\n\n![](../../assets/img/contents/editable-thumbnail-8.jpg)\n\n\n### enforce_max\n\n\nSetting this parameter will cause Couch to simply scale (instead of cropping as in the example above) the thumbnail, ensuring that none of its two dimensions exceed those specfied by the *width* and *height* parameters.\n\n\n### quality\n\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n show_preview='1'\n quality='50'\n assoc_field='my_image'\n type='thumbnail' />\n\n ``` \nYou can set *quality* from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default value is 80.\n\n\n### show_preview\n\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n show_preview='1'\n assoc_field='my_image'\n type='thumbnail' />\n\n ``` \nSetting show_preview to '1' makes Couch display a preview of the created thumbnail (as visible in the examples above). Omitting this parameter or explicitly setting it to '0' will make Couch display only a link to the thumbnail instead of the preview image.\n\n\n![](../../assets/img/contents/editable-thumbnail-9.gif)\n\n\n### preview_width\n\n\n### preview_height\n\n\nAs noted above, setting *show_preview* to '1' causes a preview of the thumbnail to appear. The dimensions of this preview can be set by using *preview_width* and *preview_height* (needless to say, these two parameters take effect only with *show_preview* set to '1').\n\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n show_preview='1'\n preview_width='80'\n assoc_field='my_image'\n type='thumbnail' />\n\n ``` \nIf both *preview_width* and *preview_height* are omitted, the thumbnail preview is of exactly the same dimensions as the thumbnail. Usually this is what you'd want and you won't find yourself setting *preview_width* or *preview_height* too often.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "width",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "height",
                    "description": "Parameters *width* and *height* specify the dimensions of the thumbnail.  \n If neither *width* nor *height* are specified, the resulting thumbnail is of exactly the same dimensions as the associated image.\n\nSpecifying a single dimension only will create a thumbnail with that dimension of the specified value and the other dimension of a value that retains the original proportion of the image. e.g.\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' show_preview='1' assoc_field='my_image' type='thumbnail' /> \n ``` \n   Parent Image (200 x 300) Thumbnail (100 x 150) Remarks     ![](../../assets/img/contents/editable-thumbnail-3.jpg) ![](../../assets/img/contents/editable-thumbnail-4.jpg) The width was made 100px and the height was proportionately scaled to 150px so that the original proportion between the dimensions is retained.   Specifying both the dimensions will create a thumbnail with each dimension of the specified values. The original proportion between the dimensions is preserved and hence this could lead to cropping off of any dimension that overshoots the specified value in the attempt to retain proportion. e.g.\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' height='80' show_preview='1' assoc_field='my_image' type='thumbnail' /> \n ``` \n   Parent Image (200 x 300) Thumbnail (100 x 80) Remarks     ![](../../assets/img/contents/editable-thumbnail-5.jpg) ![](../../assets/img/contents/editable-thumbnail-6.jpg) The width was made 100px and the height was proportionately scaled resulting in a dimension of 150px. Since a height of only 80px was asked for, the surplus 70px were cropped off (35px equally from both sides with the two images aligned in the center).   As is obvious from the second example above, if both the dimensions are specified and the thumbnail's ratio does not match that of the parent image, the cropping that inevitably occurs can sometimes lead to unacceptable results. In the thumbnail above the most important part of the image has been cropped off. This can be rectified by asking Couch to recreate the thumbnail but this time aligning it to the top of the parent image instead of the default center.\n\n![](../../assets/img/contents/editable-thumbnail-7.jpg)\n\nThe following is the resulting thumbnail -\n\n![](../../assets/img/contents/editable-thumbnail-8.jpg)\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "enforce_max",
                    "description": "Setting this parameter will cause Couch to simply scale (instead of cropping as in the example above) the thumbnail, ensuring that none of its two dimensions exceed those specfied by the *width* and *height* parameters.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "quality",
                    "description": "\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' show_preview='1' quality='50' assoc_field='my_image' type='thumbnail' /> \n ``` \nYou can set *quality* from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default value is 80.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "show_preview",
                    "description": "\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' show_preview='1' assoc_field='my_image' type='thumbnail' /> \n ``` \nSetting show_preview to '1' makes Couch display a preview of the created thumbnail (as visible in the examples above). Omitting this parameter or explicitly setting it to '0' will make Couch display only a link to the thumbnail instead of the preview image.\n\n![](../../assets/img/contents/editable-thumbnail-9.gif)\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "preview_width",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "preview_height",
                    "description": "As noted above, setting *show_preview* to '1' causes a preview of the thumbnail to appear. The dimensions of this preview can be set by using *preview_width* and *preview_height* (needless to say, these two parameters take effect only with *show_preview* set to '1').\n\n\n ```html \n<cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' show_preview='1' preview_width='80' assoc_field='my_image' type='thumbnail' /> \n ``` \nIf both *preview_width* and *preview_height* are omitted, the thumbnail preview is of exactly the same dimensions as the thumbnail. Usually this is what you'd want and you won't find yourself setting *preview_width* or *preview_height* too often.\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'file'",
            "description": "b'type = 'file'\n===============\n\n\nEditable region of type **file** is primarily used to allow the user to upload a file from his local computer onto the server. The user can also browse and select any of the previously uploaded files.  \n\nOnce a file has been selected, this editable region then holds a fully qualified URL of the uploaded file.\n\n\n\n**NOTE:** By default, all uploaded files will be saved within the ***couch/uploads/file*** folder (or any subfolders created by the user within it). You can set the location to any other folder by uncommenting entry number 12 (*K_UPLOAD_DIR*) in *config.php* and changing it to the desired location.  \n\n  \n\n\n ```html \n// 12.\n// Upload folder if not using the default upload folder within 'couch'.\n// Should be relative to your site (don't forget to set write permissions on it).\ndefine( 'K_UPLOAD_DIR', 'myuploads' );\n ``` \n\n\n\n\nAn editable region of *file* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name='my_document'\n label='Downloadable File'\n desc='Upload the file here'\n type='file'\n/>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-file.gif)\n\n\nClicking the 'Browse Server' button will bring up a window which can be used to browse previously uploaded files on the server or upload a new file from the local machine.\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<a href=\"<cms:show my_document />\" >Download file</a>\n\n ``` \nParameters\n----------\n\n\nApart from the parameters common to all the other types of editable regions, this type does not accept any other parameter.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:type = 'richtext'",
            "description": "b'type = 'richtext'\n===================\n\n\nEditable region of *richtext* type is used to allow users to easily input HTML formatted text without manually keying in the HTML tags.  \n\nFor this type, Couch creates an instance of a WYSIWYG richtext editor ([CKEditor](http://ckeditor.com/)) containing almost all the editing features present in desktop editing applications like MS Word.\n\n\nAn editable region of *richtext* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name='prop_desc'\n label='Description'\n desc='Enter description of property here'\n type='richtext'>\n Condo pricing starts at just under $700,000. Waterfront Private Residences. Jack Nicklaus\n Signature Golf Course.\n</cms:editable>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-richtext-1.jpg)\n\n\n\n Any text enclosed between the opening and the closing tags will appear as the default text within the editor. If you do not wish to have any default text, simply make the **Editable** tag self-closing e.g.  \n\n  \n\n\n ```html \n<cms:editable name='prop_desc' label='Description'\n desc='Enter description of property here'\n type='richtext' />\n ``` \n\n\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<cms:show prop_desc />\n\n ``` \n\n Opinion is divided about providing a WYSIWYG editor to the end user (some CMS'es going as far as not providing one at all). After all it only takes a few clicks for a user to change the background color of your meticulously designed web-page to shocking red with the fonts set to *Comics Sans MS*.  \n\n  \n\n But ask any end user and the first feature he'll judge a CMS by would be the WYSIWYG editor. Not surprising considering the ease that it brings to him in editing his content.  \n\n  \n\n The problem, in our humble opinion, is not the WYSIWYG editor but the unbridled power that it hands over to the end user. The approach of Couch is to allow the designer/coder to decide how much power is he willing to give to the end user. If the user is supposed to only make the text bold and italic, you can set that only these buttons are available. If you wish to constrain the user into applying to the page elements only a few styles that you have coded, you can make available only those styles to the editor. The parameters discussed below will go into more details.  \n\n\n\n\nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *richtext* accepts the following parameters\n\n\n\n\n* height\n\n* width\n\n* css\n\n* body_id\n\n* body_class\n\n* custom_styles\n\n* toolbar\n\n* custom_toolbar\n\n\n\n### height\n\n\n### width\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n height='100'\n width='500'\n type='richtext'/>\n\n ``` \nAs the name of the parameters, they can be used to set the width and height of the WYSIWYG editor.\n\n\n### css\n\n\nIf you have used other CMSes that use WYSIWYG editors, you might have noticed that, in most of them, the content being edited in the editor rarely looks like the way it does when displayed on your website. This is because the styles used by your website (most probably from within CSS stylesheets) are different from that used by the editor.\n\n\nIn order to make the appearance of the content within the editor as similar as possible to what it would look like on the published page, the *css* parameter can be set to a CSS stylesheet containing matching styles. Sometimes even setting it to the same stylesheet as that of the main site can do the trick. e.g.\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n css='styles/editor_styles.css'\n type='richtext'/>\n\n ``` \nIf a fully qualified path (URL) is not provided, the path is assumed to be relative to the main site (remember that Couch considers its own parent folder i.e. the folder within which the folder named *couch* resides, as the main website). Thus in the example above, the editor will try and use a stylesheet named *editor_styles.css* contained within a folder named *styles* which itself resides within the main website folder.\n\n\nThe full URL of the stylesheet can also be used e.g.\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n css='http://www.mysite.com/styles/editor_styles.css'\n type='richtext'/>\n\n ``` \nIf a URL is specified, the stylesheet need not necessarily be located within your website. It can be anywhere on the Internet. However, if it is situated within your website, the following is the most appropriate way of setting its full path -\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n css=\"<cms:show k_site_link />styles/editor_styles.css\"\n type='richtext'/>\n\n ``` \nMultiple stylesheets may also be specified by separating each by a pipe '|' -\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n css=\"<cms:show k_site_link />styles/editor_styles.css | styles/my_styles.css\"\n type='richtext'/>\n\n ``` \n### body_id\n\n\n### body_class\n\n\nParameters *body_id* and *body_class* augment the functionality provided by the *css* parameter discussed above where we try to make the content within the editor look similar to what it would look like on the published webpage .\n\n\nSuppose the contents of the WYSIWYG editor will eventually appear on the webpage within a **div** with an **id** of *prop_desc*. Also assume that this **div** has been styled with CSS statements that refer to it by its **id** e.g.\n\n\n\n ```html \n#prop_desc {\n padding: 25px;\n background:#fff url(bg-prop.jpg) no-repeat scroll 0 bottom;\n font-size: 13px;\n}\n\n ``` \nIn this case, to style the contents within the editor with the CSS rules given above, set the *css* parameter to a stylesheet that contains the statement given above and set the *body_id* parameter to *prop_desc*. This way, CSS will treat the WYSIWYG editor as having this **id** and all the contents within it will be rendered accordingly.\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n css=\"<cms:show k_site_link />styles/editor_styles.css\"\n body_id='prop_desc'\n type='richtext'/>\n\n ``` \nSimilarly, if the CSS rules are applicable to an element of a certain **class**, to make the editor take on those rules, set the *body_class* parameter to that class. Unlike *body_id*, *body_class* can be set to multiple classes, each separated by a space. e.g. in the snippet below, the editor will have two classes applied - *class1* and *class2*.\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n css=\"<cms:show k_site_link />styles/editor_styles.css\"\n body_class='class1 class2'\n type='richtext'/>\n\n ``` \n### custom_styles\n\n\nThe toolbar above the editor contains a drop-down list that allows the user to apply some very generic formats to his content -\n\n\n![](../../assets/img/contents/editable-richtext-2.gif)\n\n\n[CKEditor](http: //ckeditor.com/) provides a method to display **your** custom styles in a similar drop-down list.\n\n\nThis is a very powerful technique to give the user access to a set of predefined styles that correspond to the styles used by your website and thus ensure that any formatting that he applies will be in concordance to your design.\n\n\nThe method that [CKEditor](http://ckeditor.com/) provides requires you to create a JavaScript file defining the list elements in a particular (JSON) format. You can see a sample file provided by them [here](http://www.couchcms.com/docs/style/ckeditor_custom_styles.js). Even if you do not happen to be conversant with JavaScript, it shouldn't be too difficult to figure out how this sample script works.\n\n\nAs an example, suppose that the websites stylesheet has certain **classes** defined that set the background and border to specific colors\n\n\n\n ```html \n.error { background: #FBE3E4; color: #8a1f11; border-color: #FBC2C4; }\n.notice { background: #FFF6BF; color: #514721; border-color: #FFD324; }\n.success { background: #E6EFC2; color: #264409; border-color: #C6D880; }\n\n ``` \nTo allow the user easily apply any of these styles to the content while editing, create a file named *custom_styles.js* (can be named anything) and place the following code within it -\n\n\n\n ```html \nCKEDITOR.stylesSet.add( 'my_styles',\n[\n { name : 'Normal' , element : 'p' },\n { name : 'Notice' , element : 'p', attributes : { 'class' : 'notice' } },\n { name : 'Warning' , element : 'p', attributes : { 'class' : 'error' } },\n { name : 'Message' , element : 'p', attributes : { 'class' : 'success' } }\n]);\n\n ``` \nNotice the highlighted part - *my_styles*. It is a requirement of [CKEditor](http://ckeditor.com/) to give a unique name to each set of custom styles that you may use. For this example, we have named it *my_styles*.\n\n\nNext we need to inform [CKEditor](http://ckeditor.com/) to use the elements defined in this file to create a drop-down list. Couch makes this part easy. Simply set the *custom_styles* parameter of the **Editable** tag in the following manner -\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n custom_styles=\"my_styles=styles/custom_styles.js\"\n type='richtext'/>\n\n ``` \n**IMP.** Notice how we have provided the value of *custom_styles* in two parts - name given to this set of styles (*my_styles*) follwed by an **equal-to** sign and then the path of the JavaScript file (for our example, we assume that it has been saved within *styles* folder of your website). Absolute path can also be used (see discussion of path in *css* parameter above).\n\n\nThe resulting drop-down list -\n\n\n![](../../assets/img/contents/editable-richtext-3.gif)\n\n\nEverytime you modify the JavaScript file, you might need to clear your browser's cache to make the editor pickup the changed file.\n\n\n### toolbar\n\n\nThis parameter can be used to determine which buttons (and hence which actions) become available to the user in the toolbar above the editor. This helps in limiting the amount of freedom that you are prepared to grant the end user.\n\n\nThis parameter can take one of the following four values\n\n\n\n\n* basic\n\n* medium\n\n* full\n\n* custom\n\n\n\n#### basic\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='basic'\n type='richtext'/>\n\n ``` \nresults in -\n\n\n![](../../assets/img/contents/editable-richtext-4.gif)\n\n\n#### medium\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='medium'\n type='richtext'/>\n\n ``` \nresults in -\n\n\n![](../../assets/img/contents/editable-richtext-5.gif)\n\n\n*Medium* is the default value and hence if *toolbar* parameter is omitted, this is what is used.\n\n\n#### full\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='full'\n type='richtext'/>\n\n ``` \nresults in -\n\n\n![](../../assets/img/contents/editable-richtext-6.gif)\n\n\n#### custom\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='custom'\n type='richtext'/>\n\n ``` \nIf none of the three sets of buttons shown above suits your need, set the *toolbar* parameter to *custom*. By doing this you can specify your handpicked buttons and their positions in the toolbar by using the *custom_toolbar* parameter discussed below.\n\n\n### custom_toolbar\n\n\nAs mentioned above, this parameter will only take effect when the *toolbar* parameter has been set to *custom*.\n\n\nYou have the following buttons to choose from to display them in the toolbar -\n\n\n\n\n* bold\n\n* italic\n\n* underline\n\n* strike\n\n* subscript\n\n* superscript\n\n* justifyleft\n\n* justifycenter\n\n* justifyright\n\n* justifyblock\n\n* numberedlist\n\n* bulletedlist\n\n* outdent\n\n* indent\n\n* blockquote\n\n* undo\n\n* redo\n\n* removeformat\n\n* cut\n\n* copy\n\n* paste\n\n* pastetext\n\n* pastefromword\n\n* image\n\n* flash\n\n* table\n\n* horizontalrule\n\n* smiley\n\n* specialchar\n\n* pagebreak\n\n* link\n\n* unlink\n\n* anchor\n\n* styles\n\n* format\n\n* font\n\n* fontsize\n\n* textcolor\n\n* bgcolor\n\n* showblocks\n\n* preview\n\n* maximize\n\n* source\n\n* -\n\n* _\n\n\n\nThe last two buttons are hyphen and underscore. Both can be used to create a separator between buttons.\n\n\n#### Examples:\n\n\nAs a very simple (and unrealistic) example, here is a toolbar containing only two buttons (bold and italic) -\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='custom'\n custom_toolbar='bold, italic'\n type='richtext'/>\n\n ``` \n![](../../assets/img/contents/editable-richtext-7.gif)\n\n\nA more practical example - here is how you can mimic the *medium* type of toolbar discussed above.\n\n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='custom'\n custom_toolbar='bold, italic, underline, strike, -, subscript, superscript |\n format |\n justifyleft, justifycenter, justifyright, justifyblock |\n numberedlist, bulletedlist, -, outdent, indent, blockquote |\n undo, redo, removeformat |\n |\n cut, copy, paste, pastetext, pastefromword |\n image, flash, table, horizontalrule, smiley, specialchar, pagebreak |\n link, unlink, anchor |\n showblocks, preview, maximize, -, source'\n type='richtext' />\n\n ``` \n![](../../assets/img/contents/editable-richtext-8.gif)\n\n\n**Points to note in the example above -**\n\n\nA space can be introduced between two buttons by placing a '-' (hyphen) or '_' (underscore) between them while related buttons can be grouped together by placing a '|' (pipe character) between two groups.  \n\nVisually both might appear to be the same but when the toolbar needs to be broken up due to lack of space, buttons in the same group are treated as a unit and are kept together.\n\n\nAlso note that you can force the toolbar to be break into a new row by specifying '|' twice (i.e. no buttons between two pipes - see how the group begining with the **cut** button has been forced into a new row).\n\n\n\n**TIP** - if you find yourself reusing a custom toolbar at many places, instead of repeating the quite large chunk of code everywhere, use the [**Embed**](../embed.html) tag. Cut and paste the *value* of the *custom_toolbar* parameter (everything between the quotes) and save it in a file named, say, *my_toolbar.inc*. Instruct the [**Embed**](../embed.html) tag to use this file.  \n\n  \n\n\n ```html \n<cms:editable name='desc' label='Description'\n desc='Enter description of property here'\n toolbar='custom'\n custom_toolbar=\"<cms:embed 'my_toolbar.inc' />\"\n type='richtext' />\n ``` \n\n\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "height",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "width",
                    "description": "\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' height='100' width='500' type='richtext'/> \n ``` \nAs the name of the parameters, they can be used to set the width and height of the WYSIWYG editor.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "css",
                    "description": "If you have used other CMSes that use WYSIWYG editors, you might have noticed that, in most of them, the content being edited in the editor rarely looks like the way it does when displayed on your website. This is because the styles used by your website (most probably from within CSS stylesheets) are different from that used by the editor.\n\nIn order to make the appearance of the content within the editor as similar as possible to what it would look like on the published page, the *css* parameter can be set to a CSS stylesheet containing matching styles. Sometimes even setting it to the same stylesheet as that of the main site can do the trick. e.g.\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' css='styles/editor_styles.css' type='richtext'/> \n ``` \nIf a fully qualified path (URL) is not provided, the path is assumed to be relative to the main site (remember that Couch considers its own parent folder i.e. the folder within which the folder named *couch* resides, as the main website). Thus in the example above, the editor will try and use a stylesheet named *editor_styles.css* contained within a folder named *styles* which itself resides within the main website folder.\n\nThe full URL of the stylesheet can also be used e.g.\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' css='http://www.mysite.com/styles/editor_styles.css' type='richtext'/> \n ``` \nIf a URL is specified, the stylesheet need not necessarily be located within your website. It can be anywhere on the Internet. However, if it is situated within your website, the following is the most appropriate way of setting its full path -\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' css=\"<cms:show k_site_link />styles/editor_styles.css\" type='richtext'/> \n ``` \nMultiple stylesheets may also be specified by separating each by a pipe '|' -\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' css=\"<cms:show k_site_link />styles/editor_styles.css | styles/my_styles.css\" type='richtext'/> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "body_id",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "body_class",
                    "description": "Parameters *body_id* and *body_class* augment the functionality provided by the *css* parameter discussed above where we try to make the content within the editor look similar to what it would look like on the published webpage .\n\nSuppose the contents of the WYSIWYG editor will eventually appear on the webpage within a **div** with an **id** of *prop_desc*. Also assume that this **div** has been styled with CSS statements that refer to it by its **id** e.g.\n\n\n ```html \n#prop_desc { padding:25px; background:#fff url(bg-prop.jpg) no-repeat scroll 0 bottom; font-size: 13px; } \n ``` \nIn this case, to style the contents within the editor with the CSS rules given above, set the *css* parameter to a stylesheet that contains the statement given above and set the *body_id* parameter to *prop_desc*. This way, CSS will treat the WYSIWYG editor as having this **id** and all the contents within it will be rendered accordingly.\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' css=\"<cms:show k_site_link />styles/editor_styles.css\" body_id='prop_desc' type='richtext'/> \n ``` \nSimilarly, if the CSS rules are applicable to an element of a certain **class**, to make the editor take on those rules, set the *body_class* parameter to that class. Unlike *body_id*, *body_class* can be set to multiple classes, each separated by a space. e.g. in the snippet below, the editor will have two classes applied - *class1* and *class2*.\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' css=\"<cms:show k_site_link />styles/editor_styles.css\" body_class='class1 class2' type='richtext'/> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "custom_styles",
                    "description": "The toolbar above the editor contains a drop-down list that allows the user to apply some very generic formats to his content -\n\n![](../../assets/img/contents/editable-richtext-2.gif)\n\n[CKEditor](http://ckeditor.com/) provides a method to display **your** custom styles in a similar drop-down list.\n\nThis is a very powerful technique to give the user access to a set of predefined styles that correspond to the styles used by your website and thus ensure that any formatting that he applies will be in concordance to your design.\n\nThe method that [CKEditor](http://ckeditor.com/) provides requires you to create a JavaScript file defining the list elements in a particular (JSON) format. You can see a sample file provided by them [here](http://www.couchcms.com/docs/style/ckeditor_custom_styles.js). Even if you do not happen to be conversant with JavaScript, it shouldn't be too difficult to figure out how this sample script works.\n\nAs an example, suppose that the websites stylesheet has certain **classes** defined that set the background and border to specific colors\n\n\n ```html \n.error { background: #FBE3E4; color: #8a1f11; border-color: #FBC2C4; } .notice { background: #FFF6BF; color: #514721; border-color: #FFD324; } .success { background: #E6EFC2; color: #264409; border-color: #C6D880; } \n ``` \nTo allow the user easily apply any of these styles to the content while editing, create a file named *custom_styles.js* (can be named anything) and place the following code within it -\n\n\n ```html \nCKEDITOR.stylesSet.add( 'my_styles', [ { name : 'Normal' , element : 'p' }, { name : 'Notice' , element : 'p', attributes : { 'class' : 'notice' } }, { name : 'Warning' , element : 'p', attributes : { 'class' : 'error' } }, { name : 'Message' , element : 'p', attributes : { 'class' : 'success' } } ]); \n ``` \nNotice the highlighted part - *my_styles*. It is a requirement of [CKEditor](http://ckeditor.com/) to give a unique name to each set of custom styles that you may use. For this example, we have named it *my_styles*.\n\nNext we need to inform [CKEditor](http://ckeditor.com/) to use the elements defined in this file to create a drop-down list. Couch makes this part easy. Simply set the *custom_styles* parameter of the **Editable** tag in the following manner -\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' custom_styles=\"my_styles=styles/custom_styles.js\" type='richtext'/> \n ``` \n**IMP.** Notice how we have provided the value of *custom_styles* in two parts - name given to this set of styles (*my_styles*) follwed by an **equal-to** sign and then the path of the JavaScript file (for our example, we assume that it has been saved within *styles* folder of your website). Absolute path can also be used (see discussion of path in *css* parameter above).\n\nThe resulting drop-down list -\n\n![](../../assets/img/contents/editable-richtext-3.gif)\n\nEverytime you modify the JavaScript file, you might need to clear your browser's cache to make the editor pickup the changed file.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "toolbar",
                    "description": "This parameter can be used to determine which buttons (and hence which actions) become available to the user in the toolbar above the editor. This helps in limiting the amount of freedom that you are prepared to grant the end user.\n\nThis parameter can take one of the following four values\n\n\n * basic\n * medium\n * full\n * custom\n \n#### basic\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='basic' type='richtext'/> \n ``` \nresults in -\n\n![](../../assets/img/contents/editable-richtext-4.gif)\n\n#### medium\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='medium' type='richtext'/> \n ``` \nresults in -\n\n![](../../assets/img/contents/editable-richtext-5.gif)\n\n*Medium* is the default value and hence if *toolbar* parameter is omitted, this is what is used.\n\n#### full\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='full' type='richtext'/> \n ``` \nresults in -\n\n![](../../assets/img/contents/editable-richtext-6.gif)\n\n#### custom\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='custom' type='richtext'/> \n ``` \nIf none of the three sets of buttons shown above suits your need, set the *toolbar* parameter to *custom*. By doing this you can specify your handpicked buttons and their positions in the toolbar by using the *custom_toolbar* parameter discussed below.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "custom_toolbar",
                    "description": "As mentioned above, this parameter will only take effect when the *toolbar* parameter has been set to *custom*.\n\nYou have the following buttons to choose from to display them in the toolbar -\n\n\n * bold\n * italic\n * underline\n * strike\n * subscript\n * superscript\n * justifyleft\n * justifycenter\n * justifyright\n * justifyblock\n * numberedlist\n * bulletedlist\n * outdent\n * indent\n * blockquote\n * undo\n * redo\n * removeformat\n * cut\n * copy\n * paste\n * pastetext\n * pastefromword\n * image\n * flash\n * table\n * horizontalrule\n * smiley\n * specialchar\n * pagebreak\n * link\n * unlink\n * anchor\n * styles\n * format\n * font\n * fontsize\n * textcolor\n * bgcolor\n * showblocks\n * preview\n * maximize\n * source\n * -\n * _\n \nThe last two buttons are hyphen and underscore. Both can be used to create a separator between buttons.\n\n#### Examples:\n\nAs a very simple (and unrealistic) example, here is a toolbar containing only two buttons (bold and italic) -\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='custom' custom_toolbar='bold, italic' type='richtext'/> \n ``` \n![](../../assets/img/contents/editable-richtext-7.gif)\n\nA more practical example - here is how you can mimic the *medium* type of toolbar discussed above.\n\n\n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='custom' custom_toolbar='bold, italic, underline, strike, -, subscript, superscript | format | justifyleft, justifycenter, justifyright, justifyblock | numberedlist, bulletedlist, -, outdent, indent, blockquote | undo, redo, removeformat | | cut, copy, paste, pastetext, pastefromword | image, flash, table, horizontalrule, smiley, specialchar, pagebreak | link, unlink, anchor | showblocks, preview, maximize, -, source' type='richtext' /> \n ``` \n![](../../assets/img/contents/editable-richtext-8.gif)\n\n**Points to note in the example above -**\n\nA space can be introduced between two buttons by placing a '-' (hyphen) or '_' (underscore) between them while related buttons can be grouped together by placing a '|' (pipe character) between two groups.  \n Visually both might appear to be the same but when the toolbar needs to be broken up due to lack of space, buttons in the same group are treated as a unit and are kept together.\n\nAlso note that you can force the toolbar to be break into a new row by specifying '|' twice (i.e. no buttons between two pipes - see how the group begining with the **cut** button has been forced into a new row).\n\n **TIP** - if you find yourself reusing a custom toolbar at many places, instead of repeating the quite large chunk of code everywhere, use the [**Embed**](../embed.html) tag. Cut and paste the *value* of the *custom_toolbar* parameter (everything between the quotes) and save it in a file named, say, *my_toolbar.inc*. Instruct the [**Embed**](../embed.html) tag to use this file.  \n   \n \n ```html \n<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='custom' custom_toolbar=\"<cms:embed 'my_toolbar.inc' />\" type='richtext' />\n ``` \n \n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'text'",
            "description": "b'type = 'text'\n===============\n\n\nEditable region of *text* type is used to allow users to input text when only one line of text is required.  \n\nFor this type, Couch creates a single line textbox for data input.\n\n\nAn editable region of *text* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name='prop_title'\n label='Title'\n desc='Enter title of property here'\n type='text'>Awesome property!</cms:editable>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-text.gif)\n\n\n\n Any text enclosed between the opening and the closing tags will appear as the default text within the textbox. If you do not wish to have any default text, simply make the **Editable** tag self-closing e.g.  \n\n  \n\n\n ```html \n<cms:editable name='prop_title' label='Title'\n desc='Enter title of property here'\n type='text' />\n ``` \n\n\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<cms:show prop_title />\n\n ``` \nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *text* accepts the following parameters\n\n\n\n\n* width\n\n* maxlength\n\n* search_type\n\n\n\n### width\n\n\nThe width of the generated textbox can be changed by setting this parameter. For example, the following will make the textbox 200px wide -\n\n\n\n ```html \n<cms:editable name='prop_title' label='Title'\n desc='Enter title of property here'\n width='200'\n type='text'>Awesome property!</cms:editable>\n\n ``` \n### maxlength\n\n\nThe maximum number of characters that can be inputted by the user in this textbox can be constrained by setting this parameter. For example, the following code will prevent the user from entering more than 40 characters -\n\n\n\n ```html \n<cms:editable name='prop_title' label='Title'\n desc='Enter title of property here'\n maxlength='40'\n type='text'>Awesome property!</cms:editable>\n\n ``` \n### search_type\n\n\nCan be set to the following valid values -\n\n\n\n\n* text\n\n* integer\n\n* decimal\n\n\n\nThe default *search_type* is (as with all other types of editable regions) *text*.  \n\nIf you wish to use this region to input numeric values (e.g. age or salary), set the type to either *integer* or *decimal* (if the value can be fractional).\n\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See [**Pages**](../pages.html#custom_field).\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "width",
                    "description": "The width of the generated textbox can be changed by setting this parameter. For example, the following will make the textbox 200px wide -\n\n\n ```html \n<cms:editable name='prop_title' label='Title' desc='Enter title of property here' width='200' type='text'>Awesome property!</cms:editable> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "maxlength",
                    "description": "The maximum number of characters that can be inputted by the user in this textbox can be constrained by setting this parameter. For example, the following code will prevent the user from entering more than 40 characters -\n\n\n ```html \n<cms:editable name='prop_title' label='Title' desc='Enter title of property here' maxlength='40' type='text'>Awesome property!</cms:editable> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "search_type",
                    "description": "Can be set to the following valid values -\n\n\n * text\n * integer\n * decimal\n \nThe default *search_type* is (as with all other types of editable regions) *text*.  \n If you wish to use this region to input numeric values (e.g. age or salary), set the type to either *integer* or *decimal* (if the value can be fractional).\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See [**Pages**](../pages.html#custom_field).\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'password'",
            "description": "b'type = 'password'\n===================\n\n\nEditable region of *password* type is very similar to the [*text*](text.html) type. As with [*text*](text.html) type, for this type too Couch creates a single line textbox for data input. The only difference between the two is that anything being typed into an editable region of type *password* will appear as '*' (asterisks). This makes it suitable for entering passwords.\n\n\nAn editable region of *password* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name='my_password'\n label='Password'\n desc='Enter your password'\n type='password'\n/>\n\n ``` \nThe code above will result in the following (with some password typed in) -\n\n\n![](../../assets/img/contents/editable-password.gif)\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<cms:show my_password />\n\n ``` \nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *password* accepts the following parameters\n\n\n\n\n* width\n\n* maxlength\n\n\n\n### width\n\n\nThe width of the generated textbox can be changed by setting this parameter. For example, the following will make the textbox 200px wide -\n\n\n\n ```html \n<cms:editable name='my_password' label='Password'\n desc='Enter your password'\n width='200'\n type='password' />\n\n ``` \n### maxlength\n\n\nThe maximum number of characters that can be inputted by the user in this textbox can be constrained by setting this parameter. For example, the following code will prevent the user from entering more than 40 characters -\n\n\n\n ```html \n<cms:editable name='my_password' label='Password'\n desc='Enter your password'\n maxlength='40'\n type='password' />\n\n ``` \nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "width",
                    "description": "The width of the generated textbox can be changed by setting this parameter. For example, the following will make the textbox 200px wide -\n\n\n ```html \n<cms:editable name='my_password' label='Password' desc='Enter your password' width='200' type='password' /> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "maxlength",
                    "description": "The maximum number of characters that can be inputted by the user in this textbox can be constrained by setting this parameter. For example, the following code will prevent the user from entering more than 40 characters -\n\n\n ```html \n<cms:editable name='my_password' label='Password' desc='Enter your password' maxlength='40' type='password' /> \n ``` \nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'textarea'",
            "description": "b'type = 'textarea'\n===================\n\n\nEditable region of *textarea* type is used to allow users to input multiple lines of text. It is suitable for inputting multiple lines of unformatted text (i.e. not requiring HTML tags) although the user can format the text by manually adding HTML tags to the input.  \n\nFor this type, Couch creates a multi-line textbox for data input.\n\n\nAn editable region of *textarea* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name='prop_desc'\n label='Description'\n desc='Enter description of property here'\n type='textarea'>\n Condo pricing starts at just under $700,000. Waterfront Private Residences. Jack Nicklaus\n Signature Golf Course.\n</cms:editable>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-textarea.gif)\n\n\nThe default type of an editable region is *textarea*. Hence if the code example given above were to be written without explicitly setting the *type* parameter, the result would have been just the same. Thus -\n\n\n\n ```html \n<cms:editable\n name='prop_desc'\n label='Description'\n desc='Enter description of property here'>\n Condo pricing starts at just under $700,000. Waterfront Private Residences. Jack Nicklaus\n Signature Golf Course.\n</cms:editable>\n\n ``` \nwill result in an identical textbox.\n\n\n\n Any text enclosed between the opening and the closing tags will appear as the default text within the textbox. If you do not wish to have any default text, simply make the **Editable** tag self-closing e.g.  \n\n  \n\n\n ```html \n<cms:editable name='prop_desc' label='Description' desc='Enter description of property here' />\n ``` \n\n\n\n\nThe contents of this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<cms:show prop_desc />\n\n ``` \nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *textarea* accepts the following parameters\n\n\n\n\n* width\n\n* height\n\n* no_xss_check\n\n\n\n### width\n\n\n### height\n\n\nThe dimensions of the textarea can be changed by setting the *width* and *height* parameters. For example, the following will make it 400px wide and 200px high -\n\n\n\n ```html \n<cms:editable name='prop_desc' label='Description'\n desc='Enter description of property here'\n width='400'\n height='200'\n type='textarea'\n/>\n\n ``` \n### no_xss_check\n\n\nXSS (Cross Site Scripting) is a type of Web Application vulnerability which is caused by user managing to inject malicious script code into a webpage. Couch, by default, sanitizes all user input and that includes all inputs through all types of editable regions.\n\n\nIn some cases though, you'll wish to allow your user to input Javascript code, or even script containing Couch tags, into an editable region. This could be, for example, when you have created a textarea type editable region into which the user is supposed to enter his Google AdSense code. In such cases, to instruct Couch to leave the input alone and not to sanitize it, set the *no_xss_check* to '1'. As an example -\n\n\n\n ```html \n<cms:editable name='my_adsense' label=\"Adsense Code\" desc=\"Enter your Adsense code here\"\n height='100'\n no_xss_check='1'\n type='textarea'\n/>\n\n ``` \nWithout the *no_xss_check* explicitly set, Couch would disable all Javascript code contained within the AdSense code and thus make it useless.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "width",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "height",
                    "description": "The dimensions of the textarea can be changed by setting the *width* and *height* parameters. For example, the following will make it 400px wide and 200px high -\n\n\n ```html \n<cms:editable name='prop_desc' label='Description' desc='Enter description of property here' width='400' height='200' type='textarea' /> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "no_xss_check",
                    "description": "XSS (Cross Site Scripting) is a type of Web Application vulnerability which is caused by user managing to inject malicious script code into a webpage. Couch, by default, sanitizes all user input and that includes all inputs through all types of editable regions.\n\nIn some cases though, you'll wish to allow your user to input Javascript code, or even script containing Couch tags, into an editable region. This could be, for example, when you have created a textarea type editable region into which the user is supposed to enter his Google AdSense code. In such cases, to instruct Couch to leave the input alone and not to sanitize it, set the *no_xss_check* to '1'. As an example -\n\n\n ```html \n<cms:editable name='my_adsense' label=\"Adsense Code\" desc=\"Enter your Adsense code here\" height='100' no_xss_check='1' type='textarea' /> \n ``` \nWithout the *no_xss_check* explicitly set, Couch would disable all Javascript code contained within the AdSense code and thus make it useless.\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'dropdown'",
            "description": "b'type = 'dropdown'\n===================\n\n\nEditable region of *dropdown* type is used to allow the user to choose one option from several presented to him in the form of a dropdown list.\n\n\nAn editable region of *dropdown* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name=\"my_property_type\"\n label=\"Property Type\"\n desc=\"Select one from these\"\n opt_values='Residential | Commercial | Rental'\n type='dropdown'\n/>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-dropdown-1.gif)\n\n\nAfter clicking it appears as-\n\n\n![](../../assets/img/contents/editable-dropdown-2.gif)\n\n\nThe option selected in this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<cms:show my_property_type />\n\n ``` \nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *dropdown* accepts the following parameters\n\n\n\n\n* opt_values\n\n* opt_selected\n\n* separator\n\n* val_separator\n\n* search_type\n\n\n\n### opt_values\n\n\nThis parameter takes a list of all the options that are displayed in the dropdown list.\n\n\n\n ```html \nopt_values='Residential | Commercial | Rental'\n\n ``` \nThis results in the generation of a dropdown list with three options.  \n\nWhichever option is selected by the user gets saved as the value of the editable region. For example suppose the user selected *Rental*. The following code -\n\n\n\n ```html \n<cms:show my_property_type />\n\n ``` \n- will output 'Rental'.\n\n\nAs can be seen, the saved value is the same as the option's name. However we can specify a different value that can get saved into the editable region by using the following syntax -\n\n\n\n ```html \nopt_values='Residential=0 | Commercial=1 | Rental=2'\n\n ``` \nPrinting out the value contained within the editable region -\n\n\n\n ```html \n<cms:show my_property_type />\n\n ``` \n- will now output '2'.\n\n\n\n**NOTE:** A value of '-' (hyphen) carries a special meaning for Couch. It can be used with options that are not considered as selectable e.g.  \n\n  \n\n\n ```html \nopt_values='Please Select=- | Residential=0 | Commercial=1 | Rental=2'\n ``` \n\n In the example above, out of the four options in the list, if the first option is selected, the selection is not considered to be made. If *required* parameter is set, an error is thrown upon saving the page.\n\n\n\n### opt_selected\n\n\nYou can set one of the options to be selected by default by setting this parameter to the **value** of that item. For example -\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Residential | Commercial | Rental'\n opt_selected = 'Rental'\n type='dropdown'\n/>\n\n ``` \n- or -\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Residential=0 | Commercial=1 | Rental=2'\n opt_selected = '2'\n type='dropdown'\n/>\n\n ``` \nwill show **Rental** as the option selected by default.\n\n\n### separator\n\n\nAs seen in the examples above, the list provided to *opt_values* parameter consists of the options separated by a '|' (pipe) character  \n\nThis is the default separator used by Couch. For some reason if you do not wish to have a pipe as separator (e.g. if any of the options contains the pipe character within itself, obviously the same character cannot be used as the separator), any other character can be designated as the separator by setting this parameter. For example as in follows -\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Please Select=- * Residential=0 * Commercial=1 * Rental=2'\n separator='*'\n type='dropdown'\n/>\n\n ``` \nNote how the opt_values are separated by '*'.\n\n\n### val_separator\n\n\nSimilar to the problem outlined above, sometimes the options in the list contain the '=' (equals to) character. This makes it imposible to use '=' between the option's name and value. You can set any other character for this purpose by setting this parameter. For example -\n\n\n\n ```html \nval_separator=':'\n\n ``` \n### search_type\n\n\nCan be set to the following valid values -\n\n\n\n\n* text\n\n* integer\n\n* decimal\n\n\n\nThe default *search_type* is (as with all other types of editable regions) *text*.  \n\nIf you wish to use this region to input numeric values (e.g. age or salary), set the type to either *numeric* or *decimal* (if the value can be fractional).\n\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values.",
            "attributes": [
                {
                    "name": "opt_values",
                    "description": "This parameter takes a list of all the options that are displayed in the dropdown list.\n\n\n ```html \nopt_values='Residential | Commercial | Rental' \n ``` \nThis results in the generation of a dropdown list with three options.  \n Whichever option is selected by the user gets saved as the value of the editable region. For example suppose the user selected *Rental*. The following code -\n\n\n ```html \n<cms:show my_property_type /> \n ``` \n- will output 'Rental'.\n\nAs can be seen, the saved value is the same as the option's name. However we can specify a different value that can get saved into the editable region by using the following syntax -\n\n\n ```html \nopt_values='Residential=0 | Commercial=1 | Rental=2' \n ``` \nPrinting out the value contained within the editable region -\n\n\n ```html \n<cms:show my_property_type /> \n ``` \n- will now output '2'.\n\n **NOTE:** A value of '-' (hyphen) carries a special meaning for Couch. It can be used with options that are not considered as selectable e.g.  \n   \n \n ```html \nopt_values='Please Select=- | Residential=0 | Commercial=1 | Rental=2'\n ``` \n In the example above, out of the four options in the list, if the first option is selected, the selection is not considered to be made. If *required* parameter is set, an error is thrown upon saving the page. \n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "opt_selected",
                    "description": "You can set one of the options to be selected by default by setting this parameter to the **value** of that item. For example -\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Residential | Commercial | Rental' opt_selected = 'Rental' type='dropdown' /> \n ``` \n- or -\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Residential=0 | Commercial=1 | Rental=2' opt_selected = '2' type='dropdown' /> \n ``` \nwill show **Rental** as the option selected by default.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "separator",
                    "description": "As seen in the examples above, the list provided to *opt_values* parameter consists of the options separated by a '|' (pipe) character  \n This is the default separator used by Couch. For some reason if you do not wish to have a pipe as separator (e.g. if any of the options contains the pipe character within itself, obviously the same character cannot be used as the separator), any other character can be designated as the separator by setting this parameter. For example as in follows -\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Please Select=- * Residential=0 * Commercial=1 * Rental=2' separator='*' type='dropdown' /> \n ``` \nNote how the opt_values are separated by '*'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "val_separator",
                    "description": "Similar to the problem outlined above, sometimes the options in the list contain the '=' (equals to) character. This makes it imposible to use '=' between the option's name and value. You can set any other character for this purpose by setting this parameter. For example -\n\n\n ```html \nval_separator=':' \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "search_type",
                    "description": "Can be set to the following valid values -\n\n\n * text\n * integer\n * decimal\n \nThe default *search_type* is (as with all other types of editable regions) *text*.  \n If you wish to use this region to input numeric values (e.g. age or salary), set the type to either *numeric* or *decimal* (if the value can be fractional).\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See [**Pages**](../pages.html#custom_field).\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'radio'",
            "description": "b'type = 'radio'\n================\n\n\nEditable region of *radio* type is used to allow the user to choose one option from several presented to him in the form of radio buttons.\n\n\nAn editable region of *radio* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name=\"my_property_type\"\n label=\"Property Type\"\n desc=\"Select one from these\"\n opt_values='Residential | Commercial | Rental'\n type='radio'\n/>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-radio-1.gif)\n\n\nThe option selected in this region can be accessed, as with all other editable regions, by using the variable named after it -\n\n\n\n ```html \n<cms:show my_property_type />\n\n ``` \nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *radio* accepts the following parameters\n\n\n\n\n* opt_values\n\n* opt_selected\n\n* separator\n\n* val_separator\n\n* search_type\n\n\n\n### opt_values\n\n\nThis parameter takes a list of all the options that are displayed as radio buttons.\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Residential | Commercial | Rental'\n type='radio'\n/>\n\n ``` \nThe selected option will get saved as the value of the editable region. For example, if the user selected *Rental*, the following code -\n\n\n\n ```html \n<cms:show my_property_type />\n\n ``` \n- will output 'Rental'.\n\n\nAs can be seen, the saved value is the same as the option's name. However we can a specify a different value that can get saved into the editable region by using the following syntax -\n\n\n\n ```html \nopt_values='Residential=0 | Commercial=1 | Rental=2'\n\n ``` \nPrinting out the value contained within the editable region -\n\n\n\n ```html \n<cms:show my_property_type />\n\n ``` \n- will now output '2'.\n\n\n\n**TIP:** Specifying an empty option makes Couch generate a break '<BR>'. e.g.  \n\n  \n\n\n ```html \nopt_values='Residential=0 | Commercial=1 | | Rental=2'\n ``` \n\n In the code above, actually four options have been specified - the third option (between *Commercial* and *Rental*) is empty.  \n\n This results in -  \n\n  \n\n![](../../assets/img/contents/editable-radio-2.gif)\n\n\n\n### opt_selected\n\n\nBy default, the first option in the list is shown as the selected option. You can show any other option as selected by setting *opt_selected* to the **value** of that option. For example -\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Residential | Commercial | Rental'\n opt_selected = 'Rental'\n type='radio'\n/>\n\n ``` \n- or -\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Residential=0 | Commercial=1 | Rental=2'\n opt_selected = '2'\n type='radio'\n/>\n\n ``` \nwill show *Rental* as the option selected by default.\n\n\n### separator\n\n\nAs seen in the examples above, the list provided to *opt_values* parameter consists of the options separated by a '|' (pipe) character.  \n\nThis is the default separator used by Couch. For some reason if you do not wish to have a pipe as separator (e.g. if any of the options contains the pipe character within itself, obviously the same character cannot be used as the separator), any other character can be designated as the separator by setting this parameter. For example as in follows -\n\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\"\n opt_values='Residential=0 * Commercial=1 * Rental=2'\n separator='*'\n type='dropdown'\n/>\n\n ``` \nNote how the opt_values are separated by '*'.\n\n\n### val_separator\n\n\nSimilar to the problem outlined above, sometimes the options in the list contain the '=' (equals to) character. This makes it imposible to use '=' between the option's name and value. You can set any other character for this purpose by setting this parameter. For example -\n\n\n\n ```html \nval_separator=':'\n\n ``` \n### search_type\n\n\nCan be set to the following valid values -\n\n\n\n\n* text\n\n* integer\n\n* decimal\n\n\n\nThe default *search_type* is (as with all other types of editable regions) *text*.  \n\nIf you wish to use this region to input numeric values (e.g. age or salary), set the type to either *numeric* or *decimal* (if the value can be fractional).\n\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values.",
            "attributes": [
                {
                    "name": "opt_values",
                    "description": "This parameter takes a list of all the options that are displayed as radio buttons.\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Residential | Commercial | Rental' type='radio' /> \n ``` \nThe selected option will get saved as the value of the editable region. For example, if the user selected *Rental*, the following code -\n\n\n ```html \n<cms:show my_property_type /> \n ``` \n- will output 'Rental'.\n\nAs can be seen, the saved value is the same as the option's name. However we can a specify a different value that can get saved into the editable region by using the following syntax -\n\n\n ```html \nopt_values='Residential=0 | Commercial=1 | Rental=2' \n ``` \nPrinting out the value contained within the editable region -\n\n\n ```html \n<cms:show my_property_type /> \n ``` \n- will now output '2'.\n\n **TIP:** Specifying an empty option makes Couch generate a break '<BR>'. e.g.  \n   \n \n ```html \nopt_values='Residential=0 | Commercial=1 | | Rental=2'\n ``` \n In the code above, actually four options have been specified - the third option (between *Commercial* and *Rental*) is empty.  \n This results in -  \n   \n ![](../../assets/img/contents/editable-radio-2.gif) \n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "opt_selected",
                    "description": "By default, the first option in the list is shown as the selected option. You can show any other option as selected by setting *opt_selected* to the **value** of that option. For example -\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Residential | Commercial | Rental' opt_selected = 'Rental' type='radio' /> \n ``` \n- or -\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Residential=0 | Commercial=1 | Rental=2' opt_selected = '2' type='radio' /> \n ``` \nwill show *Rental* as the option selected by default.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "separator",
                    "description": "As seen in the examples above, the list provided to *opt_values* parameter consists of the options separated by a '|' (pipe) character.  \n This is the default separator used by Couch. For some reason if you do not wish to have a pipe as separator (e.g. if any of the options contains the pipe character within itself, obviously the same character cannot be used as the separator), any other character can be designated as the separator by setting this parameter. For example as in follows -\n\n\n ```html \n<cms:editable name=\"my_property_type\" label=\"Property Type\" desc=\"Select one from these\" opt_values='Residential=0 * Commercial=1 * Rental=2' separator='*' type='dropdown' /> \n ``` \nNote how the opt_values are separated by '*'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "val_separator",
                    "description": "Similar to the problem outlined above, sometimes the options in the list contain the '=' (equals to) character. This makes it imposible to use '=' between the option's name and value. You can set any other character for this purpose by setting this parameter. For example -\n\n\n ```html \nval_separator=':' \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "search_type",
                    "description": "Can be set to the following valid values -\n\n\n * text\n * integer\n * decimal\n \nThe default *search_type* is (as with all other types of editable regions) *text*.  \n If you wish to use this region to input numeric values (e.g. age or salary), set the type to either *numeric* or *decimal* (if the value can be fractional).\n\nIt is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See [**Pages**](../pages.html#custom_field).\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'checkbox'",
            "description": "b'type = 'checkbox'\n===================\n\n\nEditable region of *checkbox* type is used to allow the user to choose multiple options from several presented to him in the form of check boxes.\n\n\nAn editable region of *checkbox* type can be defined this way -\n\n\n\n ```html \n<cms:editable\n name=\"my_categories\"\n label=\"Categories\" desc=\"Check all applicable\"\n opt_values='Entertainment | Computers | Sports | Health'\n type='checkbox'\n/>\n\n ``` \nThe code above will result in -\n\n\n![](../../assets/img/contents/editable-checkbox-1.gif)\n\n\nThe options selected in this region can be accessed, as with all other editable regions, by using the variable named after it.  \n\nUnlike its counterparts,[*dropdown*](dropdown.html) and [*radio*](radio.html) types, *checkbox* type can contain multiple selected options. In the example given above, if the user selected *Entertainment*, *Sports* and *Health*, the following code -\n\n\n\n ```html \n<cms:show my_categories />\n\n ``` \nwill output -\n\n\n\n ```html \nEntertainment|Sports|Health\n\n ``` \nAs you can see, the value consists of all the three selected options clubbed together with a '|' (pipe) character separating them.\n\n\n\n**TIP:** To access each of the individual selected option, you can use the [**Each**](../each.html) tag -  \n\n  \n\n\n ```html \n<cms:each my_categories as='cat'>\n <cms:show cat /><br>\n</cms:each>\n ``` \n\n\n\n\nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, *checkbox* accepts the following parameters\n\n\n\n\n* opt_values\n\n* opt_selected\n\n* separator\n\n* val_separator\n\n\n\n### opt_values\n\n\nThis parameter takes a list of all the options that are displayed as check boxes.\n\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\"\n opt_values='Entertainment | Computers | Sports | Health'\n type='checkbox'\n/>\n\n ``` \nThe selected options will get saved as the value of the editable region. For example, if the user selected *Sports*, the following code -\n\n\n\n ```html \n<cms:show my_categories />\n\n ``` \n- will output 'Sports'.\n\n\nAs can be seen, the saved value is the same as the option's name. However we can a specify a different value that can get saved into the editable region by using the following syntax -\n\n\n\n ```html \nopt_values='Entertainment=0 | Computers=1 | Sports=2 | Health=3'\n\n ``` \nPrinting out the value contained within the editable region -\n\n\n\n ```html \n<cms:show my_categories />\n\n ``` \n- will now output '2'\n\n\nMultiple selections have been discussed above.\n\n\n\n**TIP:** Specifying an empty option makes Couch generate a break '<BR>'. e.g.  \n\n  \n\n\n ```html \nopt_values='Entertainment=0 | | Computers=1 | | Sports=2 | | Health=3'\n ``` \n\n In the code above, actually seven options have been specified - three are empty (nothing between the pipes).  \n\n This results in -  \n\n  \n\n![](../../assets/img/contents/editable-checkbox-2.gif)\n\n\n\n### opt_selected\n\n\nYou can show any option as selected by setting *opt_selected* to the value of that option. For example -\n\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\"\n opt_values='Entertainment | Computers | Sports | Health'\n opt_selected = 'Sports'\n type='checkbox'\n/>\n\n ``` \n- or -\n\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\"\n opt_values='Entertainment=0 | Computers=1 | Sports=2 | Health=3'\n opt_selected = '2'\n type='checkbox'\n/>\n\n ``` \n- will show *Sports* as the option selected by default.\n\n\nMultiple options can be shown as selected by separating the values by a '|' (pipe character) -\n\n\n\n ```html \nopt_selected = '0 | 2'\n\n ``` \nThe above will show *Entertainment* and *Sports* selected by default.\n\n\n### separator\n\n\nAs seen in the examples above, the list provided to *opt_values* parameter consists of the options separated by a '|' (pipe) character and so are the values provided to *opt_selected*.  \n\nThis is the default separator used by Couch. For some reason if you do not wish to have a pipe as separator (e.g. if any of the options contains the pipe character within itself, obviously the same character cannot be used as the separator), any other character can be designated as the separator by setting this parameter. For example as in follows -\n\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\"\n opt_values='Entertainment=0 * Computers=1 * Sports=2 * Health=3'\n opt_selected = '1 * 3'\n separator='*'\n type='checkbox'\n/>\n\n ``` \nNote how the *opt_values* and *opt_selected* are separated by '*'.\n\n\n### val_separator\n\n\nSimilar to the problem outlined above, sometimes the options in the list contain the '=' (equals to) character. This makes it imposible to use '=' between the option's name and value. You can set any other character for this purpose by setting this parameter. For example -\n\n\n\n ```html \nval_separator=':'\n\n ```",
            "attributes": [
                {
                    "name": "opt_values",
                    "description": "This parameter takes a list of all the options that are displayed as check boxes.\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\" opt_values='Entertainment | Computers | Sports | Health' type='checkbox' /> \n ``` \nThe selected options will get saved as the value of the editable region. For example, if the user selected *Sports*, the following code -\n\n\n ```html \n<cms:show my_categories /> \n ``` \n- will output 'Sports'.\n\nAs can be seen, the saved value is the same as the option's name. However we can a specify a different value that can get saved into the editable region by using the following syntax -\n\n\n ```html \nopt_values='Entertainment=0 | Computers=1 | Sports=2 | Health=3' \n ``` \nPrinting out the value contained within the editable region -\n\n\n ```html \n<cms:show my_categories /> \n ``` \n- will now output '2'\n\nMultiple selections have been discussed above.\n\n **TIP:** Specifying an empty option makes Couch generate a break '<BR>'. e.g.  \n   \n \n ```html \nopt_values='Entertainment=0 | | Computers=1 | | Sports=2 | | Health=3'\n ``` \n In the code above, actually seven options have been specified - three are empty (nothing between the pipes).  \n This results in -  \n   \n ![](../../assets/img/contents/editable-checkbox-2.gif) \n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "opt_selected",
                    "description": "You can show any option as selected by setting *opt_selected* to the value of that option. For example -\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\" opt_values='Entertainment | Computers | Sports | Health' opt_selected = 'Sports' type='checkbox' /> \n ``` \n- or -\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\" opt_values='Entertainment=0 | Computers=1 | Sports=2 | Health=3' opt_selected = '2' type='checkbox' /> \n ``` \n- will show *Sports* as the option selected by default.\n\nMultiple options can be shown as selected by separating the values by a '|' (pipe character) -\n\n\n ```html \nopt_selected = '0 | 2' \n ``` \nThe above will show *Entertainment* and *Sports* selected by default.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "separator",
                    "description": "As seen in the examples above, the list provided to *opt_values* parameter consists of the options separated by a '|' (pipe) character and so are the values provided to *opt_selected*.  \n This is the default separator used by Couch. For some reason if you do not wish to have a pipe as separator (e.g. if any of the options contains the pipe character within itself, obviously the same character cannot be used as the separator), any other character can be designated as the separator by setting this parameter. For example as in follows -\n\n\n ```html \n<cms:editable name=\"my_categories\" label=\"Categories\" desc=\"Check all applicable\" opt_values='Entertainment=0 * Computers=1 * Sports=2 * Health=3' opt_selected = '1 * 3' separator='*' type='checkbox' /> \n ``` \nNote how the *opt_values* and *opt_selected* are separated by '*'.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "val_separator",
                    "description": "Similar to the problem outlined above, sometimes the options in the list contain the '=' (equals to) character. This makes it imposible to use '=' between the option's name and value. You can set any other character for this purpose by setting this parameter. For example -\n\n\n ```html \nval_separator=':' \n ``` \nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'group'",
            "description": "b'type = 'group'\n================\n\n\nEditable region of type *group*, in fact, is not editable at all.  \n\nIt is meant to group together related editable regions and thus improve end user experience.\n\n\nAs an example, suppose a template has the following editable regions -\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image here' show_preview='1'\n type='image' />\n\n<cms:editable name='prop_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n height='80'\n assoc_field='prop_image'\n type='thumbnail' />\n\n<cms:editable name='prop_code' label='Area Code' desc='Enter area code here'\n maxlength='20'\n type='text' />\n\n<cms:editable name='prop_document' label='Downloadable File' desc='Upload the file here'\n type='file' />\n\n ``` \nThis is how they look like in the admin panel -\n\n\n![](../../assets/img/contents/editable-group-1.gif)\n\n\nOf the four regions, three are closely related (*prop_image*, *prop_image_thumb* and *prop_document*) since they need the user to upload something from his machine to the server.\n\n\nTo visually convey this relation we can group them together. For this first we create an editable region of *group* type -\n\n\n\n ```html \n<cms:editable name='prop_uploads' label='Uploads' desc='Your main uploads' type='group' />\n\n ``` \nNext link the three aforementioned editable regions to this group by setting their group parameters to its name.\n\n\n\n ```html \n<cms:editable name='prop_image' label='Image' desc='Upload main image here' show_preview='1'\n group='prop_uploads'\n type='image' />\n\n<cms:editable name='prop_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'\n width='100'\n height='80'\n assoc_field='prop_image'\n group='prop_uploads'\n type='thumbnail' />\n\n<cms:editable name='prop_code' label='Area Code' desc='Enter area code here'\n maxlength='20'\n type='text' />\n\n<cms:editable name='prop_document' label='Downloadable File' desc='Upload the file here'\n group='prop_uploads'\n type='file' />\n\n ``` \nAnd here is the result -\n\n\n![](../../assets/img/contents/editable-group-2.gif)\n\n\nAs you can see, the three regions have been grouped together in a panel.\n\n\nIf there are multiple groups in the template (and hence multiple panels), only one panel remains fully expanded while all the rest remainj collapsed, thus reducing the visual clutter in the admin panel.\n\n\nParameters\n----------\n\n\nOnly the parameters common to all editable regions apply to this type.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:type = 'message'",
            "description": "b'type = 'message'\n==================\n\n\nEditable region of *message* type is used to show arbitrary chunks of HTML to the user in the admin panel (in this sense, this tag is not editable at all). Any HTML enclosed within this tag will be output unchanged which makes it perfect for displaying messages in formatted HTML.\n\n\nAn example of this type -\n\n\n\n ```html \n<cms:editable name='banner' type='message'>\n<blockquote><p>The \"free\" distribution of unwelcome or misleading messages to thousands of people is an annoying and sometimes destructive use of the Internet's unprecedented efficiency.<br/>\n<span style=\"color: rgb(51,51, 51);\">Bill Gates, New York Times, 1998</span></p></blockquote>\n</cms:editable>\n\n ``` \nParameters\n----------\n\n\nPlease note that this tag ignores the *label* and *desc* parameters used with all other types.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (nicedit)](nicedit.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": []
        },
        {
            "name": "cms:type = 'nicedit'",
            "description": "b'type = 'nicedit'\n==================\n\n\nEditable region of type nicedit can be used as a light-weight alternative to editable region of type [**richtext**](richtext.html).  \n\nIt is primarily meant to be used with [**repeatable regions**](../../concepts/repeatable-regions.html) (as type 'richtext' does not support being repeated), however it can be used as an independent editable region too.\n\n\nUnlike 'richtext' that uses CKEditor - a full fledged Wysiwyg editor, 'nicedit' is somewhat limited in the wysiwyg features it offers but is perfect for situations where only basic HTML editing capability is required.\n\n\n![](../../assets/img/contents/editable-nicedit.png)\n\n\nA region of this type may either be defined like this :\n\n\n\n ```html \n<cms:editable type='nicedit' label='Description' name='my_desc' />\n\n ``` \nor\n\n\n\n ```html \n<cms:editable type='nicedit' label='Description' name='my_desc' >\nThis enclosed text will appear as the default value of the editor\n</cms:editable>\n\n ``` \nParameters\n----------\n\n\nIn addition to the parameters common to all the types of editable regions, nicedit accepts the following parameters\n\n\n\n\n* width\n\n* height\n\n* maxheight\n\n* buttons\n\n\n\n### width\n\n\n### height\n\n\n### maxheight\n\n\nThe dimensions of the editor can be changed by setting the **width**, **height**, and **maxheight** parameters. For example, the following will make it 400px wide and 200px high (and expand to 600px high as content is entered) -\n\n\n\n ```html \n<cms:editable type='nicedit' label='Description' name='my_desc'\n width='400'\n height='200'\n maxheight='600' />\n\n ``` \n### buttons\n\n\nThis parameter can be used to specify which buttons are displayed in the toolbar of the editor.\n\n\n\n ```html \n<cms:editable type='nicedit' label='Description' name='my_desc'\n buttons='italic, bold' />\n\n ``` \nThis parameter takes a comma seperated string containing the names of the buttons.  \n\nFollowing are the values that can be used:\n\n\n\n\n* bold\n\n* italic\n\n* underline\n\n* left\n\n* center\n\n* right\n\n* justify\n\n* ol\n\n* ul\n\n* subscript\n\n* superscript\n\n* strikethrough\n\n* removeformat\n\n* indent\n\n* outdent\n\n* hr\n\n* fontsize\n\n* fontfamily\n\n* fontformat\n\n* link\n\n* unlink\n\n* forecolor\n\n* bgcolor\n\n* image\n\n* source\n\n\n\nIf the 'buttons' parameter is not specified, the following set of buttons is used as the default:  \n\nbold, italic, underline, ol, ul, link, unlink, image, removeformat, source\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (relation)](relation.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "width",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "height",
                    "description": "",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "maxheight",
                    "description": "The dimensions of the editor can be changed by setting the **width**, **height**, and **maxheight** parameters. For example, the following will make it 400px wide and 200px high (and expand to 600px high as content is entered) -\n\n\n ```html \n<cms:editable type='nicedit' label='Description' name='my_desc' width='400' height='200' maxheight='600' /> \n ``` \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "buttons",
                    "description": "This parameter can be used to specify which buttons are displayed in the toolbar of the editor.\n\n\n ```html \n<cms:editable type='nicedit' label='Description' name='my_desc' buttons='italic, bold' /> \n ``` \nThis parameter takes a comma seperated string containing the names of the buttons.  \n Following are the values that can be used:\n\n\n * bold\n * italic\n * underline\n * left\n * center\n * right\n * justify\n * ol\n * ul\n * subscript\n * superscript\n * strikethrough\n * removeformat\n * indent\n * outdent\n * hr\n * fontsize\n * fontfamily\n * fontformat\n * link\n * unlink\n * forecolor\n * bgcolor\n * image\n * source\n \nIf the 'buttons' parameter is not specified, the following set of buttons is used as the default:  \n bold, italic, underline, ol, ul, link, unlink, image, removeformat, source\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (relation)](relation.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "cms:type = 'relation'",
            "description": "b'type = 'relation'\n===================\n\n\nPlease see [**Documentation - Core concepts - Relationships**](../../concepts/relationships.html) for a detailed explanation of this type of region.\n\n\nParameters\n----------\n\n\n\n\n* name\n\n* masterpage\n\n* has\n\n* reverse_has\n\n* folder\n\n* include_subfolders\n\n* orderby\n\n* order_dir\n\n\n\n### name\n\n\nMandatory. Uniquely identifies an editable region.\n\n\n### masterpage\n\n\nThis parameter specifies the template the cloned pages of which will be listed in this region.  \n\nThis represents the 'other' end of the relationship.\n\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' />\n\n ``` \nIn the example above, the editable region will list all cloned pages of 'albums.php'\n\n\n### has\n\n\nThis parameter specifies with how many of the listed pages can the page being edited be related to.  \n\nAcceptable values are 'one' and 'many' (where 'many' is the default).  \n\nIf 'one' is specified, the listing is shown in a drop-drop allowing only a single selection, Whereas if 'many' is used, the listing gets shown as a series of check-boxes to allow multiple-selections.\n\n\n### reverse_has\n\n\nThis parameter specifies with how many pages of the current template can the listed pages be related to.  \n\nAcceptable values are 'one' and 'many' (where 'many' is the default).  \n\nIf 'one' is specified, the listing shows only the pages that have not yet been associated with any other page.\n\n\n### folder\n\n\nThis parameter can be used to list only the page belonging to a particular folder (or folders).  \n\nAlso supports negation (where pages of the specified folder(s) will be skipped).\n\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='classical' />\n\n ``` \nThe example above will list only pages belonging to 'classical' folder (and its sub-folders).\n\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='classical, jazz' />\n\n ``` \nThe example above will list only pages belonging to either 'classical' or 'jazz' folders (or their sub-folders).\n\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='NOT classical, jazz' />\n\n ``` \nThe example above will list all pages of the template except those belonging to 'classical' or 'jazz' folders (and their sub-folders).\n\n\n### include_subfolders\n\n\nThe default value of this parameter is '1' and this causes the 'folder' parameter mentioned above to list pages belonging to the specified folder AND all sub-folders in the hierarchy below it.  \n\nSetting 'include_subfolders' to '0' will make this tag list only pages that are located directly within the specified folder.\n\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='classical' include_subfolders='1' />\n\n ``` \nThe example above will list only pages belonging directly to 'classical' folder.\n\n\n### orderby\n\n\nThe pages being listed can be sorted according to the following fields\n\n\n\n\n* publish_date\n\n* page_title\n\n* page_name\n\n\n\nIf unspecified, 'publish_date' is used as the default value.\n\n\n### order_dir\n\n\nThis parameter sets the sort direction of the listed pages.  \n\nThe acceptable values are\n\n\n\n\n* desc\n\n* asc\n\n\n\nIf unspecified, 'desc' is used as the default.\n\n\nRelated Tags\n------------\n\n\n\n\n* [editable](../editable.html)\n\n* [editable (text)](text.html)\n\n* [editable (password)](password.html)\n\n* [editable (textarea)](textarea.html)\n\n* [editable (richtext)](richtext.html)\n\n* [editable (image)](image.html)\n\n* [editable (thumbnail)](thumbnail.html)\n\n* [editable (file)](file.html)\n\n* [editable (radio)](radio.html)\n\n* [editable (checkbox)](checkbox.html)\n\n* [editable (dropdown)](dropdown.html)\n\n* [editable (group)](group.html)\n\n* [editable (message)](message.html)\n\n* [editable (nicedit)](nicedit.html)\n\n\n\n'",
            "attributes": [
                {
                    "name": "name",
                    "description": "Mandatory. Uniquely identifies an editable region.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "masterpage",
                    "description": "This parameter specifies the template the cloned pages of which will be listed in this region.  \n This represents the 'other' end of the relationship.\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' /> \n ``` \nIn the example above, the editable region will list all cloned pages of 'albums.php'\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "has",
                    "description": "This parameter specifies with how many of the listed pages can the page being edited be related to.  \n Acceptable values are 'one' and 'many' (where 'many' is the default).  \n If 'one' is specified, the listing is shown in a drop-drop allowing only a single selection, Whereas if 'many' is used, the listing gets shown as a series of check-boxes to allow multiple-selections.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "reverse_has",
                    "description": "This parameter specifies with how many pages of the current template can the listed pages be related to.  \n Acceptable values are 'one' and 'many' (where 'many' is the default).  \n If 'one' is specified, the listing shows only the pages that have not yet been associated with any other page.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "folder",
                    "description": "This parameter can be used to list only the page belonging to a particular folder (or folders).  \n Also supports negation (where pages of the specified folder(s) will be skipped).\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='classical' /> \n ``` \nThe example above will list only pages belonging to 'classical' folder (and its sub-folders).\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='classical, jazz' /> \n ``` \nThe example above will list only pages belonging to either 'classical' or 'jazz' folders (or their sub-folders).\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='NOT classical, jazz' /> \n ``` \nThe example above will list all pages of the template except those belonging to 'classical' or 'jazz' folders (and their sub-folders).\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "include_subfolders",
                    "description": "The default value of this parameter is '1' and this causes the 'folder' parameter mentioned above to list pages belonging to the specified folder AND all sub-folders in the hierarchy below it.  \n Setting 'include_subfolders' to '0' will make this tag list only pages that are located directly within the specified folder.\n\n\n ```html \n<cms:editable type='relation' name='artist_albums' masterpage='albums.php' folder='classical' include_subfolders='1' /> \n ``` \nThe example above will list only pages belonging directly to 'classical' folder.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "orderby",
                    "description": "The pages being listed can be sorted according to the following fields\n\n\n * publish_date\n * page_title\n * page_name\n \nIf unspecified, 'publish_date' is used as the default value.\n\n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "order_dir",
                    "description": "This parameter sets the sort direction of the listed pages.  \n The acceptable values are\n\n\n * desc\n * asc\n \nIf unspecified, 'desc' is used as the default.\n\nRelated Tags\n------------\n\n\n * [editable](../editable.html)\n * [editable (text)](text.html)\n * [editable (password)](password.html)\n * [editable (textarea)](textarea.html)\n * [editable (richtext)](richtext.html)\n * [editable (image)](image.html)\n * [editable (thumbnail)](thumbnail.html)\n * [editable (file)](file.html)\n * [editable (radio)](radio.html)\n * [editable (checkbox)](checkbox.html)\n * [editable (dropdown)](dropdown.html)\n * [editable (group)](group.html)\n * [editable (message)](message.html)\n * [editable (nicedit)](nicedit.html)\n \n",
                    "values": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        }
    ]
}
